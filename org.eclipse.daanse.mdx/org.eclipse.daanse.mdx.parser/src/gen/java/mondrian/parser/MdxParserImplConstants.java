/* Generated by: ParserGeneratorCC: Do not edit this line. MdxParserImplConstants.java */
package mondrian.parser;


/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface MdxParserImplConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AND = 1;
  /** RegularExpression Id. */
  int AS = 2;
  /** RegularExpression Id. */
  int AXIS = 3;
  /** RegularExpression Id. */
  int BEGIN = 4;
  /** RegularExpression Id. */
  int BY = 5;
  /** RegularExpression Id. */
  int CASE = 6;
  /** RegularExpression Id. */
  int CAST = 7;
  /** RegularExpression Id. */
  int CELL = 8;
  /** RegularExpression Id. */
  int CHAPTERS = 9;
  /** RegularExpression Id. */
  int CREATE = 10;
  /** RegularExpression Id. */
  int COLUMNS = 11;
  /** RegularExpression Id. */
  int COMMIT = 12;
  /** RegularExpression Id. */
  int CUBE = 13;
  /** RegularExpression Id. */
  int DIMENSION = 14;
  /** RegularExpression Id. */
  int DRILLTHROUGH = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int EMPTY = 17;
  /** RegularExpression Id. */
  int END = 18;
  /** RegularExpression Id. */
  int EXPLAIN = 19;
  /** RegularExpression Id. */
  int FIRSTROWSET = 20;
  /** RegularExpression Id. */
  int FOR = 21;
  /** RegularExpression Id. */
  int FROM = 22;
  /** RegularExpression Id. */
  int IN = 23;
  /** RegularExpression Id. */
  int IS = 24;
  /** RegularExpression Id. */
  int MATCHES = 25;
  /** RegularExpression Id. */
  int MAXROWS = 26;
  /** RegularExpression Id. */
  int MEMBER = 27;
  /** RegularExpression Id. */
  int NON = 28;
  /** RegularExpression Id. */
  int NOT = 29;
  /** RegularExpression Id. */
  int NULL = 30;
  /** RegularExpression Id. */
  int ON = 31;
  /** RegularExpression Id. */
  int OR = 32;
  /** RegularExpression Id. */
  int PAGES = 33;
  /** RegularExpression Id. */
  int PLAN = 34;
  /** RegularExpression Id. */
  int PROPERTIES = 35;
  /** RegularExpression Id. */
  int REFRESH = 36;
  /** RegularExpression Id. */
  int RETURN = 37;
  /** RegularExpression Id. */
  int ROLLBACK = 38;
  /** RegularExpression Id. */
  int ROWS = 39;
  /** RegularExpression Id. */
  int SECTIONS = 40;
  /** RegularExpression Id. */
  int SELECT = 41;
  /** RegularExpression Id. */
  int SESSION = 42;
  /** RegularExpression Id. */
  int SET = 43;
  /** RegularExpression Id. */
  int THEN = 44;
  /** RegularExpression Id. */
  int TRAN = 45;
  /** RegularExpression Id. */
  int TRANSACTION = 46;
  /** RegularExpression Id. */
  int UPDATE = 47;
  /** RegularExpression Id. */
  int USE_EQUAL_ALLOCATION = 48;
  /** RegularExpression Id. */
  int USE_EQUAL_INCREMENT = 49;
  /** RegularExpression Id. */
  int USE_WEIGHTED_ALLOCATION = 50;
  /** RegularExpression Id. */
  int USE_WEIGHTED_INCREMENT = 51;
  /** RegularExpression Id. */
  int WHEN = 52;
  /** RegularExpression Id. */
  int WHERE = 53;
  /** RegularExpression Id. */
  int XOR = 54;
  /** RegularExpression Id. */
  int WITH = 55;
  /** RegularExpression Id. */
  int EXISTING = 56;
  /** RegularExpression Id. */
  int $SYSTEM = 57;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 67;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 68;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 69;
  /** RegularExpression Id. */
  int ASTERISK = 71;
  /** RegularExpression Id. */
  int BANG = 72;
  /** RegularExpression Id. */
  int COLON = 73;
  /** RegularExpression Id. */
  int COMMA = 74;
  /** RegularExpression Id. */
  int CONCAT = 75;
  /** RegularExpression Id. */
  int DOT = 76;
  /** RegularExpression Id. */
  int EQ = 77;
  /** RegularExpression Id. */
  int GE = 78;
  /** RegularExpression Id. */
  int GT = 79;
  /** RegularExpression Id. */
  int LBRACE = 80;
  /** RegularExpression Id. */
  int LE = 81;
  /** RegularExpression Id. */
  int LPAREN = 82;
  /** RegularExpression Id. */
  int LT = 83;
  /** RegularExpression Id. */
  int MINUS = 84;
  /** RegularExpression Id. */
  int NE = 85;
  /** RegularExpression Id. */
  int PLUS = 86;
  /** RegularExpression Id. */
  int RBRACE = 87;
  /** RegularExpression Id. */
  int RPAREN = 88;
  /** RegularExpression Id. */
  int SOLIDUS = 89;
  /** RegularExpression Id. */
  int ATSIGN = 90;
  /** RegularExpression Id. */
  int UNSIGNED_INTEGER_LITERAL = 91;
  /** RegularExpression Id. */
  int APPROX_NUMERIC_LITERAL = 92;
  /** RegularExpression Id. */
  int DECIMAL_NUMERIC_LITERAL = 93;
  /** RegularExpression Id. */
  int EXPONENT = 94;
  /** RegularExpression Id. */
  int SINGLE_QUOTED_STRING = 95;
  /** RegularExpression Id. */
  int DOUBLE_QUOTED_STRING = 96;
  /** RegularExpression Id. */
  int WHITESPACE = 97;
  /** RegularExpression Id. */
  int ID = 98;
  /** RegularExpression Id. */
  int QUOTED_ID = 99;
  /** RegularExpression Id. */
  int AMP_QUOTED_ID = 100;
  /** RegularExpression Id. */
  int AMP_UNQUOTED_ID = 101;
  /** RegularExpression Id. */
  int LETTER = 102;
  /** RegularExpression Id. */
  int DIGIT = 103;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"AND\"",
    "\"AS\"",
    "\"AXIS\"",
    "\"BEGIN\"",
    "\"BY\"",
    "\"CASE\"",
    "\"CAST\"",
    "\"CELL\"",
    "\"CHAPTERS\"",
    "\"CREATE\"",
    "\"COLUMNS\"",
    "\"COMMIT\"",
    "\"CUBE\"",
    "\"DIMENSION\"",
    "\"DRILLTHROUGH\"",
    "\"ELSE\"",
    "\"EMPTY\"",
    "\"END\"",
    "\"EXPLAIN\"",
    "\"FIRSTROWSET\"",
    "\"FOR\"",
    "\"FROM\"",
    "\"IN\"",
    "\"IS\"",
    "\"MATCHES\"",
    "\"MAXROWS\"",
    "\"MEMBER\"",
    "\"NON\"",
    "\"NOT\"",
    "\"NULL\"",
    "\"ON\"",
    "\"OR\"",
    "\"PAGES\"",
    "\"PLAN\"",
    "\"PROPERTIES\"",
    "\"REFRESH\"",
    "\"RETURN\"",
    "\"ROLLBACK\"",
    "\"ROWS\"",
    "\"SECTIONS\"",
    "\"SELECT\"",
    "\"SESSION\"",
    "\"SET\"",
    "\"THEN\"",
    "\"TRAN\"",
    "\"TRANSACTION\"",
    "\"UPDATE\"",
    "\"USE_EQUAL_ALLOCATION\"",
    "\"USE_EQUAL_INCREMENT\"",
    "\"USE_WEIGHTED_ALLOCATION\"",
    "\"USE_WEIGHTED_INCREMENT\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"XOR\"",
    "\"WITH\"",
    "\"EXISTING\"",
    "\"$SYSTEM\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 63>",
    "\"//\"",
    "\"--\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 70>",
    "\"*\"",
    "\"!\"",
    "\":\"",
    "\",\"",
    "\"||\"",
    "\".\"",
    "\"=\"",
    "\">=\"",
    "\">\"",
    "\"{\"",
    "\"<=\"",
    "\"(\"",
    "\"<\"",
    "\"-\"",
    "\"<>\"",
    "\"+\"",
    "\"}\"",
    "\")\"",
    "\"/\"",
    "\"@\"",
    "<UNSIGNED_INTEGER_LITERAL>",
    "<APPROX_NUMERIC_LITERAL>",
    "<DECIMAL_NUMERIC_LITERAL>",
    "<EXPONENT>",
    "<SINGLE_QUOTED_STRING>",
    "<DOUBLE_QUOTED_STRING>",
    "<WHITESPACE>",
    "<ID>",
    "<QUOTED_ID>",
    "<AMP_QUOTED_ID>",
    "<AMP_UNQUOTED_ID>",
    "<LETTER>",
    "<DIGIT>",
  };

}
