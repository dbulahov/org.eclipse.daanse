/* MdxParserImplTokenManager.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. MdxParserImplTokenManager.java */
package mondrian.parser;
import java.util.*;
import java.io.StringReader;
import java.math.BigDecimal;
import mondrian.olap.*;
import mondrian.mdx.*;
import mondrian.parser.*;
import mondrian.resource.MondrianResource;
import mondrian.server.Statement;

/** Token Manager. */
@SuppressWarnings ("unused")
public class MdxParserImplTokenManager implements MdxParserImplConstants {
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000L) != 0x0L)
            return 44;
         if ((active0 & 0x3fffffffffffffeL) != 0x0L)
         {
            jjmatchedKind = 98;
            return 15;
         }
         if ((active1 & 0x2000005L) != 0x0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x181800024L) != 0x0L)
            return 15;
         if ((active1 & 0x4L) != 0x0L)
            return 0;
         if ((active0 & 0x3fffffe7e7fffdaL) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
            return 15;
         }
         return -1;
      case 2:
         if ((active0 & 0x40080030240002L) != 0x0L)
            return 15;
         if ((active0 & 0x3bff7fe4e5bffd8L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
            return 15;
         }
         return -1;
      case 3:
         if ((active0 & 0x32f877a0e1ade10L) != 0x0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 3;
            }
            return 15;
         }
         if ((active0 & 0x907084404121c8L) != 0x0L)
            return 15;
         return -1;
      case 4:
         if ((active0 & 0x20000200020010L) != 0x0L)
            return 15;
         if ((active0 & 0x30fc7780e18de00L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
            return 15;
         }
         return -1;
      case 5:
         if ((active0 & 0x30f45580618ca00L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
            return 15;
         }
         if ((active0 & 0x822008001400L) != 0x0L)
            return 15;
         return -1;
      case 6:
         if ((active0 & 0x200041006080800L) != 0x0L)
            return 15;
         if ((active0 & 0x10f41480010c200L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
            return 15;
         }
         return -1;
      case 7:
         if ((active0 & 0x100014000000200L) != 0x0L)
            return 15;
         if ((active0 & 0xf40080010c000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
            return 15;
         }
         return -1;
      case 8:
         if ((active0 & 0xf400800108000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 8;
            return 15;
         }
         if ((active0 & 0x4000L) != 0x0L)
            return 15;
         return -1;
      case 9:
         if ((active0 & 0xf400000108000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
            return 15;
         }
         if ((active0 & 0x800000000L) != 0x0L)
            return 15;
         return -1;
      case 10:
         if ((active0 & 0x400000100000L) != 0x0L)
            return 15;
         if ((active0 & 0xf000000008000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 10;
            return 15;
         }
         return -1;
      case 11:
         if ((active0 & 0xf000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 11;
            return 15;
         }
         if ((active0 & 0x8000L) != 0x0L)
            return 15;
         return -1;
      case 12:
         if ((active0 & 0xf000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 12;
            return 15;
         }
         return -1;
      case 13:
         if ((active0 & 0xf000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 13;
            return 15;
         }
         return -1;
      case 14:
         if ((active0 & 0xf000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 14;
            return 15;
         }
         return -1;
      case 15:
         if ((active0 & 0xf000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 15;
            return 15;
         }
         return -1;
      case 16:
         if ((active0 & 0xf000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 16;
            return 15;
         }
         return -1;
      case 17:
         if ((active0 & 0xf000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 17;
            return 15;
         }
         return -1;
      case 18:
         if ((active0 & 0x2000000000000L) != 0x0L)
            return 15;
         if ((active0 & 0xd000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 18;
            return 15;
         }
         return -1;
      case 19:
         if ((active0 & 0x1000000000000L) != 0x0L)
            return 15;
         if ((active0 & 0xc000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 19;
            return 15;
         }
         return -1;
      case 20:
         if ((active0 & 0xc000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 20;
            return 15;
         }
         return -1;
      case 21:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 21;
            return 15;
         }
         if ((active0 & 0x8000000000000L) != 0x0L)
            return 15;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case '!':
         return jjStopAtPos(0, 72);
      case '$':
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case '(':
         return jjStopAtPos(0, 82);
      case ')':
         return jjStopAtPos(0, 88);
      case '*':
         return jjStopAtPos(0, 71);
      case '+':
         return jjStopAtPos(0, 86);
      case ',':
         return jjStopAtPos(0, 74);
      case '-':
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case '.':
         return jjStartNfaWithStates_0(0, 76, 44);
      case '/':
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5L);
      case ':':
         return jjStopAtPos(0, 73);
      case '<':
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x220000L);
      case '=':
         return jjStopAtPos(0, 77);
      case '>':
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case '@':
         return jjStopAtPos(0, 90);
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa1_0(0xeL, 0x0L);
      case 'B':
      case 'b':
         return jjMoveStringLiteralDfa1_0(0x30L, 0x0L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa1_0(0x3fc0L, 0x0L);
      case 'D':
      case 'd':
         return jjMoveStringLiteralDfa1_0(0xc000L, 0x0L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa1_0(0x1000000000f0000L, 0x0L);
      case 'F':
      case 'f':
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x0L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa1_0(0xe000000L, 0x0L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa1_0(0x70000000L, 0x0L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L);
      case 'P':
      case 'p':
         return jjMoveStringLiteralDfa1_0(0xe00000000L, 0x0L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa1_0(0xf000000000L, 0x0L);
      case 'S':
      case 's':
         return jjMoveStringLiteralDfa1_0(0xf0000000000L, 0x0L);
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa1_0(0x700000000000L, 0x0L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x0L);
      case 'W':
      case 'w':
         return jjMoveStringLiteralDfa1_0(0xb0000000000000L, 0x0L);
      case 'X':
      case 'x':
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case '{':
         return jjStopAtPos(0, 80);
      case '|':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case '}':
         return jjStopAtPos(0, 87);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case '*':
         if ((active1 & 0x4L) != 0x0L)
            return jjStartNfaWithStates_0(1, 66, 0);
         break;
      case '-':
         if ((active1 & 0x2L) != 0x0L)
            return jjStopAtPos(1, 65);
         break;
      case '/':
         if ((active1 & 0x1L) != 0x0L)
            return jjStopAtPos(1, 64);
         break;
      case '=':
         if ((active1 & 0x4000L) != 0x0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x20000L) != 0x0L)
            return jjStopAtPos(1, 81);
         break;
      case '>':
         if ((active1 & 0x200000L) != 0x0L)
            return jjStopAtPos(1, 85);
         break;
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa2_0(active0, 0x2060000c0L, active1, 0x0L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa2_0(active0, 0xf3008000110L, active1, 0x0L);
      case 'H':
      case 'h':
         return jjMoveStringLiteralDfa2_0(active0, 0x30100000000200L, active1, 0x0L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000104000L, active1, 0x0L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa2_0(active0, 0x400010000L, active1, 0x0L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x0L);
      case 'N':
      case 'n':
         if ((active0 & 0x800000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 23, 15);
         else if ((active0 & 0x80000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 31, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x40002L, active1, 0x0L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa2_0(active0, 0x4000c030201800L, active1, 0x0L);
      case 'P':
      case 'p':
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x0L);
      case 'R':
      case 'r':
         if ((active0 & 0x100000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 32, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x600800408400L, active1, 0x0L);
      case 'S':
      case 's':
         if ((active0 & 0x4L) != 0x0L)
            return jjStartNfaWithStates_0(1, 2, 15);
         else if ((active0 & 0x1000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 24, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x20f000000000000L, active1, 0x0L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa2_0(active0, 0x40002000L, active1, 0x0L);
      case 'X':
      case 'x':
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000080008L, active1, 0x0L);
      case 'Y':
      case 'y':
         if ((active0 & 0x20L) != 0x0L)
            return jjStartNfaWithStates_0(1, 5, 15);
         break;
      case '|':
         if ((active1 & 0x800L) != 0x0L)
            return jjStopAtPos(1, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa3_0(active0, 0x600400000200L);
      case 'B':
      case 'b':
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 'D':
      case 'd':
         if ((active0 & 0x2L) != 0x0L)
            return jjStartNfaWithStates_0(2, 1, 15);
         else if ((active0 & 0x40000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 18, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa3_0(active0, 0x3f100000000400L);
      case 'F':
      case 'f':
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 'G':
      case 'g':
         return jjMoveStringLiteralDfa3_0(active0, 0x200000010L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000008008L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa3_0(active0, 0x24040000900L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa3_0(active0, 0x8005000L);
      case 'N':
      case 'n':
         if ((active0 & 0x10000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 28, 15);
         break;
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa3_0(active0, 0x800400000L);
      case 'P':
      case 'p':
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000L);
      case 'R':
      case 'r':
         if ((active0 & 0x200000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 21, 15);
         else if ((active0 & 0x40000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 54, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 'S':
      case 's':
         return jjMoveStringLiteralDfa3_0(active0, 0x400000100c0L);
      case 'T':
      case 't':
         if ((active0 & 0x20000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 29, 15);
         else if ((active0 & 0x80000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 43, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x80002002000000L);
      case 'W':
      case 'w':
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 'X':
      case 'x':
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 'Y':
      case 'y':
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa4_0(active0, 0xf000000000000L);
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000400L);
      case 'B':
      case 'b':
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 'E':
      case 'e':
         if ((active0 & 0x40L) != 0x0L)
            return jjStartNfaWithStates_0(3, 6, 15);
         else if ((active0 & 0x2000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 13, 15);
         else if ((active0 & 0x10000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 16, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x20200004000L);
      case 'H':
      case 'h':
         if ((active0 & 0x80000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 55, 15);
         break;
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 'L':
      case 'l':
         if ((active0 & 0x100L) != 0x0L)
            return jjStartNfaWithStates_0(3, 8, 15);
         else if ((active0 & 0x40000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 30, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000088000L);
      case 'M':
      case 'm':
         if ((active0 & 0x400000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 22, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 'N':
      case 'n':
         if ((active0 & 0x400000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 34, 15);
         else if ((active0 & 0x100000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 44, 15);
         else if ((active0 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 52, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 'P':
      case 'p':
         return jjMoveStringLiteralDfa4_0(active0, 0x800000200L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa4_0(active0, 0x20001004000000L);
      case 'S':
      case 's':
         if ((active0 & 0x8L) != 0x0L)
            return jjStartNfaWithStates_0(3, 3, 15);
         else if ((active0 & 0x8000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 39, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x300040000100000L);
      case 'T':
      case 't':
         if ((active0 & 0x80L) != 0x0L)
            return jjStartNfaWithStates_0(3, 7, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000020000L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 'B':
      case 'b':
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 'E':
      case 'e':
         if ((active0 & 0x20000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 53, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x3001808000000L);
      case 'H':
      case 'h':
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa5_0(active0, 0x50000001000L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 'N':
      case 'n':
         if ((active0 & 0x10L) != 0x0L)
            return jjStartNfaWithStates_0(4, 4, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 'S':
      case 's':
         if ((active0 & 0x200000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 33, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa5_0(active0, 0x300800000100600L);
      case 'W':
      case 'w':
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000000L);
      case 'Y':
      case 'y':
         if ((active0 & 0x20000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 17, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa6_0(active0, 0x404000000000L);
      case 'E':
      case 'e':
         if ((active0 & 0x400L) != 0x0L)
            return jjStartNfaWithStates_0(5, 10, 15);
         else if ((active0 & 0x800000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 47, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x20c000002000200L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000080000L);
      case 'N':
      case 'n':
         if ((active0 & 0x2000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 37, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa6_0(active0, 0x50000000000L);
      case 'Q':
      case 'q':
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000000L);
      case 'R':
      case 'r':
         if ((active0 & 0x8000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 27, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x800100000L);
      case 'S':
      case 's':
         return jjMoveStringLiteralDfa6_0(active0, 0x1000004000L);
      case 'T':
      case 't':
         if ((active0 & 0x1000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 12, 15);
         else if ((active0 & 0x20000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 41, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 'W':
      case 'w':
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa7_0(active0, 0x404000000000L);
      case 'H':
      case 'h':
         if ((active0 & 0x1000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 36, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000004000L);
      case 'M':
      case 'm':
         if ((active0 & 0x200000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 57, 15);
         break;
      case 'N':
      case 'n':
         if ((active0 & 0x80000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 19, 15);
         else if ((active0 & 0x40000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 42, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0x100010000000000L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 'S':
      case 's':
         if ((active0 & 0x800L) != 0x0L)
            return jjStartNfaWithStates_0(6, 11, 15);
         else if ((active0 & 0x2000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 25, 15);
         else if ((active0 & 0x4000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 26, 15);
         break;
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000000000L);
      case 'G':
      case 'g':
         if ((active0 & 0x100000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(7, 56, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0xc000000000000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 'K':
      case 'k':
         if ((active0 & 0x4000000000L) != 0x0L)
            return jjStartNfaWithStates_0(7, 38, 15);
         break;
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 'S':
      case 's':
         if ((active0 & 0x200L) != 0x0L)
            return jjStartNfaWithStates_0(7, 9, 15);
         else if ((active0 & 0x10000000000L) != 0x0L)
            return jjStartNfaWithStates_0(7, 40, 15);
         break;
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 'W':
      case 'w':
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 'H':
      case 'h':
         return jjMoveStringLiteralDfa9_0(active0, 0xc000000000000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000000000L);
      case 'N':
      case 'n':
         if ((active0 & 0x4000L) != 0x0L)
            return jjStartNfaWithStates_0(8, 14, 15);
         break;
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 'S':
      case 's':
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa10_0(active0, 0x3000000000000L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 'S':
      case 's':
         if ((active0 & 0x800000000L) != 0x0L)
            return jjStartNfaWithStates_0(9, 35, 15);
         break;
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000000L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000L);
      case 'G':
      case 'g':
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);
      case 'N':
      case 'n':
         if ((active0 & 0x400000000000L) != 0x0L)
            return jjStartNfaWithStates_0(10, 46, 15);
         break;
      case 'T':
      case 't':
         if ((active0 & 0x100000L) != 0x0L)
            return jjStartNfaWithStates_0(10, 20, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 'D':
      case 'd':
         return jjMoveStringLiteralDfa12_0(active0, 0xc000000000000L);
      case 'H':
      case 'h':
         if ((active0 & 0x8000L) != 0x0L)
            return jjStartNfaWithStates_0(11, 15, 15);
         break;
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa13_0(active0, 0xc000000000000L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L);
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000000L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000000000L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L);
      case 'T':
      case 't':
         if ((active0 & 0x2000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(18, 49, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000L);
      case 'N':
      case 'n':
         if ((active0 & 0x1000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(19, 48, 15);
         break;
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000000000L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000000000L);
      case 'T':
      case 't':
         if ((active0 & 0x8000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(21, 51, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 'N':
      case 'n':
         if ((active0 & 0x4000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(22, 50, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 44;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 38)
                     { jjAddStates(7, 8); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(34, 35); }
                  else if (curChar == 36)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(15); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(12, 14); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(34, 24); }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0x0L && kind > 63)
                     kind = 63;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
               case 6:
                  if (curChar == 39)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 5:
                  if ((0xffffff7fffffffffL & l) != 0x0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 7:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 39 && kind > 95)
                     kind = 95;
                  break;
               case 9:
               case 11:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0x0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 12:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 34 && kind > 96)
                     kind = 96;
                  break;
               case 14:
                  if (curChar != 36)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(15); }
                  break;
               case 15:
                  if ((0x3ff001000000000L & l) == 0x0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(15); }
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) != 0x0L)
                     { jjAddStates(15, 17); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  { jjCheckNAdd(26); }
                  break;
               case 27:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(28, 24); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(28, 24); }
                  break;
               case 29:
                  if (curChar != 46)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(30); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddStates(21, 24); }
                  break;
               case 33:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(34, 24); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(35); }
                  break;
               case 36:
                  if (curChar == 38)
                     { jjAddStates(7, 8); }
                  break;
               case 38:
                  if ((0xffffffffffffdbffL & l) != 0x0L)
                     { jjAddStates(25, 27); }
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) == 0x0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0x0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(15); }
                  }
                  else if (curChar == 91)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 1:
                  if (kind > 63)
                     kind = 63;
                  break;
               case 5:
                  { jjAddStates(12, 14); }
                  break;
               case 10:
                  { jjAddStates(9, 11); }
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar == 91)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 17:
                  if ((0xffffffffdfffffffL & l) != 0x0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 18:
                  if (curChar == 93)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 19:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 93 && kind > 99)
                     kind = 99;
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(28, 29); }
                  break;
               case 37:
                  if (curChar == 91)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 38:
                  if ((0xffffffffdfffffffL & l) != 0x0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 39:
                  if (curChar == 93)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 40:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 93 && kind > 100)
                     kind = 100;
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) == 0x0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(43); }
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(43); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 15:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(15); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 63)
                     kind = 63;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 14); }
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(9, 11); }
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(15, 17); }
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(25, 27); }
                  break;
               case 43:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 44 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0x0L)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 67)
                     kind = 67;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 3 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case '*':
         return jjMoveStringLiteralDfa1_2(0x10L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case '/':
         if ((active1 & 0x10L) != 0x0L)
            return jjStopAtPos(1, 68);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case '*':
         return jjMoveStringLiteralDfa1_3(0x20L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case '/':
         if ((active1 & 0x20L) != 0x0L)
            return jjStopAtPos(1, 69);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\52", "\41", "\72", "\54", "\174\174", "\56", "\75", "\76\75", "\76", 
"\173", "\74\75", "\50", "\74", "\55", "\74\76", "\53", "\175", "\51", "\57", "\100", 
null, null, null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = im == null ? input_stream.getImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   22, 23, 27, 24, 29, 31, 32, 37, 42, 10, 12, 13, 5, 7, 8, 17, 
   19, 20, 29, 30, 31, 27, 28, 24, 32, 38, 40, 41, 25, 26, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop:
  for (;;)
  {
   try
   {
      curChar = input_stream.beginToken();
   }
   catch(final Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try {
           input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0x0L)
               curChar = input_stream.beginToken();
         }
         catch (final java.io.IOException e1) {
           continue EOFLoop;
         }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 70)
         {
            jjmatchedKind = 70;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 70)
         {
            jjmatchedKind = 70;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 70)
         {
            jjmatchedKind = 70;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (final java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try {
       input_stream.readChar();
       input_stream.backup(1);
     }
     catch (final java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.getImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.getImage();
     }
     throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MdxParserImplTokenManager(SimpleCharStream stream){
    input_stream = stream;
  }

  /** Constructor. */
  public MdxParserImplTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 44; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 1, 1, 3, 0, 0, 0, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3ffffffffffffffL, 0x3dbfffff80L, 
};
static final long[] jjtoSkip = {
   0x7c00000000000000L, 0x38L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x38L, 
};
static final long[] jjtoMore = {
   0x8000000000000000L, 0x47L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[44];
    private final int[] jjstateSet = new int[2 * 44];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
