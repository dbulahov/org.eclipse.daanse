/*
 * generated by Xtext 2.28.0
 */
parser grammar InternalMdxParser;

options {
	tokenVocab=InternalMdxLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.eclipse.daanse.mdx.xtext.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.daanse.mdx.xtext.services.MdxGrammarAccess;

}
@members {
	private MdxGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Apostrophe", "'\''");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("AS", "'AS'");
		tokenNameToValue.put("ON", "'ON'");
		tokenNameToValue.put("OR", "'OR'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("AND", "'AND'");
		tokenNameToValue.put("END", "'END'");
		tokenNameToValue.put("NON", "'NON'");
		tokenNameToValue.put("NOT", "'NOT'");
		tokenNameToValue.put("SET", "'SET'");
		tokenNameToValue.put("XOR", "'XOR'");
		tokenNameToValue.put("CASE", "'CASE'");
		tokenNameToValue.put("CELL", "'CELL'");
		tokenNameToValue.put("ELSE", "'ELSE'");
		tokenNameToValue.put("FROM", "'FROM'");
		tokenNameToValue.put("THEN", "'THEN'");
		tokenNameToValue.put("WHEN", "'WHEN'");
		tokenNameToValue.put("WITH", "'WITH'");
		tokenNameToValue.put("EMPTY", "'EMPTY'");
		tokenNameToValue.put("VALUE", "'VALUE'");
		tokenNameToValue.put("WHERE", "'WHERE'");
		tokenNameToValue.put("MEMBER", "'MEMBER'");
		tokenNameToValue.put("SELECT", "'SELECT'");
		tokenNameToValue.put("DIMENSION", "'DIMENSION'");
		tokenNameToValue.put("PROPERTIES", "'PROPERTIES'");
		tokenNameToValue.put("CELL_ORDINAL", "'CELL_ORDINAL'");
		tokenNameToValue.put("FORMATTED_VALUE", "'FORMATTED_VALUE'");
	}

	public void setGrammarAccess(MdxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleMdxStatement
entryRuleMdxStatement
:
{ before(grammarAccess.getMdxStatementRule()); }
	 ruleMdxStatement
{ after(grammarAccess.getMdxStatementRule()); } 
	 EOF 
;

// Rule MdxStatement
ruleMdxStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMdxStatementAccess().getStatementAssignment()); }
		(rule__MdxStatement__StatementAssignment)
		{ after(grammarAccess.getMdxStatementAccess().getStatementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement
:
{ before(grammarAccess.getSelectStatementRule()); }
	 ruleSelectStatement
{ after(grammarAccess.getSelectStatementRule()); } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectStatementAccess().getGroup()); }
		(rule__SelectStatement__Group__0)
		{ after(grammarAccess.getSelectStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormulaSpecification
entryRuleFormulaSpecification
:
{ before(grammarAccess.getFormulaSpecificationRule()); }
	 ruleFormulaSpecification
{ after(grammarAccess.getFormulaSpecificationRule()); } 
	 EOF 
;

// Rule FormulaSpecification
ruleFormulaSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getFormulaSpecificationAccess().getSingleFormulaSpecificationParserRuleCall()); }
			(ruleSingleFormulaSpecification)
			{ after(grammarAccess.getFormulaSpecificationAccess().getSingleFormulaSpecificationParserRuleCall()); }
		)
		(
			{ before(grammarAccess.getFormulaSpecificationAccess().getSingleFormulaSpecificationParserRuleCall()); }
			(ruleSingleFormulaSpecification)*
			{ after(grammarAccess.getFormulaSpecificationAccess().getSingleFormulaSpecificationParserRuleCall()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleFormulaSpecification
entryRuleSingleFormulaSpecification
:
{ before(grammarAccess.getSingleFormulaSpecificationRule()); }
	 ruleSingleFormulaSpecification
{ after(grammarAccess.getSingleFormulaSpecificationRule()); } 
	 EOF 
;

// Rule SingleFormulaSpecification
ruleSingleFormulaSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleFormulaSpecificationAccess().getAlternatives()); }
		(rule__SingleFormulaSpecification__Alternatives)
		{ after(grammarAccess.getSingleFormulaSpecificationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetSpecification
entryRuleSetSpecification
:
{ before(grammarAccess.getSetSpecificationRule()); }
	 ruleSetSpecification
{ after(grammarAccess.getSetSpecificationRule()); } 
	 EOF 
;

// Rule SetSpecification
ruleSetSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetSpecificationAccess().getGroup()); }
		(rule__SetSpecification__Group__0)
		{ after(grammarAccess.getSetSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemberSpecification
entryRuleMemberSpecification
:
{ before(grammarAccess.getMemberSpecificationRule()); }
	 ruleMemberSpecification
{ after(grammarAccess.getMemberSpecificationRule()); } 
	 EOF 
;

// Rule MemberSpecification
ruleMemberSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberSpecificationAccess().getGroup()); }
		(rule__MemberSpecification__Group__0)
		{ after(grammarAccess.getMemberSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAxisSpecificationList
entryRuleAxisSpecificationList
:
{ before(grammarAccess.getAxisSpecificationListRule()); }
	 ruleAxisSpecificationList
{ after(grammarAccess.getAxisSpecificationListRule()); } 
	 EOF 
;

// Rule AxisSpecificationList
ruleAxisSpecificationList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAxisSpecificationListAccess().getGroup()); }
		(rule__AxisSpecificationList__Group__0)
		{ after(grammarAccess.getAxisSpecificationListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemberPropertyDefList
entryRuleMemberPropertyDefList
:
{ before(grammarAccess.getMemberPropertyDefListRule()); }
	 ruleMemberPropertyDefList
{ after(grammarAccess.getMemberPropertyDefListRule()); } 
	 EOF 
;

// Rule MemberPropertyDefList
ruleMemberPropertyDefList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberPropertyDefListAccess().getGroup()); }
		(rule__MemberPropertyDefList__Group__0)
		{ after(grammarAccess.getMemberPropertyDefListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemberName
entryRuleMemberName
:
{ before(grammarAccess.getMemberNameRule()); }
	 ruleMemberName
{ after(grammarAccess.getMemberNameRule()); } 
	 EOF 
;

// Rule MemberName
ruleMemberName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberNameAccess().getCompoundIdParserRuleCall()); }
		ruleCompoundId
		{ after(grammarAccess.getMemberNameAccess().getCompoundIdParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemberPropertyDefinition
entryRuleMemberPropertyDefinition
:
{ before(grammarAccess.getMemberPropertyDefinitionRule()); }
	 ruleMemberPropertyDefinition
{ after(grammarAccess.getMemberPropertyDefinitionRule()); } 
	 EOF 
;

// Rule MemberPropertyDefinition
ruleMemberPropertyDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberPropertyDefinitionAccess().getGroup()); }
		(rule__MemberPropertyDefinition__Group__0)
		{ after(grammarAccess.getMemberPropertyDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetName
entryRuleSetName
:
{ before(grammarAccess.getSetNameRule()); }
	 ruleSetName
{ after(grammarAccess.getSetNameRule()); } 
	 EOF 
;

// Rule SetName
ruleSetName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetNameAccess().getCompoundIdParserRuleCall()); }
		ruleCompoundId
		{ after(grammarAccess.getSetNameAccess().getCompoundIdParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompoundId
entryRuleCompoundId
:
{ before(grammarAccess.getCompoundIdRule()); }
	 ruleCompoundId
{ after(grammarAccess.getCompoundIdRule()); } 
	 EOF 
;

// Rule CompoundId
ruleCompoundId 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompoundIdAccess().getGroup()); }
		(rule__CompoundId__Group__0)
		{ after(grammarAccess.getCompoundIdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAxisSpecification
entryRuleAxisSpecification
:
{ before(grammarAccess.getAxisSpecificationRule()); }
	 ruleAxisSpecification
{ after(grammarAccess.getAxisSpecificationRule()); } 
	 EOF 
;

// Rule AxisSpecification
ruleAxisSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAxisSpecificationAccess().getGroup()); }
		(rule__AxisSpecification__Group__0)
		{ after(grammarAccess.getAxisSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAxisName
entryRuleAxisName
:
{ before(grammarAccess.getAxisNameRule()); }
	 ruleAxisName
{ after(grammarAccess.getAxisNameRule()); } 
	 EOF 
;

// Rule AxisName
ruleAxisName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAxisNameAccess().getIdentifierParserRuleCall()); }
		ruleIdentifier
		{ after(grammarAccess.getAxisNameAccess().getIdentifierParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDimProperties
entryRuleDimProperties
:
{ before(grammarAccess.getDimPropertiesRule()); }
	 ruleDimProperties
{ after(grammarAccess.getDimPropertiesRule()); } 
	 EOF 
;

// Rule DimProperties
ruleDimProperties 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDimPropertiesAccess().getGroup()); }
		(rule__DimProperties__Group__0)
		{ after(grammarAccess.getDimPropertiesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyList
entryRulePropertyList
:
{ before(grammarAccess.getPropertyListRule()); }
	 rulePropertyList
{ after(grammarAccess.getPropertyListRule()); } 
	 EOF 
;

// Rule PropertyList
rulePropertyList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyListAccess().getGroup()); }
		(rule__PropertyList__Group__0)
		{ after(grammarAccess.getPropertyListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getCompoundIdParserRuleCall()); }
		ruleCompoundId
		{ after(grammarAccess.getPropertyAccess().getCompoundIdParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCubeSpecification
entryRuleCubeSpecification
:
{ before(grammarAccess.getCubeSpecificationRule()); }
	 ruleCubeSpecification
{ after(grammarAccess.getCubeSpecificationRule()); } 
	 EOF 
;

// Rule CubeSpecification
ruleCubeSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCubeSpecificationAccess().getCubeNameParserRuleCall()); }
		ruleCubeName
		{ after(grammarAccess.getCubeSpecificationAccess().getCubeNameParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCubeName
entryRuleCubeName
:
{ before(grammarAccess.getCubeNameRule()); }
	 ruleCubeName
{ after(grammarAccess.getCubeNameRule()); } 
	 EOF 
;

// Rule CubeName
ruleCubeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCubeNameAccess().getCompoundIdParserRuleCall()); }
		ruleCompoundId
		{ after(grammarAccess.getCubeNameAccess().getCompoundIdParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSlicerSpecification
entryRuleSlicerSpecification
:
{ before(grammarAccess.getSlicerSpecificationRule()); }
	 ruleSlicerSpecification
{ after(grammarAccess.getSlicerSpecificationRule()); } 
	 EOF 
;

// Rule SlicerSpecification
ruleSlicerSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSlicerSpecificationAccess().getExpressionParserRuleCall()); }
		ruleExpression
		{ after(grammarAccess.getSlicerSpecificationAccess().getExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCellPropeties
entryRuleCellPropeties
:
{ before(grammarAccess.getCellPropetiesRule()); }
	 ruleCellPropeties
{ after(grammarAccess.getCellPropetiesRule()); } 
	 EOF 
;

// Rule CellPropeties
ruleCellPropeties 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellPropetiesAccess().getGroup()); }
		(rule__CellPropeties__Group__0)
		{ after(grammarAccess.getCellPropetiesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCellPropertyList
entryRuleCellPropertyList
:
{ before(grammarAccess.getCellPropertyListRule()); }
	 ruleCellPropertyList
{ after(grammarAccess.getCellPropertyListRule()); } 
	 EOF 
;

// Rule CellPropertyList
ruleCellPropertyList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellPropertyListAccess().getGroup()); }
		(rule__CellPropertyList__Group__0)
		{ after(grammarAccess.getCellPropertyListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCellProperty
entryRuleCellProperty
:
{ before(grammarAccess.getCellPropertyRule()); }
	 ruleCellProperty
{ after(grammarAccess.getCellPropertyRule()); } 
	 EOF 
;

// Rule CellProperty
ruleCellProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellPropertyAccess().getAlternatives()); }
		(rule__CellProperty__Alternatives)
		{ after(grammarAccess.getCellPropertyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMandatoryCellProperty
entryRuleMandatoryCellProperty
:
{ before(grammarAccess.getMandatoryCellPropertyRule()); }
	 ruleMandatoryCellProperty
{ after(grammarAccess.getMandatoryCellPropertyRule()); } 
	 EOF 
;

// Rule MandatoryCellProperty
ruleMandatoryCellProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMandatoryCellPropertyAccess().getAlternatives()); }
		(rule__MandatoryCellProperty__Alternatives)
		{ after(grammarAccess.getMandatoryCellPropertyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProviderSpecificCellProperty
entryRuleProviderSpecificCellProperty
:
{ before(grammarAccess.getProviderSpecificCellPropertyRule()); }
	 ruleProviderSpecificCellProperty
{ after(grammarAccess.getProviderSpecificCellPropertyRule()); } 
	 EOF 
;

// Rule ProviderSpecificCellProperty
ruleProviderSpecificCellProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProviderSpecificCellPropertyAccess().getIdentifierParserRuleCall()); }
		ruleIdentifier
		{ after(grammarAccess.getProviderSpecificCellPropertyAccess().getIdentifierParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueExpression
entryRuleValueExpression
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueExpressionAccess().getGroup()); }
		(rule__ValueExpression__Group__0)
		{ after(grammarAccess.getValueExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueXorExpression
entryRuleValueXorExpression
:
{ before(grammarAccess.getValueXorExpressionRule()); }
	 ruleValueXorExpression
{ after(grammarAccess.getValueXorExpressionRule()); } 
	 EOF 
;

// Rule ValueXorExpression
ruleValueXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueXorExpressionAccess().getGroup()); }
		(rule__ValueXorExpression__Group__0)
		{ after(grammarAccess.getValueXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueOrExpression
entryRuleValueOrExpression
:
{ before(grammarAccess.getValueOrExpressionRule()); }
	 ruleValueOrExpression
{ after(grammarAccess.getValueOrExpressionRule()); } 
	 EOF 
;

// Rule ValueOrExpression
ruleValueOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueOrExpressionAccess().getGroup()); }
		(rule__ValueOrExpression__Group__0)
		{ after(grammarAccess.getValueOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm5
entryRuleTerm5
:
{ before(grammarAccess.getTerm5Rule()); }
	 ruleTerm5
{ after(grammarAccess.getTerm5Rule()); } 
	 EOF 
;

// Rule Term5
ruleTerm5 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerm5Access().getGroup()); }
		(rule__Term5__Group__0)
		{ after(grammarAccess.getTerm5Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm4
entryRuleTerm4
:
{ before(grammarAccess.getTerm4Rule()); }
	 ruleTerm4
{ after(grammarAccess.getTerm4Rule()); } 
	 EOF 
;

// Rule Term4
ruleTerm4 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerm4Access().getAlternatives()); }
		(rule__Term4__Alternatives)
		{ after(grammarAccess.getTerm4Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm3
entryRuleTerm3
:
{ before(grammarAccess.getTerm3Rule()); }
	 ruleTerm3
{ after(grammarAccess.getTerm3Rule()); } 
	 EOF 
;

// Rule Term3
ruleTerm3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerm3Access().getGroup()); }
		(rule__Term3__Group__0)
		{ after(grammarAccess.getTerm3Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm2
entryRuleTerm2
:
{ before(grammarAccess.getTerm2Rule()); }
	 ruleTerm2
{ after(grammarAccess.getTerm2Rule()); } 
	 EOF 
;

// Rule Term2
ruleTerm2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerm2Access().getGroup()); }
		(rule__Term2__Group__0)
		{ after(grammarAccess.getTerm2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getGroup()); }
		(rule__Term__Group__0)
		{ after(grammarAccess.getTermAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactor
entryRuleFactor
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getAlternatives()); }
		(rule__Factor__Alternatives)
		{ after(grammarAccess.getFactorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueExpressionPrimary
entryRuleValueExpressionPrimary
:
{ before(grammarAccess.getValueExpressionPrimaryRule()); }
	 ruleValueExpressionPrimary
{ after(grammarAccess.getValueExpressionPrimaryRule()); } 
	 EOF 
;

// Rule ValueExpressionPrimary
ruleValueExpressionPrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueExpressionPrimaryAccess().getGroup()); }
		(rule__ValueExpressionPrimary__Group__0)
		{ after(grammarAccess.getValueExpressionPrimaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueExpressionPrimary0
entryRuleValueExpressionPrimary0
:
{ before(grammarAccess.getValueExpressionPrimary0Rule()); }
	 ruleValueExpressionPrimary0
{ after(grammarAccess.getValueExpressionPrimary0Rule()); } 
	 EOF 
;

// Rule ValueExpressionPrimary0
ruleValueExpressionPrimary0 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueExpressionPrimary0Access().getAlternatives()); }
		(rule__ValueExpressionPrimary0__Alternatives)
		{ after(grammarAccess.getValueExpressionPrimary0Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionList
entryRuleExpressionList
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionListAccess().getGroup()); }
		(rule__ExpressionList__Group__0)
		{ after(grammarAccess.getExpressionListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseExpression
entryRuleCaseExpression
:
{ before(grammarAccess.getCaseExpressionRule()); }
	 ruleCaseExpression
{ after(grammarAccess.getCaseExpressionRule()); } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseExpressionAccess().getGroup()); }
		(rule__CaseExpression__Group__0)
		{ after(grammarAccess.getCaseExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhenList
entryRuleWhenList
:
{ before(grammarAccess.getWhenListRule()); }
	 ruleWhenList
{ after(grammarAccess.getWhenListRule()); } 
	 EOF 
;

// Rule WhenList
ruleWhenList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhenListAccess().getGroup()); }
		(rule__WhenList__Group__0)
		{ after(grammarAccess.getWhenListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhenClause
entryRuleWhenClause
:
{ before(grammarAccess.getWhenClauseRule()); }
	 ruleWhenClause
{ after(grammarAccess.getWhenClauseRule()); } 
	 EOF 
;

// Rule WhenClause
ruleWhenClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhenClauseAccess().getGroup()); }
		(rule__WhenClause__Group__0)
		{ after(grammarAccess.getWhenClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompatingOperator
entryRuleCompatingOperator
:
{ before(grammarAccess.getCompatingOperatorRule()); }
	 ruleCompatingOperator
{ after(grammarAccess.getCompatingOperatorRule()); } 
	 EOF 
;

// Rule CompatingOperator
ruleCompatingOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompatingOperatorAccess().getAlternatives()); }
		(rule__CompatingOperator__Alternatives)
		{ after(grammarAccess.getCompatingOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentifier
entryRuleIdentifier
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierAccess().getAlternatives()); }
		(rule__Identifier__Alternatives)
		{ after(grammarAccess.getIdentifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnquotedIdentifier
entryRuleUnquotedIdentifier
:
{ before(grammarAccess.getUnquotedIdentifierRule()); }
	 ruleUnquotedIdentifier
{ after(grammarAccess.getUnquotedIdentifierRule()); } 
	 EOF 
;

// Rule UnquotedIdentifier
ruleUnquotedIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnquotedIdentifierAccess().getAlternatives()); }
		(rule__UnquotedIdentifier__Alternatives)
		{ after(grammarAccess.getUnquotedIdentifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAmpQuotedIdentifier
entryRuleAmpQuotedIdentifier
:
{ before(grammarAccess.getAmpQuotedIdentifierRule()); }
	 ruleAmpQuotedIdentifier
{ after(grammarAccess.getAmpQuotedIdentifierRule()); } 
	 EOF 
;

// Rule AmpQuotedIdentifier
ruleAmpQuotedIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAmpQuotedIdentifierAccess().getAMP_QUOTED_IDTerminalRuleCall()); }
		RULE_AMP_QUOTED_ID
		{ after(grammarAccess.getAmpQuotedIdentifierAccess().getAMP_QUOTED_IDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuotedIdentifier
entryRuleQuotedIdentifier
:
{ before(grammarAccess.getQuotedIdentifierRule()); }
	 ruleQuotedIdentifier
{ after(grammarAccess.getQuotedIdentifierRule()); } 
	 EOF 
;

// Rule QuotedIdentifier
ruleQuotedIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuotedIdentifierAccess().getQUOTED_IDTerminalRuleCall()); }
		RULE_QUOTED_ID
		{ after(grammarAccess.getQuotedIdentifierAccess().getQUOTED_IDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeyword
entryRuleKeyword
:
{ before(grammarAccess.getKeywordRule()); }
	 ruleKeyword
{ after(grammarAccess.getKeywordRule()); } 
	 EOF 
;

// Rule Keyword
ruleKeyword 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeywordAccess().getAlternatives()); }
		(rule__Keyword__Alternatives)
		{ after(grammarAccess.getKeywordAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQUOTE
entryRuleQUOTE
:
{ before(grammarAccess.getQUOTERule()); }
	 ruleQUOTE
{ after(grammarAccess.getQUOTERule()); } 
	 EOF 
;

// Rule QUOTE
ruleQUOTE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQUOTEAccess().getApostropheKeyword()); }
		Apostrophe
		{ after(grammarAccess.getQUOTEAccess().getApostropheKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleASTERISK
entryRuleASTERISK
:
{ before(grammarAccess.getASTERISKRule()); }
	 ruleASTERISK
{ after(grammarAccess.getASTERISKRule()); } 
	 EOF 
;

// Rule ASTERISK
ruleASTERISK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getASTERISKAccess().getAsteriskKeyword()); }
		Asterisk
		{ after(grammarAccess.getASTERISKAccess().getAsteriskKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOLON
entryRuleCOLON
:
{ before(grammarAccess.getCOLONRule()); }
	 ruleCOLON
{ after(grammarAccess.getCOLONRule()); } 
	 EOF 
;

// Rule COLON
ruleCOLON 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOLONAccess().getColonKeyword()); }
		Colon
		{ after(grammarAccess.getCOLONAccess().getColonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMMA
entryRuleCOMMA
:
{ before(grammarAccess.getCOMMARule()); }
	 ruleCOMMA
{ after(grammarAccess.getCOMMARule()); } 
	 EOF 
;

// Rule COMMA
ruleCOMMA 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMMAAccess().getCommaKeyword()); }
		Comma
		{ after(grammarAccess.getCOMMAAccess().getCommaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONCAT
entryRuleCONCAT
:
{ before(grammarAccess.getCONCATRule()); }
	 ruleCONCAT
{ after(grammarAccess.getCONCATRule()); } 
	 EOF 
;

// Rule CONCAT
ruleCONCAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONCATAccess().getVerticalLineVerticalLineKeyword()); }
		VerticalLineVerticalLine
		{ after(grammarAccess.getCONCATAccess().getVerticalLineVerticalLineKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOT
entryRuleDOT
:
{ before(grammarAccess.getDOTRule()); }
	 ruleDOT
{ after(grammarAccess.getDOTRule()); } 
	 EOF 
;

// Rule DOT
ruleDOT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOTAccess().getFullStopKeyword()); }
		FullStop
		{ after(grammarAccess.getDOTAccess().getFullStopKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEQ
entryRuleEQ
:
{ before(grammarAccess.getEQRule()); }
	 ruleEQ
{ after(grammarAccess.getEQRule()); } 
	 EOF 
;

// Rule EQ
ruleEQ 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEQAccess().getEqualsSignKeyword()); }
		EqualsSign
		{ after(grammarAccess.getEQAccess().getEqualsSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGE
entryRuleGE
:
{ before(grammarAccess.getGERule()); }
	 ruleGE
{ after(grammarAccess.getGERule()); } 
	 EOF 
;

// Rule GE
ruleGE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGEAccess().getGreaterThanSignEqualsSignKeyword()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getGEAccess().getGreaterThanSignEqualsSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGT
entryRuleGT
:
{ before(grammarAccess.getGTRule()); }
	 ruleGT
{ after(grammarAccess.getGTRule()); } 
	 EOF 
;

// Rule GT
ruleGT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGTAccess().getGreaterThanSignKeyword()); }
		GreaterThanSign
		{ after(grammarAccess.getGTAccess().getGreaterThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLBRACE
entryRuleLBRACE
:
{ before(grammarAccess.getLBRACERule()); }
	 ruleLBRACE
{ after(grammarAccess.getLBRACERule()); } 
	 EOF 
;

// Rule LBRACE
ruleLBRACE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLBRACEAccess().getLeftCurlyBracketKeyword()); }
		LeftCurlyBracket
		{ after(grammarAccess.getLBRACEAccess().getLeftCurlyBracketKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLE
entryRuleLE
:
{ before(grammarAccess.getLERule()); }
	 ruleLE
{ after(grammarAccess.getLERule()); } 
	 EOF 
;

// Rule LE
ruleLE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLEAccess().getLessThanSignEqualsSignKeyword()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getLEAccess().getLessThanSignEqualsSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLPAREN
entryRuleLPAREN
:
{ before(grammarAccess.getLPARENRule()); }
	 ruleLPAREN
{ after(grammarAccess.getLPARENRule()); } 
	 EOF 
;

// Rule LPAREN
ruleLPAREN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLPARENAccess().getLeftParenthesisKeyword()); }
		LeftParenthesis
		{ after(grammarAccess.getLPARENAccess().getLeftParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLT
entryRuleLT
:
{ before(grammarAccess.getLTRule()); }
	 ruleLT
{ after(grammarAccess.getLTRule()); } 
	 EOF 
;

// Rule LT
ruleLT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTAccess().getLessThanSignKeyword()); }
		LessThanSign
		{ after(grammarAccess.getLTAccess().getLessThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMINUS
entryRuleMINUS
:
{ before(grammarAccess.getMINUSRule()); }
	 ruleMINUS
{ after(grammarAccess.getMINUSRule()); } 
	 EOF 
;

// Rule MINUS
ruleMINUS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMINUSAccess().getHyphenMinusKeyword()); }
		HyphenMinus
		{ after(grammarAccess.getMINUSAccess().getHyphenMinusKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNE
entryRuleNE
:
{ before(grammarAccess.getNERule()); }
	 ruleNE
{ after(grammarAccess.getNERule()); } 
	 EOF 
;

// Rule NE
ruleNE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNEAccess().getLessThanSignGreaterThanSignKeyword()); }
		LessThanSignGreaterThanSign
		{ after(grammarAccess.getNEAccess().getLessThanSignGreaterThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePLUS
entryRulePLUS
:
{ before(grammarAccess.getPLUSRule()); }
	 rulePLUS
{ after(grammarAccess.getPLUSRule()); } 
	 EOF 
;

// Rule PLUS
rulePLUS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPLUSAccess().getPlusSignKeyword()); }
		PlusSign
		{ after(grammarAccess.getPLUSAccess().getPlusSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRBRACE
entryRuleRBRACE
:
{ before(grammarAccess.getRBRACERule()); }
	 ruleRBRACE
{ after(grammarAccess.getRBRACERule()); } 
	 EOF 
;

// Rule RBRACE
ruleRBRACE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRBRACEAccess().getRightCurlyBracketKeyword()); }
		RightCurlyBracket
		{ after(grammarAccess.getRBRACEAccess().getRightCurlyBracketKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRPAREN
entryRuleRPAREN
:
{ before(grammarAccess.getRPARENRule()); }
	 ruleRPAREN
{ after(grammarAccess.getRPARENRule()); } 
	 EOF 
;

// Rule RPAREN
ruleRPAREN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRPARENAccess().getRightParenthesisKeyword()); }
		RightParenthesis
		{ after(grammarAccess.getRPARENAccess().getRightParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSOLIDUS
entryRuleSOLIDUS
:
{ before(grammarAccess.getSOLIDUSRule()); }
	 ruleSOLIDUS
{ after(grammarAccess.getSOLIDUSRule()); } 
	 EOF 
;

// Rule SOLIDUS
ruleSOLIDUS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSOLIDUSAccess().getSolidusKeyword()); }
		Solidus
		{ after(grammarAccess.getSOLIDUSAccess().getSolidusKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleFormulaSpecification__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleFormulaSpecificationAccess().getMemberSpecificationParserRuleCall_0()); }
		ruleMemberSpecification
		{ after(grammarAccess.getSingleFormulaSpecificationAccess().getMemberSpecificationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingleFormulaSpecificationAccess().getSetSpecificationParserRuleCall_1()); }
		ruleSetSpecification
		{ after(grammarAccess.getSingleFormulaSpecificationAccess().getSetSpecificationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetSpecificationAccess().getGroup_3_0()); }
		(rule__SetSpecification__Group_3_0__0)
		{ after(grammarAccess.getSetSpecificationAccess().getGroup_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetSpecificationAccess().getExpressionParserRuleCall_3_1()); }
		ruleExpression
		{ after(grammarAccess.getSetSpecificationAccess().getExpressionParserRuleCall_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemberSpecificationAccess().getGroup_3_0_0()); }
		(rule__MemberSpecification__Group_3_0_0__0)
		{ after(grammarAccess.getMemberSpecificationAccess().getGroup_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMemberSpecificationAccess().getValueExpressionParserRuleCall_3_0_1()); }
		ruleValueExpression
		{ after(grammarAccess.getMemberSpecificationAccess().getValueExpressionParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellProperty__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellPropertyAccess().getMandatoryCellPropertyParserRuleCall_0()); }
		ruleMandatoryCellProperty
		{ after(grammarAccess.getCellPropertyAccess().getMandatoryCellPropertyParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCellPropertyAccess().getProviderSpecificCellPropertyParserRuleCall_1()); }
		ruleProviderSpecificCellProperty
		{ after(grammarAccess.getCellPropertyAccess().getProviderSpecificCellPropertyParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryCellProperty__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMandatoryCellPropertyAccess().getCELL_ORDINALKeyword_0()); }
		CELL_ORDINAL
		{ after(grammarAccess.getMandatoryCellPropertyAccess().getCELL_ORDINALKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMandatoryCellPropertyAccess().getVALUEKeyword_1()); }
		VALUE
		{ after(grammarAccess.getMandatoryCellPropertyAccess().getVALUEKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMandatoryCellPropertyAccess().getFORMATTED_VALUEKeyword_2()); }
		FORMATTED_VALUE
		{ after(grammarAccess.getMandatoryCellPropertyAccess().getFORMATTED_VALUEKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExpressionAccess().getValueXorExpressionParserRuleCall_1_0()); }
		ruleValueXorExpression
		{ after(grammarAccess.getValueExpressionAccess().getValueXorExpressionParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionAccess().getValueOrExpressionParserRuleCall_1_1()); }
		ruleValueOrExpression
		{ after(grammarAccess.getValueExpressionAccess().getValueOrExpressionParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term4__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerm4Access().getGroup_0()); }
		(rule__Term4__Group_0__0)
		{ after(grammarAccess.getTerm4Access().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerm4Access().getTerm3ParserRuleCall_1()); }
		ruleTerm3
		{ after(grammarAccess.getTerm4Access().getTerm3ParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerm2Access().getCONCATParserRuleCall_1_0_0()); }
		ruleCONCAT
		{ after(grammarAccess.getTerm2Access().getCONCATParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerm2Access().getPLUSParserRuleCall_1_0_1()); }
		rulePLUS
		{ after(grammarAccess.getTerm2Access().getPLUSParserRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerm2Access().getMINUSParserRuleCall_1_0_2()); }
		ruleMINUS
		{ after(grammarAccess.getTerm2Access().getMINUSParserRuleCall_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getSOLIDUSParserRuleCall_1_0_0()); }
		ruleSOLIDUS
		{ after(grammarAccess.getTermAccess().getSOLIDUSParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getASTERISKParserRuleCall_1_0_1()); }
		ruleASTERISK
		{ after(grammarAccess.getTermAccess().getASTERISKParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getGroup_0()); }
		(rule__Factor__Group_0__0)
		{ after(grammarAccess.getFactorAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getGroup_1()); }
		(rule__Factor__Group_1__0)
		{ after(grammarAccess.getFactorAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_2()); }
		ruleValueExpressionPrimary
		{ after(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExpressionPrimaryAccess().getUnquotedIdentifierParserRuleCall_1_1_0()); }
		ruleUnquotedIdentifier
		{ after(grammarAccess.getValueExpressionPrimaryAccess().getUnquotedIdentifierParserRuleCall_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimaryAccess().getQuotedIdentifierParserRuleCall_1_1_1()); }
		ruleQuotedIdentifier
		{ after(grammarAccess.getValueExpressionPrimaryAccess().getQuotedIdentifierParserRuleCall_1_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimaryAccess().getAmpQuotedIdentifierParserRuleCall_1_1_2()); }
		ruleAmpQuotedIdentifier
		{ after(grammarAccess.getValueExpressionPrimaryAccess().getAmpQuotedIdentifierParserRuleCall_1_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimaryAccess().getFunctionParserRuleCall_1_1_3()); }
		ruleFunction
		{ after(grammarAccess.getValueExpressionPrimaryAccess().getFunctionParserRuleCall_1_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExpressionPrimary0Access().getFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getValueExpressionPrimary0Access().getFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimary0Access().getGroup_1()); }
		(rule__ValueExpressionPrimary0__Group_1__0)
		{ after(grammarAccess.getValueExpressionPrimary0Access().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimary0Access().getGroup_2()); }
		(rule__ValueExpressionPrimary0__Group_2__0)
		{ after(grammarAccess.getValueExpressionPrimary0Access().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimary0Access().getCaseExpressionParserRuleCall_3()); }
		ruleCaseExpression
		{ after(grammarAccess.getValueExpressionPrimary0Access().getCaseExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimary0Access().getSTRINGTerminalRuleCall_4()); }
		RULE_STRING
		{ after(grammarAccess.getValueExpressionPrimary0Access().getSTRINGTerminalRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimary0Access().getINTTerminalRuleCall_5()); }
		RULE_INT
		{ after(grammarAccess.getValueExpressionPrimary0Access().getINTTerminalRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionPrimary0Access().getIdentifierParserRuleCall_6()); }
		ruleIdentifier
		{ after(grammarAccess.getValueExpressionPrimary0Access().getIdentifierParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompatingOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompatingOperatorAccess().getEQParserRuleCall_0()); }
		ruleEQ
		{ after(grammarAccess.getCompatingOperatorAccess().getEQParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompatingOperatorAccess().getNEParserRuleCall_1()); }
		ruleNE
		{ after(grammarAccess.getCompatingOperatorAccess().getNEParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompatingOperatorAccess().getLTParserRuleCall_2()); }
		ruleLT
		{ after(grammarAccess.getCompatingOperatorAccess().getLTParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompatingOperatorAccess().getGTParserRuleCall_3()); }
		ruleGT
		{ after(grammarAccess.getCompatingOperatorAccess().getGTParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompatingOperatorAccess().getLEParserRuleCall_4()); }
		ruleLE
		{ after(grammarAccess.getCompatingOperatorAccess().getLEParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCompatingOperatorAccess().getGEParserRuleCall_5()); }
		ruleGE
		{ after(grammarAccess.getCompatingOperatorAccess().getGEParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getUnquotedIdentifierParserRuleCall_0()); }
		ruleUnquotedIdentifier
		{ after(grammarAccess.getIdentifierAccess().getUnquotedIdentifierParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIdentifierAccess().getQuotedIdentifierParserRuleCall_1()); }
		ruleQuotedIdentifier
		{ after(grammarAccess.getIdentifierAccess().getQuotedIdentifierParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedIdentifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnquotedIdentifierAccess().getKeywordParserRuleCall_0()); }
		ruleKeyword
		{ after(grammarAccess.getUnquotedIdentifierAccess().getKeywordParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnquotedIdentifierAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getUnquotedIdentifierAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Keyword__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeywordAccess().getDIMENSIONKeyword_0()); }
		DIMENSION
		{ after(grammarAccess.getKeywordAccess().getDIMENSIONKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getKeywordAccess().getPROPERTIESKeyword_1()); }
		PROPERTIES
		{ after(grammarAccess.getKeywordAccess().getPROPERTIESKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__0__Impl
	rule__SelectStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSelectStatementAction_0()); }
	()
	{ after(grammarAccess.getSelectStatementAccess().getSelectStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__1__Impl
	rule__SelectStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getGroup_1()); }
	(rule__SelectStatement__Group_1__0)?
	{ after(grammarAccess.getSelectStatementAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__2__Impl
	rule__SelectStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSELECTKeyword_2()); }
	SELECT
	{ after(grammarAccess.getSelectStatementAccess().getSELECTKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__3__Impl
	rule__SelectStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getAxisSpecificationListParserRuleCall_3()); }
	(ruleAxisSpecificationList)?
	{ after(grammarAccess.getSelectStatementAccess().getAxisSpecificationListParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__4__Impl
	rule__SelectStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getFROMKeyword_4()); }
	FROM
	{ after(grammarAccess.getSelectStatementAccess().getFROMKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__5__Impl
	rule__SelectStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getCubeSpecificationParserRuleCall_5()); }
	ruleCubeSpecification
	{ after(grammarAccess.getSelectStatementAccess().getCubeSpecificationParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__6__Impl
	rule__SelectStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getGroup_6()); }
	(rule__SelectStatement__Group_6__0)?
	{ after(grammarAccess.getSelectStatementAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getCellPropetiesParserRuleCall_7()); }
	(ruleCellPropeties)?
	{ after(grammarAccess.getSelectStatementAccess().getCellPropetiesParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_1__0__Impl
	rule__SelectStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getWITHKeyword_1_0()); }
	WITH
	{ after(grammarAccess.getSelectStatementAccess().getWITHKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getFormulaSpecificationParserRuleCall_1_1()); }
	ruleFormulaSpecification
	{ after(grammarAccess.getSelectStatementAccess().getFormulaSpecificationParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_6__0__Impl
	rule__SelectStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getWHEREKeyword_6_0()); }
	WHERE
	{ after(grammarAccess.getSelectStatementAccess().getWHEREKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSlicerSpecificationParserRuleCall_6_1()); }
	ruleSlicerSpecification
	{ after(grammarAccess.getSelectStatementAccess().getSlicerSpecificationParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSpecification__Group__0__Impl
	rule__SetSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSpecificationAccess().getSETKeyword_0()); }
	SET
	{ after(grammarAccess.getSetSpecificationAccess().getSETKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSpecification__Group__1__Impl
	rule__SetSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSpecificationAccess().getSetNameParserRuleCall_1()); }
	ruleSetName
	{ after(grammarAccess.getSetSpecificationAccess().getSetNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSpecification__Group__2__Impl
	rule__SetSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSpecificationAccess().getASKeyword_2()); }
	AS
	{ after(grammarAccess.getSetSpecificationAccess().getASKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSpecification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSpecificationAccess().getAlternatives_3()); }
	(rule__SetSpecification__Alternatives_3)
	{ after(grammarAccess.getSetSpecificationAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetSpecification__Group_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSpecification__Group_3_0__0__Impl
	rule__SetSpecification__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSpecificationAccess().getQUOTEParserRuleCall_3_0_0()); }
	ruleQUOTE
	{ after(grammarAccess.getSetSpecificationAccess().getQUOTEParserRuleCall_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSpecification__Group_3_0__1__Impl
	rule__SetSpecification__Group_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSpecificationAccess().getExpressionParserRuleCall_3_0_1()); }
	ruleExpression
	{ after(grammarAccess.getSetSpecificationAccess().getExpressionParserRuleCall_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group_3_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetSpecification__Group_3_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetSpecification__Group_3_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetSpecificationAccess().getQUOTEParserRuleCall_3_0_2()); }
	ruleQUOTE
	{ after(grammarAccess.getSetSpecificationAccess().getQUOTEParserRuleCall_3_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group__0__Impl
	rule__MemberSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getMEMBERKeyword_0()); }
	MEMBER
	{ after(grammarAccess.getMemberSpecificationAccess().getMEMBERKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group__1__Impl
	rule__MemberSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getMemberNameParserRuleCall_1()); }
	ruleMemberName
	{ after(grammarAccess.getMemberSpecificationAccess().getMemberNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group__2__Impl
	rule__MemberSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getASKeyword_2()); }
	AS
	{ after(grammarAccess.getMemberSpecificationAccess().getASKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getGroup_3()); }
	(rule__MemberSpecification__Group_3__0)
	{ after(grammarAccess.getMemberSpecificationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberSpecification__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group_3__0__Impl
	rule__MemberSpecification__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getAlternatives_3_0()); }
	(rule__MemberSpecification__Alternatives_3_0)
	{ after(grammarAccess.getMemberSpecificationAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group_3__1__Impl
	rule__MemberSpecification__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getCOMMAParserRuleCall_3_1()); }
	ruleCOMMA
	{ after(grammarAccess.getMemberSpecificationAccess().getCOMMAParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getMemberPropertyDefListParserRuleCall_3_2()); }
	(ruleMemberPropertyDefList)?
	{ after(grammarAccess.getMemberSpecificationAccess().getMemberPropertyDefListParserRuleCall_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberSpecification__Group_3_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group_3_0_0__0__Impl
	rule__MemberSpecification__Group_3_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getQUOTEParserRuleCall_3_0_0_0()); }
	ruleQUOTE
	{ after(grammarAccess.getMemberSpecificationAccess().getQUOTEParserRuleCall_3_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group_3_0_0__1__Impl
	rule__MemberSpecification__Group_3_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getValueExpressionParserRuleCall_3_0_0_1()); }
	ruleValueExpression
	{ after(grammarAccess.getMemberSpecificationAccess().getValueExpressionParserRuleCall_3_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3_0_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberSpecification__Group_3_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_3_0_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberSpecificationAccess().getQUOTEParserRuleCall_3_0_0_2()); }
	ruleQUOTE
	{ after(grammarAccess.getMemberSpecificationAccess().getQUOTEParserRuleCall_3_0_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AxisSpecificationList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecificationList__Group__0__Impl
	rule__AxisSpecificationList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecificationList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationListAccess().getAxisSpecificationParserRuleCall_0()); }
	ruleAxisSpecification
	{ after(grammarAccess.getAxisSpecificationListAccess().getAxisSpecificationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecificationList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecificationList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecificationList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationListAccess().getGroup_1()); }
	(rule__AxisSpecificationList__Group_1__0)*
	{ after(grammarAccess.getAxisSpecificationListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AxisSpecificationList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecificationList__Group_1__0__Impl
	rule__AxisSpecificationList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecificationList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationListAccess().getCOMMAParserRuleCall_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getAxisSpecificationListAccess().getCOMMAParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecificationList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecificationList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecificationList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationListAccess().getAxisSpecificationParserRuleCall_1_1()); }
	ruleAxisSpecification
	{ after(grammarAccess.getAxisSpecificationListAccess().getAxisSpecificationParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberPropertyDefList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberPropertyDefList__Group__0__Impl
	rule__MemberPropertyDefList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberPropertyDefListAccess().getMemberPropertyDefinitionParserRuleCall_0()); }
	ruleMemberPropertyDefinition
	{ after(grammarAccess.getMemberPropertyDefListAccess().getMemberPropertyDefinitionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberPropertyDefList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberPropertyDefListAccess().getGroup_1()); }
	(rule__MemberPropertyDefList__Group_1__0)*
	{ after(grammarAccess.getMemberPropertyDefListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberPropertyDefList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberPropertyDefList__Group_1__0__Impl
	rule__MemberPropertyDefList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberPropertyDefListAccess().getCOMMAParserRuleCall_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getMemberPropertyDefListAccess().getCOMMAParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberPropertyDefList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberPropertyDefListAccess().getMemberPropertyDefinitionParserRuleCall_1_1()); }
	ruleMemberPropertyDefinition
	{ after(grammarAccess.getMemberPropertyDefListAccess().getMemberPropertyDefinitionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberPropertyDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberPropertyDefinition__Group__0__Impl
	rule__MemberPropertyDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberPropertyDefinitionAccess().getIdentifierParserRuleCall_0()); }
	ruleIdentifier
	{ after(grammarAccess.getMemberPropertyDefinitionAccess().getIdentifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberPropertyDefinition__Group__1__Impl
	rule__MemberPropertyDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberPropertyDefinitionAccess().getEQParserRuleCall_1()); }
	ruleEQ
	{ after(grammarAccess.getMemberPropertyDefinitionAccess().getEQParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberPropertyDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberPropertyDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberPropertyDefinitionAccess().getValueExpressionParserRuleCall_2()); }
	ruleValueExpression
	{ after(grammarAccess.getMemberPropertyDefinitionAccess().getValueExpressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundId__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundId__Group__0__Impl
	rule__CompoundId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundId__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundIdAccess().getIdentifierParserRuleCall_0()); }
	ruleIdentifier
	{ after(grammarAccess.getCompoundIdAccess().getIdentifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundId__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundId__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundIdAccess().getGroup_1()); }
	(rule__CompoundId__Group_1__0)*
	{ after(grammarAccess.getCompoundIdAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundId__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundId__Group_1__0__Impl
	rule__CompoundId__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundId__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundIdAccess().getDOTParserRuleCall_1_0()); }
	ruleDOT
	{ after(grammarAccess.getCompoundIdAccess().getDOTParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundId__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundId__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundId__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundIdAccess().getIdentifierParserRuleCall_1_1()); }
	ruleIdentifier
	{ after(grammarAccess.getCompoundIdAccess().getIdentifierParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AxisSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecification__Group__0__Impl
	rule__AxisSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationAccess().getGroup_0()); }
	(rule__AxisSpecification__Group_0__0)?
	{ after(grammarAccess.getAxisSpecificationAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecification__Group__1__Impl
	rule__AxisSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
	{ after(grammarAccess.getAxisSpecificationAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecification__Group__2__Impl
	rule__AxisSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationAccess().getDimPropertiesParserRuleCall_2()); }
	(ruleDimProperties)?
	{ after(grammarAccess.getAxisSpecificationAccess().getDimPropertiesParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecification__Group__3__Impl
	rule__AxisSpecification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationAccess().getONKeyword_3()); }
	ON
	{ after(grammarAccess.getAxisSpecificationAccess().getONKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecification__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationAccess().getAxisNameParserRuleCall_4()); }
	ruleAxisName
	{ after(grammarAccess.getAxisSpecificationAccess().getAxisNameParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AxisSpecification__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecification__Group_0__0__Impl
	rule__AxisSpecification__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationAccess().getNONKeyword_0_0()); }
	NON
	{ after(grammarAccess.getAxisSpecificationAccess().getNONKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AxisSpecification__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisSpecification__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisSpecificationAccess().getEMPTYKeyword_0_1()); }
	EMPTY
	{ after(grammarAccess.getAxisSpecificationAccess().getEMPTYKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DimProperties__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DimProperties__Group__0__Impl
	rule__DimProperties__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DimProperties__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimPropertiesAccess().getDIMENSIONKeyword_0()); }
	(DIMENSION)?
	{ after(grammarAccess.getDimPropertiesAccess().getDIMENSIONKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DimProperties__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DimProperties__Group__1__Impl
	rule__DimProperties__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DimProperties__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimPropertiesAccess().getPROPERTIESKeyword_1()); }
	PROPERTIES
	{ after(grammarAccess.getDimPropertiesAccess().getPROPERTIESKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DimProperties__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DimProperties__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DimProperties__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimPropertiesAccess().getPropertyListParserRuleCall_2()); }
	rulePropertyList
	{ after(grammarAccess.getDimPropertiesAccess().getPropertyListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyList__Group__0__Impl
	rule__PropertyList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyListAccess().getPropertyParserRuleCall_0()); }
	ruleProperty
	{ after(grammarAccess.getPropertyListAccess().getPropertyParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyListAccess().getGroup_1()); }
	(rule__PropertyList__Group_1__0)*
	{ after(grammarAccess.getPropertyListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyList__Group_1__0__Impl
	rule__PropertyList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyListAccess().getCOMMAParserRuleCall_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getPropertyListAccess().getCOMMAParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyListAccess().getPropertyParserRuleCall_1_1()); }
	ruleProperty
	{ after(grammarAccess.getPropertyListAccess().getPropertyParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CellPropeties__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPropeties__Group__0__Impl
	rule__CellPropeties__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropeties__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPropetiesAccess().getCELLKeyword_0()); }
	(CELL)?
	{ after(grammarAccess.getCellPropetiesAccess().getCELLKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropeties__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPropeties__Group__1__Impl
	rule__CellPropeties__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropeties__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPropetiesAccess().getPROPERTIESKeyword_1()); }
	PROPERTIES
	{ after(grammarAccess.getCellPropetiesAccess().getPROPERTIESKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropeties__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPropeties__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropeties__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPropetiesAccess().getCellPropertyListParserRuleCall_2()); }
	ruleCellPropertyList
	{ after(grammarAccess.getCellPropetiesAccess().getCellPropertyListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CellPropertyList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPropertyList__Group__0__Impl
	rule__CellPropertyList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropertyList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPropertyListAccess().getCellPropertyParserRuleCall_0()); }
	ruleCellProperty
	{ after(grammarAccess.getCellPropertyListAccess().getCellPropertyParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropertyList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPropertyList__Group__1__Impl
	rule__CellPropertyList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropertyList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPropertyListAccess().getCOMMAParserRuleCall_1()); }
	ruleCOMMA
	{ after(grammarAccess.getCellPropertyListAccess().getCOMMAParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropertyList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPropertyList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPropertyList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPropertyListAccess().getCellPropertyParserRuleCall_2()); }
	(ruleCellProperty)*
	{ after(grammarAccess.getCellPropertyListAccess().getCellPropertyParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_0()); }
	ruleValueExpression
	{ after(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)*
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getCOLONParserRuleCall_1_0()); }
	ruleCOLON
	{ after(grammarAccess.getExpressionAccess().getCOLONParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_1_1()); }
	ruleValueExpression
	{ after(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpression__Group__0__Impl
	rule__ValueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionAccess().getTerm5ParserRuleCall_0()); }
	ruleTerm5
	{ after(grammarAccess.getValueExpressionAccess().getTerm5ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionAccess().getAlternatives_1()); }
	(rule__ValueExpression__Alternatives_1)*
	{ after(grammarAccess.getValueExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueXorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueXorExpression__Group__0__Impl
	rule__ValueXorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueXorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueXorExpressionAccess().getXORKeyword_0()); }
	XOR
	{ after(grammarAccess.getValueXorExpressionAccess().getXORKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueXorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueXorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueXorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueXorExpressionAccess().getTerm5ParserRuleCall_1()); }
	ruleTerm5
	{ after(grammarAccess.getValueXorExpressionAccess().getTerm5ParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueOrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueOrExpression__Group__0__Impl
	rule__ValueOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueOrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueOrExpressionAccess().getORKeyword_0()); }
	OR
	{ after(grammarAccess.getValueOrExpressionAccess().getORKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueOrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueOrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueOrExpressionAccess().getTerm5ParserRuleCall_1()); }
	ruleTerm5
	{ after(grammarAccess.getValueOrExpressionAccess().getTerm5ParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term5__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term5__Group__0__Impl
	rule__Term5__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_0()); }
	ruleTerm4
	{ after(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term5__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm5Access().getGroup_1()); }
	(rule__Term5__Group_1__0)*
	{ after(grammarAccess.getTerm5Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term5__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term5__Group_1__0__Impl
	rule__Term5__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm5Access().getANDKeyword_1_0()); }
	AND
	{ after(grammarAccess.getTerm5Access().getANDKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term5__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_1_1()); }
	ruleTerm4
	{ after(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term4__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term4__Group_0__0__Impl
	rule__Term4__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term4__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm4Access().getNOTKeyword_0_0()); }
	NOT
	{ after(grammarAccess.getTerm4Access().getNOTKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term4__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term4__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term4__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm4Access().getTerm4ParserRuleCall_0_1()); }
	ruleTerm4
	{ after(grammarAccess.getTerm4Access().getTerm4ParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term3__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term3__Group__0__Impl
	rule__Term3__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_0()); }
	ruleTerm2
	{ after(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term3__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm3Access().getGroup_1()); }
	(rule__Term3__Group_1__0)*
	{ after(grammarAccess.getTerm3Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term3__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term3__Group_1__0__Impl
	rule__Term3__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm3Access().getCompatingOperatorParserRuleCall_1_0()); }
	ruleCompatingOperator
	{ after(grammarAccess.getTerm3Access().getCompatingOperatorParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term3__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_1_1()); }
	ruleTerm2
	{ after(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term2__Group__0__Impl
	rule__Term2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm2Access().getTermParserRuleCall_0()); }
	ruleTerm
	{ after(grammarAccess.getTerm2Access().getTermParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm2Access().getGroup_1()); }
	(rule__Term2__Group_1__0)*
	{ after(grammarAccess.getTerm2Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term2__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term2__Group_1__0__Impl
	rule__Term2__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm2Access().getAlternatives_1_0()); }
	(rule__Term2__Alternatives_1_0)
	{ after(grammarAccess.getTerm2Access().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term2__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm2Access().getTermParserRuleCall_1_1()); }
	ruleTerm
	{ after(grammarAccess.getTerm2Access().getTermParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
	ruleFactor
	{ after(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getGroup_1()); }
	(rule__Term__Group_1__0)*
	{ after(grammarAccess.getTermAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getAlternatives_1_0()); }
	(rule__Term__Alternatives_1_0)
	{ after(grammarAccess.getTermAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); }
	ruleFactor
	{ after(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__0__Impl
	rule__Factor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getMINUSParserRuleCall_0_0()); }
	ruleMINUS
	{ after(grammarAccess.getFactorAccess().getMINUSParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_0_1()); }
	ruleValueExpressionPrimary
	{ after(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getPLUSParserRuleCall_1_0()); }
	rulePLUS
	{ after(grammarAccess.getFactorAccess().getPLUSParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_1_1()); }
	ruleValueExpressionPrimary
	{ after(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getIdentifierParserRuleCall_0()); }
	ruleIdentifier
	{ after(grammarAccess.getFunctionAccess().getIdentifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLPARENParserRuleCall_1()); }
	ruleLPAREN
	{ after(grammarAccess.getFunctionAccess().getLPARENParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getExpressionListParserRuleCall_2()); }
	(ruleExpressionList)?
	{ after(grammarAccess.getFunctionAccess().getExpressionListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRPARENParserRuleCall_3()); }
	ruleRPAREN
	{ after(grammarAccess.getFunctionAccess().getRPARENParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpressionPrimary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary__Group__0__Impl
	rule__ValueExpressionPrimary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimaryAccess().getValueExpressionPrimary0ParserRuleCall_0()); }
	ruleValueExpressionPrimary0
	{ after(grammarAccess.getValueExpressionPrimaryAccess().getValueExpressionPrimary0ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimaryAccess().getGroup_1()); }
	(rule__ValueExpressionPrimary__Group_1__0)*
	{ after(grammarAccess.getValueExpressionPrimaryAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpressionPrimary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary__Group_1__0__Impl
	rule__ValueExpressionPrimary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimaryAccess().getDOTParserRuleCall_1_0()); }
	ruleDOT
	{ after(grammarAccess.getValueExpressionPrimaryAccess().getDOTParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimaryAccess().getAlternatives_1_1()); }
	(rule__ValueExpressionPrimary__Alternatives_1_1)
	{ after(grammarAccess.getValueExpressionPrimaryAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpressionPrimary0__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary0__Group_1__0__Impl
	rule__ValueExpressionPrimary0__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimary0Access().getLPARENParserRuleCall_1_0()); }
	ruleLPAREN
	{ after(grammarAccess.getValueExpressionPrimary0Access().getLPARENParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary0__Group_1__1__Impl
	rule__ValueExpressionPrimary0__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimary0Access().getExpressionListParserRuleCall_1_1()); }
	ruleExpressionList
	{ after(grammarAccess.getValueExpressionPrimary0Access().getExpressionListParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary0__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimary0Access().getRPARENParserRuleCall_1_2()); }
	ruleRPAREN
	{ after(grammarAccess.getValueExpressionPrimary0Access().getRPARENParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpressionPrimary0__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary0__Group_2__0__Impl
	rule__ValueExpressionPrimary0__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimary0Access().getLBRACEParserRuleCall_2_0()); }
	ruleLBRACE
	{ after(grammarAccess.getValueExpressionPrimary0Access().getLBRACEParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary0__Group_2__1__Impl
	rule__ValueExpressionPrimary0__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimary0Access().getExpressionListParserRuleCall_2_1()); }
	(ruleExpressionList)?
	{ after(grammarAccess.getValueExpressionPrimary0Access().getExpressionListParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpressionPrimary0__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpressionPrimary0__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionPrimary0Access().getRBRACEParserRuleCall_2_2()); }
	ruleRBRACE
	{ after(grammarAccess.getValueExpressionPrimary0Access().getRBRACEParserRuleCall_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
	{ after(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
	(rule__ExpressionList__Group_1__0)*
	{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getCOMMAParserRuleCall_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getExpressionListAccess().getCOMMAParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1()); }
	ruleExpression
	{ after(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group__0__Impl
	rule__CaseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0()); }
	CASE
	{ after(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group__1__Impl
	rule__CaseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getValueExpressionParserRuleCall_1()); }
	(ruleValueExpression)?
	{ after(grammarAccess.getCaseExpressionAccess().getValueExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group__2__Impl
	rule__CaseExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getWhenListParserRuleCall_2()); }
	(ruleWhenList)?
	{ after(grammarAccess.getCaseExpressionAccess().getWhenListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group__3__Impl
	rule__CaseExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getGroup_3()); }
	(rule__CaseExpression__Group_3__0)?
	{ after(grammarAccess.getCaseExpressionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getENDKeyword_4()); }
	END
	{ after(grammarAccess.getCaseExpressionAccess().getENDKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_3__0__Impl
	rule__CaseExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getELSEKeyword_3_0()); }
	ELSE
	{ after(grammarAccess.getCaseExpressionAccess().getELSEKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseExpressionAccess().getValueExpressionParserRuleCall_3_1()); }
	ruleValueExpression
	{ after(grammarAccess.getCaseExpressionAccess().getValueExpressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhenList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhenList__Group__0__Impl
	rule__WhenList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenListAccess().getWhenClauseParserRuleCall_0()); }
	ruleWhenClause
	{ after(grammarAccess.getWhenListAccess().getWhenClauseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhenList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenListAccess().getWhenClauseParserRuleCall_1()); }
	(ruleWhenClause)*
	{ after(grammarAccess.getWhenListAccess().getWhenClauseParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhenClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhenClause__Group__0__Impl
	rule__WhenClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenClauseAccess().getWHENKeyword_0()); }
	WHEN
	{ after(grammarAccess.getWhenClauseAccess().getWHENKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhenClause__Group__1__Impl
	rule__WhenClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenClauseAccess().getValueExpressionParserRuleCall_1()); }
	ruleValueExpression
	{ after(grammarAccess.getWhenClauseAccess().getValueExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhenClause__Group__2__Impl
	rule__WhenClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenClauseAccess().getTHENKeyword_2()); }
	THEN
	{ after(grammarAccess.getWhenClauseAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhenClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenClauseAccess().getValueExpressionParserRuleCall_3()); }
	ruleValueExpression
	{ after(grammarAccess.getWhenClauseAccess().getValueExpressionParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MdxStatement__StatementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMdxStatementAccess().getStatementSelectStatementParserRuleCall_0()); }
		ruleSelectStatement
		{ after(grammarAccess.getMdxStatementAccess().getStatementSelectStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
