/*
 * generated by Xtext 2.28.0
 */
parser grammar InternalMdxParser;

options {
	tokenVocab=InternalMdxLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.eclipse.daanse.mdx.xtext.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.daanse.mdx.xtext.services.MdxGrammarAccess;

}
@members {
	private MdxGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Apostrophe", "'\''");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("AS", "'AS'");
		tokenNameToValue.put("ON", "'ON'");
		tokenNameToValue.put("OR", "'OR'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("AND", "'AND'");
		tokenNameToValue.put("END", "'END'");
		tokenNameToValue.put("NON", "'NON'");
		tokenNameToValue.put("NOT", "'NOT'");
		tokenNameToValue.put("SET", "'SET'");
		tokenNameToValue.put("XOR", "'XOR'");
		tokenNameToValue.put("CASE", "'CASE'");
		tokenNameToValue.put("CELL", "'CELL'");
		tokenNameToValue.put("ELSE", "'ELSE'");
		tokenNameToValue.put("FROM", "'FROM'");
		tokenNameToValue.put("THEN", "'THEN'");
		tokenNameToValue.put("WHEN", "'WHEN'");
		tokenNameToValue.put("WITH", "'WITH'");
		tokenNameToValue.put("EMPTY", "'EMPTY'");
		tokenNameToValue.put("VALUE", "'VALUE'");
		tokenNameToValue.put("WHERE", "'WHERE'");
		tokenNameToValue.put("MEMBER", "'MEMBER'");
		tokenNameToValue.put("SELECT", "'SELECT'");
		tokenNameToValue.put("DIMENSION", "'DIMENSION'");
		tokenNameToValue.put("PROPERTIES", "'PROPERTIES'");
		tokenNameToValue.put("CELL_ORDINAL", "'CELL_ORDINAL'");
		tokenNameToValue.put("FORMATTED_VALUE", "'FORMATTED_VALUE'");
	}

	public void setGrammarAccess(MdxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleMdxStatement
entryRuleMdxStatement
:
{ before(grammarAccess.getMdxStatementRule()); }
	 ruleMdxStatement
{ after(grammarAccess.getMdxStatementRule()); } 
	 EOF 
;

// Rule MdxStatement
ruleMdxStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMdxStatementAccess().getSelectStatementParserRuleCall()); }
		ruleSelectStatement
		{ after(grammarAccess.getMdxStatementAccess().getSelectStatementParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement
:
{ before(grammarAccess.getSelectStatementRule()); }
	 ruleSelectStatement
{ after(grammarAccess.getSelectStatementRule()); } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectStatementAccess().getGroup()); }
		(rule__SelectStatement__Group__0)
		{ after(grammarAccess.getSelectStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormulaSpecification
entryRuleFormulaSpecification
:
{ before(grammarAccess.getFormulaSpecificationRule()); }
	 ruleFormulaSpecification
{ after(grammarAccess.getFormulaSpecificationRule()); } 
	 EOF 
;

// Rule FormulaSpecification
ruleFormulaSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getFormulaSpecificationAccess().getSingle_formula_specificationParserRuleCall()); }
			(rulesingle_formula_specification)
			{ after(grammarAccess.getFormulaSpecificationAccess().getSingle_formula_specificationParserRuleCall()); }
		)
		(
			{ before(grammarAccess.getFormulaSpecificationAccess().getSingle_formula_specificationParserRuleCall()); }
			(rulesingle_formula_specification)*
			{ after(grammarAccess.getFormulaSpecificationAccess().getSingle_formula_specificationParserRuleCall()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesingle_formula_specification
entryRulesingle_formula_specification
:
{ before(grammarAccess.getSingle_formula_specificationRule()); }
	 rulesingle_formula_specification
{ after(grammarAccess.getSingle_formula_specificationRule()); } 
	 EOF 
;

// Rule single_formula_specification
rulesingle_formula_specification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingle_formula_specificationAccess().getAlternatives()); }
		(rule__Single_formula_specification__Alternatives)
		{ after(grammarAccess.getSingle_formula_specificationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleset_specification
entryRuleset_specification
:
{ before(grammarAccess.getSet_specificationRule()); }
	 ruleset_specification
{ after(grammarAccess.getSet_specificationRule()); } 
	 EOF 
;

// Rule set_specification
ruleset_specification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSet_specificationAccess().getGroup()); }
		(rule__Set_specification__Group__0)
		{ after(grammarAccess.getSet_specificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemember_specification
entryRulemember_specification
:
{ before(grammarAccess.getMember_specificationRule()); }
	 rulemember_specification
{ after(grammarAccess.getMember_specificationRule()); } 
	 EOF 
;

// Rule member_specification
rulemember_specification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMember_specificationAccess().getGroup()); }
		(rule__Member_specification__Group__0)
		{ after(grammarAccess.getMember_specificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleaxis_specification_list
entryRuleaxis_specification_list
:
{ before(grammarAccess.getAxis_specification_listRule()); }
	 ruleaxis_specification_list
{ after(grammarAccess.getAxis_specification_listRule()); } 
	 EOF 
;

// Rule axis_specification_list
ruleaxis_specification_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAxis_specification_listAccess().getGroup()); }
		(rule__Axis_specification_list__Group__0)
		{ after(grammarAccess.getAxis_specification_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemember_property_def_list
entryRulemember_property_def_list
:
{ before(grammarAccess.getMember_property_def_listRule()); }
	 rulemember_property_def_list
{ after(grammarAccess.getMember_property_def_listRule()); } 
	 EOF 
;

// Rule member_property_def_list
rulemember_property_def_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMember_property_def_listAccess().getGroup()); }
		(rule__Member_property_def_list__Group__0)
		{ after(grammarAccess.getMember_property_def_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemember_name
entryRulemember_name
:
{ before(grammarAccess.getMember_nameRule()); }
	 rulemember_name
{ after(grammarAccess.getMember_nameRule()); } 
	 EOF 
;

// Rule member_name
rulemember_name 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMember_nameAccess().getCompound_idParserRuleCall()); }
		rulecompound_id
		{ after(grammarAccess.getMember_nameAccess().getCompound_idParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemember_property_definition
entryRulemember_property_definition
:
{ before(grammarAccess.getMember_property_definitionRule()); }
	 rulemember_property_definition
{ after(grammarAccess.getMember_property_definitionRule()); } 
	 EOF 
;

// Rule member_property_definition
rulemember_property_definition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMember_property_definitionAccess().getGroup()); }
		(rule__Member_property_definition__Group__0)
		{ after(grammarAccess.getMember_property_definitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleset_name
entryRuleset_name
:
{ before(grammarAccess.getSet_nameRule()); }
	 ruleset_name
{ after(grammarAccess.getSet_nameRule()); } 
	 EOF 
;

// Rule set_name
ruleset_name 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSet_nameAccess().getCompound_idParserRuleCall()); }
		rulecompound_id
		{ after(grammarAccess.getSet_nameAccess().getCompound_idParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecompound_id
entryRulecompound_id
:
{ before(grammarAccess.getCompound_idRule()); }
	 rulecompound_id
{ after(grammarAccess.getCompound_idRule()); } 
	 EOF 
;

// Rule compound_id
rulecompound_id 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompound_idAccess().getGroup()); }
		(rule__Compound_id__Group__0)
		{ after(grammarAccess.getCompound_idAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleaxis_specification
entryRuleaxis_specification
:
{ before(grammarAccess.getAxis_specificationRule()); }
	 ruleaxis_specification
{ after(grammarAccess.getAxis_specificationRule()); } 
	 EOF 
;

// Rule axis_specification
ruleaxis_specification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAxis_specificationAccess().getGroup()); }
		(rule__Axis_specification__Group__0)
		{ after(grammarAccess.getAxis_specificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleaxis_name
entryRuleaxis_name
:
{ before(grammarAccess.getAxis_nameRule()); }
	 ruleaxis_name
{ after(grammarAccess.getAxis_nameRule()); } 
	 EOF 
;

// Rule axis_name
ruleaxis_name 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAxis_nameAccess().getIdentifierParserRuleCall()); }
		ruleidentifier
		{ after(grammarAccess.getAxis_nameAccess().getIdentifierParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuledim_props
entryRuledim_props
:
{ before(grammarAccess.getDim_propsRule()); }
	 ruledim_props
{ after(grammarAccess.getDim_propsRule()); } 
	 EOF 
;

// Rule dim_props
ruledim_props 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDim_propsAccess().getGroup()); }
		(rule__Dim_props__Group__0)
		{ after(grammarAccess.getDim_propsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleproperty_list
entryRuleproperty_list
:
{ before(grammarAccess.getProperty_listRule()); }
	 ruleproperty_list
{ after(grammarAccess.getProperty_listRule()); } 
	 EOF 
;

// Rule property_list
ruleproperty_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProperty_listAccess().getGroup()); }
		(rule__Property_list__Group__0)
		{ after(grammarAccess.getProperty_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleproperty
entryRuleproperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleproperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule property
ruleproperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getCompound_idParserRuleCall()); }
		rulecompound_id
		{ after(grammarAccess.getPropertyAccess().getCompound_idParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecube_specification
entryRulecube_specification
:
{ before(grammarAccess.getCube_specificationRule()); }
	 rulecube_specification
{ after(grammarAccess.getCube_specificationRule()); } 
	 EOF 
;

// Rule cube_specification
rulecube_specification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCube_specificationAccess().getCube_nameParserRuleCall()); }
		rulecube_name
		{ after(grammarAccess.getCube_specificationAccess().getCube_nameParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecube_name
entryRulecube_name
:
{ before(grammarAccess.getCube_nameRule()); }
	 rulecube_name
{ after(grammarAccess.getCube_nameRule()); } 
	 EOF 
;

// Rule cube_name
rulecube_name 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCube_nameAccess().getCompound_idParserRuleCall()); }
		rulecompound_id
		{ after(grammarAccess.getCube_nameAccess().getCompound_idParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleslicer_specification
entryRuleslicer_specification
:
{ before(grammarAccess.getSlicer_specificationRule()); }
	 ruleslicer_specification
{ after(grammarAccess.getSlicer_specificationRule()); } 
	 EOF 
;

// Rule slicer_specification
ruleslicer_specification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSlicer_specificationAccess().getExpressionParserRuleCall()); }
		ruleexpression
		{ after(grammarAccess.getSlicer_specificationAccess().getExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecell_props
entryRulecell_props
:
{ before(grammarAccess.getCell_propsRule()); }
	 rulecell_props
{ after(grammarAccess.getCell_propsRule()); } 
	 EOF 
;

// Rule cell_props
rulecell_props 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCell_propsAccess().getGroup()); }
		(rule__Cell_props__Group__0)
		{ after(grammarAccess.getCell_propsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecell_property_list
entryRulecell_property_list
:
{ before(grammarAccess.getCell_property_listRule()); }
	 rulecell_property_list
{ after(grammarAccess.getCell_property_listRule()); } 
	 EOF 
;

// Rule cell_property_list
rulecell_property_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCell_property_listAccess().getGroup()); }
		(rule__Cell_property_list__Group__0)
		{ after(grammarAccess.getCell_property_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecell_property
entryRulecell_property
:
{ before(grammarAccess.getCell_propertyRule()); }
	 rulecell_property
{ after(grammarAccess.getCell_propertyRule()); } 
	 EOF 
;

// Rule cell_property
rulecell_property 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCell_propertyAccess().getAlternatives()); }
		(rule__Cell_property__Alternatives)
		{ after(grammarAccess.getCell_propertyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemandatory_cell_property
entryRulemandatory_cell_property
:
{ before(grammarAccess.getMandatory_cell_propertyRule()); }
	 rulemandatory_cell_property
{ after(grammarAccess.getMandatory_cell_propertyRule()); } 
	 EOF 
;

// Rule mandatory_cell_property
rulemandatory_cell_property 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMandatory_cell_propertyAccess().getAlternatives()); }
		(rule__Mandatory_cell_property__Alternatives)
		{ after(grammarAccess.getMandatory_cell_propertyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprovider_specific_cell_property
entryRuleprovider_specific_cell_property
:
{ before(grammarAccess.getProvider_specific_cell_propertyRule()); }
	 ruleprovider_specific_cell_property
{ after(grammarAccess.getProvider_specific_cell_propertyRule()); } 
	 EOF 
;

// Rule provider_specific_cell_property
ruleprovider_specific_cell_property 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProvider_specific_cell_propertyAccess().getIdentifierParserRuleCall()); }
		ruleidentifier
		{ after(grammarAccess.getProvider_specific_cell_propertyAccess().getIdentifierParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpression
entryRuleexpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevalue_expression
entryRulevalue_expression
:
{ before(grammarAccess.getValue_expressionRule()); }
	 rulevalue_expression
{ after(grammarAccess.getValue_expressionRule()); } 
	 EOF 
;

// Rule value_expression
rulevalue_expression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValue_expressionAccess().getGroup()); }
		(rule__Value_expression__Group__0)
		{ after(grammarAccess.getValue_expressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevalue_xor_expression
entryRulevalue_xor_expression
:
{ before(grammarAccess.getValue_xor_expressionRule()); }
	 rulevalue_xor_expression
{ after(grammarAccess.getValue_xor_expressionRule()); } 
	 EOF 
;

// Rule value_xor_expression
rulevalue_xor_expression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValue_xor_expressionAccess().getGroup()); }
		(rule__Value_xor_expression__Group__0)
		{ after(grammarAccess.getValue_xor_expressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevalue_or_expression
entryRulevalue_or_expression
:
{ before(grammarAccess.getValue_or_expressionRule()); }
	 rulevalue_or_expression
{ after(grammarAccess.getValue_or_expressionRule()); } 
	 EOF 
;

// Rule value_or_expression
rulevalue_or_expression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValue_or_expressionAccess().getGroup()); }
		(rule__Value_or_expression__Group__0)
		{ after(grammarAccess.getValue_or_expressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterm5
entryRuleterm5
:
{ before(grammarAccess.getTerm5Rule()); }
	 ruleterm5
{ after(grammarAccess.getTerm5Rule()); } 
	 EOF 
;

// Rule term5
ruleterm5 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerm5Access().getGroup()); }
		(rule__Term5__Group__0)
		{ after(grammarAccess.getTerm5Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterm4
entryRuleterm4
:
{ before(grammarAccess.getTerm4Rule()); }
	 ruleterm4
{ after(grammarAccess.getTerm4Rule()); } 
	 EOF 
;

// Rule term4
ruleterm4 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerm4Access().getAlternatives()); }
		(rule__Term4__Alternatives)
		{ after(grammarAccess.getTerm4Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterm3
entryRuleterm3
:
{ before(grammarAccess.getTerm3Rule()); }
	 ruleterm3
{ after(grammarAccess.getTerm3Rule()); } 
	 EOF 
;

// Rule term3
ruleterm3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerm3Access().getGroup()); }
		(rule__Term3__Group__0)
		{ after(grammarAccess.getTerm3Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterm2
entryRuleterm2
:
{ before(grammarAccess.getTerm2Rule()); }
	 ruleterm2
{ after(grammarAccess.getTerm2Rule()); } 
	 EOF 
;

// Rule term2
ruleterm2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerm2Access().getGroup()); }
		(rule__Term2__Group__0)
		{ after(grammarAccess.getTerm2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterm
entryRuleterm
:
{ before(grammarAccess.getTermRule()); }
	 ruleterm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule term
ruleterm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getGroup()); }
		(rule__Term__Group__0)
		{ after(grammarAccess.getTermAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefactor
entryRulefactor
:
{ before(grammarAccess.getFactorRule()); }
	 rulefactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule factor
rulefactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getAlternatives()); }
		(rule__Factor__Alternatives)
		{ after(grammarAccess.getFactorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefunction
entryRulefunction
:
{ before(grammarAccess.getFunctionRule()); }
	 rulefunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule function
rulefunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevalue_expression_primary
entryRulevalue_expression_primary
:
{ before(grammarAccess.getValue_expression_primaryRule()); }
	 rulevalue_expression_primary
{ after(grammarAccess.getValue_expression_primaryRule()); } 
	 EOF 
;

// Rule value_expression_primary
rulevalue_expression_primary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValue_expression_primaryAccess().getGroup()); }
		(rule__Value_expression_primary__Group__0)
		{ after(grammarAccess.getValue_expression_primaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevalue_expression_primary0
entryRulevalue_expression_primary0
:
{ before(grammarAccess.getValue_expression_primary0Rule()); }
	 rulevalue_expression_primary0
{ after(grammarAccess.getValue_expression_primary0Rule()); } 
	 EOF 
;

// Rule value_expression_primary0
rulevalue_expression_primary0 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValue_expression_primary0Access().getAlternatives()); }
		(rule__Value_expression_primary0__Alternatives)
		{ after(grammarAccess.getValue_expression_primary0Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexp_list
entryRuleexp_list
:
{ before(grammarAccess.getExp_listRule()); }
	 ruleexp_list
{ after(grammarAccess.getExp_listRule()); } 
	 EOF 
;

// Rule exp_list
ruleexp_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExp_listAccess().getGroup()); }
		(rule__Exp_list__Group__0)
		{ after(grammarAccess.getExp_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecase_expression
entryRulecase_expression
:
{ before(grammarAccess.getCase_expressionRule()); }
	 rulecase_expression
{ after(grammarAccess.getCase_expressionRule()); } 
	 EOF 
;

// Rule case_expression
rulecase_expression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCase_expressionAccess().getGroup()); }
		(rule__Case_expression__Group__0)
		{ after(grammarAccess.getCase_expressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulewhen_list
entryRulewhen_list
:
{ before(grammarAccess.getWhen_listRule()); }
	 rulewhen_list
{ after(grammarAccess.getWhen_listRule()); } 
	 EOF 
;

// Rule when_list
rulewhen_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhen_listAccess().getGroup()); }
		(rule__When_list__Group__0)
		{ after(grammarAccess.getWhen_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulewhen_clause
entryRulewhen_clause
:
{ before(grammarAccess.getWhen_clauseRule()); }
	 rulewhen_clause
{ after(grammarAccess.getWhen_clauseRule()); } 
	 EOF 
;

// Rule when_clause
rulewhen_clause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhen_clauseAccess().getGroup()); }
		(rule__When_clause__Group__0)
		{ after(grammarAccess.getWhen_clauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecomp_op
entryRulecomp_op
:
{ before(grammarAccess.getComp_opRule()); }
	 rulecomp_op
{ after(grammarAccess.getComp_opRule()); } 
	 EOF 
;

// Rule comp_op
rulecomp_op 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComp_opAccess().getAlternatives()); }
		(rule__Comp_op__Alternatives)
		{ after(grammarAccess.getComp_opAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleidentifier
entryRuleidentifier
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleidentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule identifier
ruleidentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierAccess().getAlternatives()); }
		(rule__Identifier__Alternatives)
		{ after(grammarAccess.getIdentifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleunquoted_identifier
entryRuleunquoted_identifier
:
{ before(grammarAccess.getUnquoted_identifierRule()); }
	 ruleunquoted_identifier
{ after(grammarAccess.getUnquoted_identifierRule()); } 
	 EOF 
;

// Rule unquoted_identifier
ruleunquoted_identifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnquoted_identifierAccess().getAlternatives()); }
		(rule__Unquoted_identifier__Alternatives)
		{ after(grammarAccess.getUnquoted_identifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleamp_quoted_identifier
entryRuleamp_quoted_identifier
:
{ before(grammarAccess.getAmp_quoted_identifierRule()); }
	 ruleamp_quoted_identifier
{ after(grammarAccess.getAmp_quoted_identifierRule()); } 
	 EOF 
;

// Rule amp_quoted_identifier
ruleamp_quoted_identifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAmp_quoted_identifierAccess().getAMP_QUOTED_IDTerminalRuleCall()); }
		RULE_AMP_QUOTED_ID
		{ after(grammarAccess.getAmp_quoted_identifierAccess().getAMP_QUOTED_IDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulequoted_identifier
entryRulequoted_identifier
:
{ before(grammarAccess.getQuoted_identifierRule()); }
	 rulequoted_identifier
{ after(grammarAccess.getQuoted_identifierRule()); } 
	 EOF 
;

// Rule quoted_identifier
rulequoted_identifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuoted_identifierAccess().getQUOTED_IDTerminalRuleCall()); }
		RULE_QUOTED_ID
		{ after(grammarAccess.getQuoted_identifierAccess().getQUOTED_IDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulekeyword
entryRulekeyword
:
{ before(grammarAccess.getKeywordRule()); }
	 rulekeyword
{ after(grammarAccess.getKeywordRule()); } 
	 EOF 
;

// Rule keyword
rulekeyword 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeywordAccess().getAlternatives()); }
		(rule__Keyword__Alternatives)
		{ after(grammarAccess.getKeywordAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQUOTE
entryRuleQUOTE
:
{ before(grammarAccess.getQUOTERule()); }
	 ruleQUOTE
{ after(grammarAccess.getQUOTERule()); } 
	 EOF 
;

// Rule QUOTE
ruleQUOTE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQUOTEAccess().getApostropheKeyword()); }
		Apostrophe
		{ after(grammarAccess.getQUOTEAccess().getApostropheKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleASTERISK
entryRuleASTERISK
:
{ before(grammarAccess.getASTERISKRule()); }
	 ruleASTERISK
{ after(grammarAccess.getASTERISKRule()); } 
	 EOF 
;

// Rule ASTERISK
ruleASTERISK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getASTERISKAccess().getAsteriskKeyword()); }
		Asterisk
		{ after(grammarAccess.getASTERISKAccess().getAsteriskKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOLON
entryRuleCOLON
:
{ before(grammarAccess.getCOLONRule()); }
	 ruleCOLON
{ after(grammarAccess.getCOLONRule()); } 
	 EOF 
;

// Rule COLON
ruleCOLON 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOLONAccess().getColonKeyword()); }
		Colon
		{ after(grammarAccess.getCOLONAccess().getColonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMMA
entryRuleCOMMA
:
{ before(grammarAccess.getCOMMARule()); }
	 ruleCOMMA
{ after(grammarAccess.getCOMMARule()); } 
	 EOF 
;

// Rule COMMA
ruleCOMMA 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMMAAccess().getCommaKeyword()); }
		Comma
		{ after(grammarAccess.getCOMMAAccess().getCommaKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONCAT
entryRuleCONCAT
:
{ before(grammarAccess.getCONCATRule()); }
	 ruleCONCAT
{ after(grammarAccess.getCONCATRule()); } 
	 EOF 
;

// Rule CONCAT
ruleCONCAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONCATAccess().getVerticalLineVerticalLineKeyword()); }
		VerticalLineVerticalLine
		{ after(grammarAccess.getCONCATAccess().getVerticalLineVerticalLineKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOT
entryRuleDOT
:
{ before(grammarAccess.getDOTRule()); }
	 ruleDOT
{ after(grammarAccess.getDOTRule()); } 
	 EOF 
;

// Rule DOT
ruleDOT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOTAccess().getFullStopKeyword()); }
		FullStop
		{ after(grammarAccess.getDOTAccess().getFullStopKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEQ
entryRuleEQ
:
{ before(grammarAccess.getEQRule()); }
	 ruleEQ
{ after(grammarAccess.getEQRule()); } 
	 EOF 
;

// Rule EQ
ruleEQ 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEQAccess().getEqualsSignKeyword()); }
		EqualsSign
		{ after(grammarAccess.getEQAccess().getEqualsSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGE
entryRuleGE
:
{ before(grammarAccess.getGERule()); }
	 ruleGE
{ after(grammarAccess.getGERule()); } 
	 EOF 
;

// Rule GE
ruleGE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGEAccess().getGreaterThanSignEqualsSignKeyword()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getGEAccess().getGreaterThanSignEqualsSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGT
entryRuleGT
:
{ before(grammarAccess.getGTRule()); }
	 ruleGT
{ after(grammarAccess.getGTRule()); } 
	 EOF 
;

// Rule GT
ruleGT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGTAccess().getGreaterThanSignKeyword()); }
		GreaterThanSign
		{ after(grammarAccess.getGTAccess().getGreaterThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLBRACE
entryRuleLBRACE
:
{ before(grammarAccess.getLBRACERule()); }
	 ruleLBRACE
{ after(grammarAccess.getLBRACERule()); } 
	 EOF 
;

// Rule LBRACE
ruleLBRACE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLBRACEAccess().getLeftCurlyBracketKeyword()); }
		LeftCurlyBracket
		{ after(grammarAccess.getLBRACEAccess().getLeftCurlyBracketKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLE
entryRuleLE
:
{ before(grammarAccess.getLERule()); }
	 ruleLE
{ after(grammarAccess.getLERule()); } 
	 EOF 
;

// Rule LE
ruleLE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLEAccess().getLessThanSignEqualsSignKeyword()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getLEAccess().getLessThanSignEqualsSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLPAREN
entryRuleLPAREN
:
{ before(grammarAccess.getLPARENRule()); }
	 ruleLPAREN
{ after(grammarAccess.getLPARENRule()); } 
	 EOF 
;

// Rule LPAREN
ruleLPAREN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLPARENAccess().getLeftParenthesisKeyword()); }
		LeftParenthesis
		{ after(grammarAccess.getLPARENAccess().getLeftParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLT
entryRuleLT
:
{ before(grammarAccess.getLTRule()); }
	 ruleLT
{ after(grammarAccess.getLTRule()); } 
	 EOF 
;

// Rule LT
ruleLT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTAccess().getLessThanSignKeyword()); }
		LessThanSign
		{ after(grammarAccess.getLTAccess().getLessThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMINUS
entryRuleMINUS
:
{ before(grammarAccess.getMINUSRule()); }
	 ruleMINUS
{ after(grammarAccess.getMINUSRule()); } 
	 EOF 
;

// Rule MINUS
ruleMINUS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMINUSAccess().getHyphenMinusKeyword()); }
		HyphenMinus
		{ after(grammarAccess.getMINUSAccess().getHyphenMinusKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNE
entryRuleNE
:
{ before(grammarAccess.getNERule()); }
	 ruleNE
{ after(grammarAccess.getNERule()); } 
	 EOF 
;

// Rule NE
ruleNE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNEAccess().getLessThanSignGreaterThanSignKeyword()); }
		LessThanSignGreaterThanSign
		{ after(grammarAccess.getNEAccess().getLessThanSignGreaterThanSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePLUS
entryRulePLUS
:
{ before(grammarAccess.getPLUSRule()); }
	 rulePLUS
{ after(grammarAccess.getPLUSRule()); } 
	 EOF 
;

// Rule PLUS
rulePLUS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPLUSAccess().getPlusSignKeyword()); }
		PlusSign
		{ after(grammarAccess.getPLUSAccess().getPlusSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRBRACE
entryRuleRBRACE
:
{ before(grammarAccess.getRBRACERule()); }
	 ruleRBRACE
{ after(grammarAccess.getRBRACERule()); } 
	 EOF 
;

// Rule RBRACE
ruleRBRACE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRBRACEAccess().getRightCurlyBracketKeyword()); }
		RightCurlyBracket
		{ after(grammarAccess.getRBRACEAccess().getRightCurlyBracketKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRPAREN
entryRuleRPAREN
:
{ before(grammarAccess.getRPARENRule()); }
	 ruleRPAREN
{ after(grammarAccess.getRPARENRule()); } 
	 EOF 
;

// Rule RPAREN
ruleRPAREN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRPARENAccess().getRightParenthesisKeyword()); }
		RightParenthesis
		{ after(grammarAccess.getRPARENAccess().getRightParenthesisKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSOLIDUS
entryRuleSOLIDUS
:
{ before(grammarAccess.getSOLIDUSRule()); }
	 ruleSOLIDUS
{ after(grammarAccess.getSOLIDUSRule()); } 
	 EOF 
;

// Rule SOLIDUS
ruleSOLIDUS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSOLIDUSAccess().getSolidusKeyword()); }
		Solidus
		{ after(grammarAccess.getSOLIDUSAccess().getSolidusKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Single_formula_specification__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingle_formula_specificationAccess().getMember_specificationParserRuleCall_0()); }
		rulemember_specification
		{ after(grammarAccess.getSingle_formula_specificationAccess().getMember_specificationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingle_formula_specificationAccess().getSet_specificationParserRuleCall_1()); }
		ruleset_specification
		{ after(grammarAccess.getSingle_formula_specificationAccess().getSet_specificationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSet_specificationAccess().getGroup_3_0()); }
		(rule__Set_specification__Group_3_0__0)
		{ after(grammarAccess.getSet_specificationAccess().getGroup_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getSet_specificationAccess().getExpressionParserRuleCall_3_1()); }
		ruleexpression
		{ after(grammarAccess.getSet_specificationAccess().getExpressionParserRuleCall_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMember_specificationAccess().getGroup_3_0_0()); }
		(rule__Member_specification__Group_3_0_0__0)
		{ after(grammarAccess.getMember_specificationAccess().getGroup_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMember_specificationAccess().getValue_expressionParserRuleCall_3_0_1()); }
		rulevalue_expression
		{ after(grammarAccess.getMember_specificationAccess().getValue_expressionParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_property__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCell_propertyAccess().getMandatory_cell_propertyParserRuleCall_0()); }
		rulemandatory_cell_property
		{ after(grammarAccess.getCell_propertyAccess().getMandatory_cell_propertyParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCell_propertyAccess().getProvider_specific_cell_propertyParserRuleCall_1()); }
		ruleprovider_specific_cell_property
		{ after(grammarAccess.getCell_propertyAccess().getProvider_specific_cell_propertyParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory_cell_property__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMandatory_cell_propertyAccess().getCELL_ORDINALKeyword_0()); }
		CELL_ORDINAL
		{ after(grammarAccess.getMandatory_cell_propertyAccess().getCELL_ORDINALKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMandatory_cell_propertyAccess().getVALUEKeyword_1()); }
		VALUE
		{ after(grammarAccess.getMandatory_cell_propertyAccess().getVALUEKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMandatory_cell_propertyAccess().getFORMATTED_VALUEKeyword_2()); }
		FORMATTED_VALUE
		{ after(grammarAccess.getMandatory_cell_propertyAccess().getFORMATTED_VALUEKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValue_expressionAccess().getValue_xor_expressionParserRuleCall_1_0()); }
		rulevalue_xor_expression
		{ after(grammarAccess.getValue_expressionAccess().getValue_xor_expressionParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expressionAccess().getValue_or_expressionParserRuleCall_1_1()); }
		rulevalue_or_expression
		{ after(grammarAccess.getValue_expressionAccess().getValue_or_expressionParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term4__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerm4Access().getGroup_0()); }
		(rule__Term4__Group_0__0)
		{ after(grammarAccess.getTerm4Access().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerm4Access().getTerm3ParserRuleCall_1()); }
		ruleterm3
		{ after(grammarAccess.getTerm4Access().getTerm3ParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerm2Access().getCONCATParserRuleCall_1_0_0()); }
		ruleCONCAT
		{ after(grammarAccess.getTerm2Access().getCONCATParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerm2Access().getPLUSParserRuleCall_1_0_1()); }
		rulePLUS
		{ after(grammarAccess.getTerm2Access().getPLUSParserRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerm2Access().getMINUSParserRuleCall_1_0_2()); }
		ruleMINUS
		{ after(grammarAccess.getTerm2Access().getMINUSParserRuleCall_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getSOLIDUSParserRuleCall_1_0_0()); }
		ruleSOLIDUS
		{ after(grammarAccess.getTermAccess().getSOLIDUSParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getASTERISKParserRuleCall_1_0_1()); }
		ruleASTERISK
		{ after(grammarAccess.getTermAccess().getASTERISKParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getGroup_0()); }
		(rule__Factor__Group_0__0)
		{ after(grammarAccess.getFactorAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getGroup_1()); }
		(rule__Factor__Group_1__0)
		{ after(grammarAccess.getFactorAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_2()); }
		rulevalue_expression_primary
		{ after(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValue_expression_primaryAccess().getUnquoted_identifierParserRuleCall_1_1_0()); }
		ruleunquoted_identifier
		{ after(grammarAccess.getValue_expression_primaryAccess().getUnquoted_identifierParserRuleCall_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primaryAccess().getQuoted_identifierParserRuleCall_1_1_1()); }
		rulequoted_identifier
		{ after(grammarAccess.getValue_expression_primaryAccess().getQuoted_identifierParserRuleCall_1_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primaryAccess().getAmp_quoted_identifierParserRuleCall_1_1_2()); }
		ruleamp_quoted_identifier
		{ after(grammarAccess.getValue_expression_primaryAccess().getAmp_quoted_identifierParserRuleCall_1_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primaryAccess().getFunctionParserRuleCall_1_1_3()); }
		rulefunction
		{ after(grammarAccess.getValue_expression_primaryAccess().getFunctionParserRuleCall_1_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValue_expression_primary0Access().getFunctionParserRuleCall_0()); }
		rulefunction
		{ after(grammarAccess.getValue_expression_primary0Access().getFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primary0Access().getGroup_1()); }
		(rule__Value_expression_primary0__Group_1__0)
		{ after(grammarAccess.getValue_expression_primary0Access().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primary0Access().getGroup_2()); }
		(rule__Value_expression_primary0__Group_2__0)
		{ after(grammarAccess.getValue_expression_primary0Access().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primary0Access().getCase_expressionParserRuleCall_3()); }
		rulecase_expression
		{ after(grammarAccess.getValue_expression_primary0Access().getCase_expressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primary0Access().getSTRINGTerminalRuleCall_4()); }
		RULE_STRING
		{ after(grammarAccess.getValue_expression_primary0Access().getSTRINGTerminalRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primary0Access().getINTTerminalRuleCall_5()); }
		RULE_INT
		{ after(grammarAccess.getValue_expression_primary0Access().getINTTerminalRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getValue_expression_primary0Access().getIdentifierParserRuleCall_6()); }
		ruleidentifier
		{ after(grammarAccess.getValue_expression_primary0Access().getIdentifierParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comp_op__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComp_opAccess().getEQParserRuleCall_0()); }
		ruleEQ
		{ after(grammarAccess.getComp_opAccess().getEQParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComp_opAccess().getNEParserRuleCall_1()); }
		ruleNE
		{ after(grammarAccess.getComp_opAccess().getNEParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getComp_opAccess().getLTParserRuleCall_2()); }
		ruleLT
		{ after(grammarAccess.getComp_opAccess().getLTParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getComp_opAccess().getGTParserRuleCall_3()); }
		ruleGT
		{ after(grammarAccess.getComp_opAccess().getGTParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getComp_opAccess().getLEParserRuleCall_4()); }
		ruleLE
		{ after(grammarAccess.getComp_opAccess().getLEParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getComp_opAccess().getGEParserRuleCall_5()); }
		ruleGE
		{ after(grammarAccess.getComp_opAccess().getGEParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getUnquoted_identifierParserRuleCall_0()); }
		ruleunquoted_identifier
		{ after(grammarAccess.getIdentifierAccess().getUnquoted_identifierParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIdentifierAccess().getQuoted_identifierParserRuleCall_1()); }
		rulequoted_identifier
		{ after(grammarAccess.getIdentifierAccess().getQuoted_identifierParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unquoted_identifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnquoted_identifierAccess().getKeywordParserRuleCall_0()); }
		rulekeyword
		{ after(grammarAccess.getUnquoted_identifierAccess().getKeywordParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnquoted_identifierAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getUnquoted_identifierAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Keyword__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeywordAccess().getDIMENSIONKeyword_0()); }
		DIMENSION
		{ after(grammarAccess.getKeywordAccess().getDIMENSIONKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getKeywordAccess().getPROPERTIESKeyword_1()); }
		PROPERTIES
		{ after(grammarAccess.getKeywordAccess().getPROPERTIESKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__0__Impl
	rule__SelectStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSelectStatementAction_0()); }
	()
	{ after(grammarAccess.getSelectStatementAccess().getSelectStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__1__Impl
	rule__SelectStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getGroup_1()); }
	(rule__SelectStatement__Group_1__0)?
	{ after(grammarAccess.getSelectStatementAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__2__Impl
	rule__SelectStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSELECTKeyword_2()); }
	SELECT
	{ after(grammarAccess.getSelectStatementAccess().getSELECTKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__3__Impl
	rule__SelectStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getAxis_specification_listParserRuleCall_3()); }
	(ruleaxis_specification_list)?
	{ after(grammarAccess.getSelectStatementAccess().getAxis_specification_listParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__4__Impl
	rule__SelectStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getFROMKeyword_4()); }
	FROM
	{ after(grammarAccess.getSelectStatementAccess().getFROMKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__5__Impl
	rule__SelectStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getCube_specificationParserRuleCall_5()); }
	rulecube_specification
	{ after(grammarAccess.getSelectStatementAccess().getCube_specificationParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__6__Impl
	rule__SelectStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getGroup_6()); }
	(rule__SelectStatement__Group_6__0)?
	{ after(grammarAccess.getSelectStatementAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getCell_propsParserRuleCall_7()); }
	(rulecell_props)?
	{ after(grammarAccess.getSelectStatementAccess().getCell_propsParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_1__0__Impl
	rule__SelectStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getWITHKeyword_1_0()); }
	WITH
	{ after(grammarAccess.getSelectStatementAccess().getWITHKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getFormulaSpecificationParserRuleCall_1_1()); }
	ruleFormulaSpecification
	{ after(grammarAccess.getSelectStatementAccess().getFormulaSpecificationParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_6__0__Impl
	rule__SelectStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getWHEREKeyword_6_0()); }
	WHERE
	{ after(grammarAccess.getSelectStatementAccess().getWHEREKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSlicer_specificationParserRuleCall_6_1()); }
	ruleslicer_specification
	{ after(grammarAccess.getSelectStatementAccess().getSlicer_specificationParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Set_specification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set_specification__Group__0__Impl
	rule__Set_specification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSet_specificationAccess().getSETKeyword_0()); }
	SET
	{ after(grammarAccess.getSet_specificationAccess().getSETKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set_specification__Group__1__Impl
	rule__Set_specification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSet_specificationAccess().getSet_nameParserRuleCall_1()); }
	ruleset_name
	{ after(grammarAccess.getSet_specificationAccess().getSet_nameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set_specification__Group__2__Impl
	rule__Set_specification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSet_specificationAccess().getASKeyword_2()); }
	AS
	{ after(grammarAccess.getSet_specificationAccess().getASKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set_specification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSet_specificationAccess().getAlternatives_3()); }
	(rule__Set_specification__Alternatives_3)
	{ after(grammarAccess.getSet_specificationAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Set_specification__Group_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set_specification__Group_3_0__0__Impl
	rule__Set_specification__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSet_specificationAccess().getQUOTEParserRuleCall_3_0_0()); }
	ruleQUOTE
	{ after(grammarAccess.getSet_specificationAccess().getQUOTEParserRuleCall_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set_specification__Group_3_0__1__Impl
	rule__Set_specification__Group_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSet_specificationAccess().getExpressionParserRuleCall_3_0_1()); }
	ruleexpression
	{ after(grammarAccess.getSet_specificationAccess().getExpressionParserRuleCall_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group_3_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Set_specification__Group_3_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set_specification__Group_3_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSet_specificationAccess().getQUOTEParserRuleCall_3_0_2()); }
	ruleQUOTE
	{ after(grammarAccess.getSet_specificationAccess().getQUOTEParserRuleCall_3_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Member_specification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group__0__Impl
	rule__Member_specification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getMEMBERKeyword_0()); }
	MEMBER
	{ after(grammarAccess.getMember_specificationAccess().getMEMBERKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group__1__Impl
	rule__Member_specification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getMember_nameParserRuleCall_1()); }
	rulemember_name
	{ after(grammarAccess.getMember_specificationAccess().getMember_nameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group__2__Impl
	rule__Member_specification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getASKeyword_2()); }
	AS
	{ after(grammarAccess.getMember_specificationAccess().getASKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getGroup_3()); }
	(rule__Member_specification__Group_3__0)
	{ after(grammarAccess.getMember_specificationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Member_specification__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group_3__0__Impl
	rule__Member_specification__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getAlternatives_3_0()); }
	(rule__Member_specification__Alternatives_3_0)
	{ after(grammarAccess.getMember_specificationAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group_3__1__Impl
	rule__Member_specification__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getCOMMAParserRuleCall_3_1()); }
	ruleCOMMA
	{ after(grammarAccess.getMember_specificationAccess().getCOMMAParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getMember_property_def_listParserRuleCall_3_2()); }
	(rulemember_property_def_list)?
	{ after(grammarAccess.getMember_specificationAccess().getMember_property_def_listParserRuleCall_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Member_specification__Group_3_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group_3_0_0__0__Impl
	rule__Member_specification__Group_3_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getQUOTEParserRuleCall_3_0_0_0()); }
	ruleQUOTE
	{ after(grammarAccess.getMember_specificationAccess().getQUOTEParserRuleCall_3_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group_3_0_0__1__Impl
	rule__Member_specification__Group_3_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getValue_expressionParserRuleCall_3_0_0_1()); }
	rulevalue_expression
	{ after(grammarAccess.getMember_specificationAccess().getValue_expressionParserRuleCall_3_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3_0_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_specification__Group_3_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_specification__Group_3_0_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_specificationAccess().getQUOTEParserRuleCall_3_0_0_2()); }
	ruleQUOTE
	{ after(grammarAccess.getMember_specificationAccess().getQUOTEParserRuleCall_3_0_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Axis_specification_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification_list__Group__0__Impl
	rule__Axis_specification_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specification_listAccess().getAxis_specificationParserRuleCall_0()); }
	ruleaxis_specification
	{ after(grammarAccess.getAxis_specification_listAccess().getAxis_specificationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification_list__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specification_listAccess().getGroup_1()); }
	(rule__Axis_specification_list__Group_1__0)*
	{ after(grammarAccess.getAxis_specification_listAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Axis_specification_list__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification_list__Group_1__0__Impl
	rule__Axis_specification_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification_list__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specification_listAccess().getCOMMAParserRuleCall_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getAxis_specification_listAccess().getCOMMAParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification_list__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification_list__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specification_listAccess().getAxis_specificationParserRuleCall_1_1()); }
	ruleaxis_specification
	{ after(grammarAccess.getAxis_specification_listAccess().getAxis_specificationParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Member_property_def_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_property_def_list__Group__0__Impl
	rule__Member_property_def_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_def_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_property_def_listAccess().getMember_property_definitionParserRuleCall_0()); }
	rulemember_property_definition
	{ after(grammarAccess.getMember_property_def_listAccess().getMember_property_definitionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_def_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_property_def_list__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_def_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_property_def_listAccess().getGroup_1()); }
	(rule__Member_property_def_list__Group_1__0)*
	{ after(grammarAccess.getMember_property_def_listAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Member_property_def_list__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_property_def_list__Group_1__0__Impl
	rule__Member_property_def_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_def_list__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_property_def_listAccess().getCOMMAParserRuleCall_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getMember_property_def_listAccess().getCOMMAParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_def_list__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_property_def_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_def_list__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_property_def_listAccess().getMember_property_definitionParserRuleCall_1_1()); }
	rulemember_property_definition
	{ after(grammarAccess.getMember_property_def_listAccess().getMember_property_definitionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Member_property_definition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_property_definition__Group__0__Impl
	rule__Member_property_definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_definition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_property_definitionAccess().getIdentifierParserRuleCall_0()); }
	ruleidentifier
	{ after(grammarAccess.getMember_property_definitionAccess().getIdentifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_definition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_property_definition__Group__1__Impl
	rule__Member_property_definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_definition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_property_definitionAccess().getEQParserRuleCall_1()); }
	ruleEQ
	{ after(grammarAccess.getMember_property_definitionAccess().getEQParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_definition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Member_property_definition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Member_property_definition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMember_property_definitionAccess().getValue_expressionParserRuleCall_2()); }
	rulevalue_expression
	{ after(grammarAccess.getMember_property_definitionAccess().getValue_expressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Compound_id__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compound_id__Group__0__Impl
	rule__Compound_id__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_id__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompound_idAccess().getIdentifierParserRuleCall_0()); }
	ruleidentifier
	{ after(grammarAccess.getCompound_idAccess().getIdentifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_id__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compound_id__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_id__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompound_idAccess().getGroup_1()); }
	(rule__Compound_id__Group_1__0)*
	{ after(grammarAccess.getCompound_idAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Compound_id__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compound_id__Group_1__0__Impl
	rule__Compound_id__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_id__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompound_idAccess().getDOTParserRuleCall_1_0()); }
	ruleDOT
	{ after(grammarAccess.getCompound_idAccess().getDOTParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_id__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compound_id__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_id__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompound_idAccess().getIdentifierParserRuleCall_1_1()); }
	ruleidentifier
	{ after(grammarAccess.getCompound_idAccess().getIdentifierParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Axis_specification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification__Group__0__Impl
	rule__Axis_specification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specificationAccess().getGroup_0()); }
	(rule__Axis_specification__Group_0__0)?
	{ after(grammarAccess.getAxis_specificationAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification__Group__1__Impl
	rule__Axis_specification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specificationAccess().getExpressionParserRuleCall_1()); }
	ruleexpression
	{ after(grammarAccess.getAxis_specificationAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification__Group__2__Impl
	rule__Axis_specification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specificationAccess().getDim_propsParserRuleCall_2()); }
	(ruledim_props)?
	{ after(grammarAccess.getAxis_specificationAccess().getDim_propsParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification__Group__3__Impl
	rule__Axis_specification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specificationAccess().getONKeyword_3()); }
	ON
	{ after(grammarAccess.getAxis_specificationAccess().getONKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specificationAccess().getAxis_nameParserRuleCall_4()); }
	ruleaxis_name
	{ after(grammarAccess.getAxis_specificationAccess().getAxis_nameParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Axis_specification__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification__Group_0__0__Impl
	rule__Axis_specification__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specificationAccess().getNONKeyword_0_0()); }
	NON
	{ after(grammarAccess.getAxis_specificationAccess().getNONKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis_specification__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis_specification__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxis_specificationAccess().getEMPTYKeyword_0_1()); }
	EMPTY
	{ after(grammarAccess.getAxis_specificationAccess().getEMPTYKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dim_props__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dim_props__Group__0__Impl
	rule__Dim_props__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim_props__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDim_propsAccess().getDIMENSIONKeyword_0()); }
	(DIMENSION)?
	{ after(grammarAccess.getDim_propsAccess().getDIMENSIONKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim_props__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dim_props__Group__1__Impl
	rule__Dim_props__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim_props__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDim_propsAccess().getPROPERTIESKeyword_1()); }
	PROPERTIES
	{ after(grammarAccess.getDim_propsAccess().getPROPERTIESKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim_props__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dim_props__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim_props__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDim_propsAccess().getProperty_listParserRuleCall_2()); }
	ruleproperty_list
	{ after(grammarAccess.getDim_propsAccess().getProperty_listParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property_list__Group__0__Impl
	rule__Property_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty_listAccess().getPropertyParserRuleCall_0()); }
	ruleproperty
	{ after(grammarAccess.getProperty_listAccess().getPropertyParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property_list__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty_listAccess().getGroup_1()); }
	(rule__Property_list__Group_1__0)*
	{ after(grammarAccess.getProperty_listAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property_list__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property_list__Group_1__0__Impl
	rule__Property_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property_list__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty_listAccess().getCOMMAParserRuleCall_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getProperty_listAccess().getCOMMAParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property_list__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property_list__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty_listAccess().getPropertyParserRuleCall_1_1()); }
	ruleproperty
	{ after(grammarAccess.getProperty_listAccess().getPropertyParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cell_props__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell_props__Group__0__Impl
	rule__Cell_props__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_props__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCell_propsAccess().getCELLKeyword_0()); }
	(CELL)?
	{ after(grammarAccess.getCell_propsAccess().getCELLKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_props__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell_props__Group__1__Impl
	rule__Cell_props__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_props__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCell_propsAccess().getPROPERTIESKeyword_1()); }
	PROPERTIES
	{ after(grammarAccess.getCell_propsAccess().getPROPERTIESKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_props__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell_props__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_props__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCell_propsAccess().getCell_property_listParserRuleCall_2()); }
	rulecell_property_list
	{ after(grammarAccess.getCell_propsAccess().getCell_property_listParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cell_property_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell_property_list__Group__0__Impl
	rule__Cell_property_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_property_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCell_property_listAccess().getCell_propertyParserRuleCall_0()); }
	rulecell_property
	{ after(grammarAccess.getCell_property_listAccess().getCell_propertyParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_property_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell_property_list__Group__1__Impl
	rule__Cell_property_list__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_property_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCell_property_listAccess().getCOMMAParserRuleCall_1()); }
	ruleCOMMA
	{ after(grammarAccess.getCell_property_listAccess().getCOMMAParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_property_list__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell_property_list__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell_property_list__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCell_property_listAccess().getCell_propertyParserRuleCall_2()); }
	(rulecell_property)*
	{ after(grammarAccess.getCell_property_listAccess().getCell_propertyParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getValue_expressionParserRuleCall_0()); }
	rulevalue_expression
	{ after(grammarAccess.getExpressionAccess().getValue_expressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)*
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getCOLONParserRuleCall_1_0()); }
	ruleCOLON
	{ after(grammarAccess.getExpressionAccess().getCOLONParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getValue_expressionParserRuleCall_1_1()); }
	rulevalue_expression
	{ after(grammarAccess.getExpressionAccess().getValue_expressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value_expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression__Group__0__Impl
	rule__Value_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expressionAccess().getTerm5ParserRuleCall_0()); }
	ruleterm5
	{ after(grammarAccess.getValue_expressionAccess().getTerm5ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expressionAccess().getAlternatives_1()); }
	(rule__Value_expression__Alternatives_1)*
	{ after(grammarAccess.getValue_expressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value_xor_expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_xor_expression__Group__0__Impl
	rule__Value_xor_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_xor_expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_xor_expressionAccess().getXORKeyword_0()); }
	XOR
	{ after(grammarAccess.getValue_xor_expressionAccess().getXORKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_xor_expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_xor_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_xor_expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_xor_expressionAccess().getTerm5ParserRuleCall_1()); }
	ruleterm5
	{ after(grammarAccess.getValue_xor_expressionAccess().getTerm5ParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value_or_expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_or_expression__Group__0__Impl
	rule__Value_or_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_or_expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_or_expressionAccess().getORKeyword_0()); }
	OR
	{ after(grammarAccess.getValue_or_expressionAccess().getORKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_or_expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_or_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_or_expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_or_expressionAccess().getTerm5ParserRuleCall_1()); }
	ruleterm5
	{ after(grammarAccess.getValue_or_expressionAccess().getTerm5ParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term5__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term5__Group__0__Impl
	rule__Term5__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_0()); }
	ruleterm4
	{ after(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term5__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm5Access().getGroup_1()); }
	(rule__Term5__Group_1__0)*
	{ after(grammarAccess.getTerm5Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term5__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term5__Group_1__0__Impl
	rule__Term5__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm5Access().getANDKeyword_1_0()); }
	AND
	{ after(grammarAccess.getTerm5Access().getANDKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term5__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term5__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_1_1()); }
	ruleterm4
	{ after(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term4__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term4__Group_0__0__Impl
	rule__Term4__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term4__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm4Access().getNOTKeyword_0_0()); }
	NOT
	{ after(grammarAccess.getTerm4Access().getNOTKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term4__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term4__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term4__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm4Access().getTerm4ParserRuleCall_0_1()); }
	ruleterm4
	{ after(grammarAccess.getTerm4Access().getTerm4ParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term3__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term3__Group__0__Impl
	rule__Term3__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_0()); }
	ruleterm2
	{ after(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term3__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm3Access().getGroup_1()); }
	(rule__Term3__Group_1__0)*
	{ after(grammarAccess.getTerm3Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term3__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term3__Group_1__0__Impl
	rule__Term3__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm3Access().getComp_opParserRuleCall_1_0()); }
	rulecomp_op
	{ after(grammarAccess.getTerm3Access().getComp_opParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term3__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term3__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_1_1()); }
	ruleterm2
	{ after(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term2__Group__0__Impl
	rule__Term2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm2Access().getTermParserRuleCall_0()); }
	ruleterm
	{ after(grammarAccess.getTerm2Access().getTermParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm2Access().getGroup_1()); }
	(rule__Term2__Group_1__0)*
	{ after(grammarAccess.getTerm2Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term2__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term2__Group_1__0__Impl
	rule__Term2__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm2Access().getAlternatives_1_0()); }
	(rule__Term2__Alternatives_1_0)
	{ after(grammarAccess.getTerm2Access().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term2__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term2__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerm2Access().getTermParserRuleCall_1_1()); }
	ruleterm
	{ after(grammarAccess.getTerm2Access().getTermParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
	rulefactor
	{ after(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getGroup_1()); }
	(rule__Term__Group_1__0)*
	{ after(grammarAccess.getTermAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getAlternatives_1_0()); }
	(rule__Term__Alternatives_1_0)
	{ after(grammarAccess.getTermAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); }
	rulefactor
	{ after(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__0__Impl
	rule__Factor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getMINUSParserRuleCall_0_0()); }
	ruleMINUS
	{ after(grammarAccess.getFactorAccess().getMINUSParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_0_1()); }
	rulevalue_expression_primary
	{ after(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getPLUSParserRuleCall_1_0()); }
	rulePLUS
	{ after(grammarAccess.getFactorAccess().getPLUSParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_1_1()); }
	rulevalue_expression_primary
	{ after(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getIdentifierParserRuleCall_0()); }
	ruleidentifier
	{ after(grammarAccess.getFunctionAccess().getIdentifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLPARENParserRuleCall_1()); }
	ruleLPAREN
	{ after(grammarAccess.getFunctionAccess().getLPARENParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getExp_listParserRuleCall_2()); }
	(ruleexp_list)?
	{ after(grammarAccess.getFunctionAccess().getExp_listParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRPARENParserRuleCall_3()); }
	ruleRPAREN
	{ after(grammarAccess.getFunctionAccess().getRPARENParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value_expression_primary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary__Group__0__Impl
	rule__Value_expression_primary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primaryAccess().getValue_expression_primary0ParserRuleCall_0()); }
	rulevalue_expression_primary0
	{ after(grammarAccess.getValue_expression_primaryAccess().getValue_expression_primary0ParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primaryAccess().getGroup_1()); }
	(rule__Value_expression_primary__Group_1__0)*
	{ after(grammarAccess.getValue_expression_primaryAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value_expression_primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary__Group_1__0__Impl
	rule__Value_expression_primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primaryAccess().getDOTParserRuleCall_1_0()); }
	ruleDOT
	{ after(grammarAccess.getValue_expression_primaryAccess().getDOTParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primaryAccess().getAlternatives_1_1()); }
	(rule__Value_expression_primary__Alternatives_1_1)
	{ after(grammarAccess.getValue_expression_primaryAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value_expression_primary0__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary0__Group_1__0__Impl
	rule__Value_expression_primary0__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primary0Access().getLPARENParserRuleCall_1_0()); }
	ruleLPAREN
	{ after(grammarAccess.getValue_expression_primary0Access().getLPARENParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary0__Group_1__1__Impl
	rule__Value_expression_primary0__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primary0Access().getExp_listParserRuleCall_1_1()); }
	ruleexp_list
	{ after(grammarAccess.getValue_expression_primary0Access().getExp_listParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary0__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primary0Access().getRPARENParserRuleCall_1_2()); }
	ruleRPAREN
	{ after(grammarAccess.getValue_expression_primary0Access().getRPARENParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value_expression_primary0__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary0__Group_2__0__Impl
	rule__Value_expression_primary0__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primary0Access().getLBRACEParserRuleCall_2_0()); }
	ruleLBRACE
	{ after(grammarAccess.getValue_expression_primary0Access().getLBRACEParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary0__Group_2__1__Impl
	rule__Value_expression_primary0__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primary0Access().getExp_listParserRuleCall_2_1()); }
	(ruleexp_list)?
	{ after(grammarAccess.getValue_expression_primary0Access().getExp_listParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value_expression_primary0__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value_expression_primary0__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValue_expression_primary0Access().getRBRACEParserRuleCall_2_2()); }
	ruleRBRACE
	{ after(grammarAccess.getValue_expression_primary0Access().getRBRACEParserRuleCall_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp_list__Group__0__Impl
	rule__Exp_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExp_listAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
	{ after(grammarAccess.getExp_listAccess().getExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp_list__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExp_listAccess().getGroup_1()); }
	(rule__Exp_list__Group_1__0)*
	{ after(grammarAccess.getExp_listAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp_list__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp_list__Group_1__0__Impl
	rule__Exp_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp_list__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExp_listAccess().getCOMMAParserRuleCall_1_0()); }
	ruleCOMMA
	{ after(grammarAccess.getExp_listAccess().getCOMMAParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp_list__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp_list__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExp_listAccess().getExpressionParserRuleCall_1_1()); }
	ruleexpression
	{ after(grammarAccess.getExp_listAccess().getExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Case_expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case_expression__Group__0__Impl
	rule__Case_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCase_expressionAccess().getCASEKeyword_0()); }
	CASE
	{ after(grammarAccess.getCase_expressionAccess().getCASEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case_expression__Group__1__Impl
	rule__Case_expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCase_expressionAccess().getValue_expressionParserRuleCall_1()); }
	(rulevalue_expression)?
	{ after(grammarAccess.getCase_expressionAccess().getValue_expressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case_expression__Group__2__Impl
	rule__Case_expression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCase_expressionAccess().getWhen_listParserRuleCall_2()); }
	(rulewhen_list)?
	{ after(grammarAccess.getCase_expressionAccess().getWhen_listParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case_expression__Group__3__Impl
	rule__Case_expression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCase_expressionAccess().getGroup_3()); }
	(rule__Case_expression__Group_3__0)?
	{ after(grammarAccess.getCase_expressionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case_expression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCase_expressionAccess().getENDKeyword_4()); }
	END
	{ after(grammarAccess.getCase_expressionAccess().getENDKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Case_expression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case_expression__Group_3__0__Impl
	rule__Case_expression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCase_expressionAccess().getELSEKeyword_3_0()); }
	ELSE
	{ after(grammarAccess.getCase_expressionAccess().getELSEKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case_expression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Case_expression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCase_expressionAccess().getValue_expressionParserRuleCall_3_1()); }
	rulevalue_expression
	{ after(grammarAccess.getCase_expressionAccess().getValue_expressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__When_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When_list__Group__0__Impl
	rule__When_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__When_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhen_listAccess().getWhen_clauseParserRuleCall_0()); }
	rulewhen_clause
	{ after(grammarAccess.getWhen_listAccess().getWhen_clauseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When_list__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__When_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhen_listAccess().getWhen_clauseParserRuleCall_1()); }
	(rulewhen_clause)*
	{ after(grammarAccess.getWhen_listAccess().getWhen_clauseParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__When_clause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When_clause__Group__0__Impl
	rule__When_clause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__When_clause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhen_clauseAccess().getWHENKeyword_0()); }
	WHEN
	{ after(grammarAccess.getWhen_clauseAccess().getWHENKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When_clause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When_clause__Group__1__Impl
	rule__When_clause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__When_clause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhen_clauseAccess().getValue_expressionParserRuleCall_1()); }
	rulevalue_expression
	{ after(grammarAccess.getWhen_clauseAccess().getValue_expressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When_clause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When_clause__Group__2__Impl
	rule__When_clause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__When_clause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhen_clauseAccess().getTHENKeyword_2()); }
	THEN
	{ after(grammarAccess.getWhen_clauseAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When_clause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When_clause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__When_clause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhen_clauseAccess().getValue_expressionParserRuleCall_3()); }
	rulevalue_expression
	{ after(grammarAccess.getWhen_clauseAccess().getValue_expressionParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

