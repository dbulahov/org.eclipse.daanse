/*
 * generated by Xtext 2.28.0
 */
parser grammar InternalMdxParser;

options {
	tokenVocab=InternalMdxLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.eclipse.daanse.mdx.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.daanse.mdx.xtext.services.MdxGrammarAccess;

}

@members {

 	private MdxGrammarAccess grammarAccess;

    public InternalMdxParser(TokenStream input, MdxGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MdxStatement";
   	}

   	@Override
   	protected MdxGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMdxStatement
entryRuleMdxStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMdxStatementRule()); }
	iv_ruleMdxStatement=ruleMdxStatement
	{ $current=$iv_ruleMdxStatement.current; }
	EOF;

// Rule MdxStatement
ruleMdxStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMdxStatementAccess().getStatementSelectStatementParserRuleCall_0());
			}
			lv_statement_0_0=ruleSelectStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMdxStatementRule());
				}
				set(
					$current,
					"statement",
					lv_statement_0_0,
					"org.eclipse.daanse.mdx.xtext.Mdx.SelectStatement");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	iv_ruleSelectStatement=ruleSelectStatement
	{ $current=$iv_ruleSelectStatement.current; }
	EOF;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSelectStatementAccess().getSelectStatementAction_0(),
					$current);
			}
		)
		(
			otherlv_1=WITH
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectStatementAccess().getWITHKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getSelectStatementAccess().getFormulaSpecificationParserRuleCall_1_1());
			}
			ruleFormulaSpecification
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_3=SELECT
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectStatementAccess().getSELECTKeyword_2());
		}
		(
			{
				newCompositeNode(grammarAccess.getSelectStatementAccess().getAxisSpecificationListParserRuleCall_3());
			}
			ruleAxisSpecificationList
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_5=FROM
		{
			newLeafNode(otherlv_5, grammarAccess.getSelectStatementAccess().getFROMKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getSelectStatementAccess().getCubeSpecificationParserRuleCall_5());
		}
		ruleCubeSpecification
		{
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_7=WHERE
			{
				newLeafNode(otherlv_7, grammarAccess.getSelectStatementAccess().getWHEREKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getSelectStatementAccess().getSlicerSpecificationParserRuleCall_6_1());
			}
			ruleSlicerSpecification
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getSelectStatementAccess().getCellPropetiesParserRuleCall_7());
			}
			ruleCellPropeties
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleFormulaSpecification
entryRuleFormulaSpecification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFormulaSpecificationRule()); }
	iv_ruleFormulaSpecification=ruleFormulaSpecification
	{ $current=$iv_ruleFormulaSpecification.current.getText(); }
	EOF;

// Rule FormulaSpecification
ruleFormulaSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFormulaSpecificationAccess().getSingleFormulaSpecificationParserRuleCall());
		}
		this_SingleFormulaSpecification_0=ruleSingleFormulaSpecification
		{
			$current.merge(this_SingleFormulaSpecification_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRuleSingleFormulaSpecification
entryRuleSingleFormulaSpecification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSingleFormulaSpecificationRule()); }
	iv_ruleSingleFormulaSpecification=ruleSingleFormulaSpecification
	{ $current=$iv_ruleSingleFormulaSpecification.current.getText(); }
	EOF;

// Rule SingleFormulaSpecification
ruleSingleFormulaSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSingleFormulaSpecificationAccess().getMemberSpecificationParserRuleCall_0());
		}
		this_MemberSpecification_0=ruleMemberSpecification
		{
			$current.merge(this_MemberSpecification_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSingleFormulaSpecificationAccess().getSetSpecificationParserRuleCall_1());
		}
		this_SetSpecification_1=ruleSetSpecification
		{
			$current.merge(this_SetSpecification_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetSpecification
entryRuleSetSpecification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSetSpecificationRule()); }
	iv_ruleSetSpecification=ruleSetSpecification
	{ $current=$iv_ruleSetSpecification.current.getText(); }
	EOF;

// Rule SetSpecification
ruleSetSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=SET
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSetSpecificationAccess().getSETKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSetSpecificationAccess().getSetNameParserRuleCall_1());
		}
		this_SetName_1=ruleSetName
		{
			$current.merge(this_SetName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=AS
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSetSpecificationAccess().getASKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetSpecificationAccess().getQUOTEParserRuleCall_3_0_0());
				}
				this_QUOTE_3=ruleQUOTE
				{
					$current.merge(this_QUOTE_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getSetSpecificationAccess().getExpressionParserRuleCall_3_0_1());
				}
				this_Expression_4=ruleExpression
				{
					$current.merge(this_Expression_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getSetSpecificationAccess().getQUOTEParserRuleCall_3_0_2());
				}
				this_QUOTE_5=ruleQUOTE
				{
					$current.merge(this_QUOTE_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getSetSpecificationAccess().getExpressionParserRuleCall_3_1());
			}
			this_Expression_6=ruleExpression
			{
				$current.merge(this_Expression_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMemberSpecification
entryRuleMemberSpecification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMemberSpecificationRule()); }
	iv_ruleMemberSpecification=ruleMemberSpecification
	{ $current=$iv_ruleMemberSpecification.current.getText(); }
	EOF;

// Rule MemberSpecification
ruleMemberSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=MEMBER
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMemberSpecificationAccess().getMEMBERKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getMemberSpecificationAccess().getMemberNameParserRuleCall_1());
		}
		this_MemberName_1=ruleMemberName
		{
			$current.merge(this_MemberName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=AS
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMemberSpecificationAccess().getASKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMemberSpecificationAccess().getQUOTEParserRuleCall_3_0_0_0());
					}
					this_QUOTE_3=ruleQUOTE
					{
						$current.merge(this_QUOTE_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getMemberSpecificationAccess().getValueExpressionParserRuleCall_3_0_0_1());
					}
					this_ValueExpression_4=ruleValueExpression
					{
						$current.merge(this_ValueExpression_4);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getMemberSpecificationAccess().getQUOTEParserRuleCall_3_0_0_2());
					}
					this_QUOTE_5=ruleQUOTE
					{
						$current.merge(this_QUOTE_5);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)
				    |
				{
					newCompositeNode(grammarAccess.getMemberSpecificationAccess().getValueExpressionParserRuleCall_3_0_1());
				}
				this_ValueExpression_6=ruleValueExpression
				{
					$current.merge(this_ValueExpression_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			{
				newCompositeNode(grammarAccess.getMemberSpecificationAccess().getCOMMAParserRuleCall_3_1());
			}
			this_COMMA_7=ruleCOMMA
			{
				$current.merge(this_COMMA_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getMemberSpecificationAccess().getMemberPropertyDefListParserRuleCall_3_2());
				}
				this_MemberPropertyDefList_8=ruleMemberPropertyDefList
				{
					$current.merge(this_MemberPropertyDefList_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuleAxisSpecificationList
entryRuleAxisSpecificationList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAxisSpecificationListRule()); }
	iv_ruleAxisSpecificationList=ruleAxisSpecificationList
	{ $current=$iv_ruleAxisSpecificationList.current.getText(); }
	EOF;

// Rule AxisSpecificationList
ruleAxisSpecificationList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAxisSpecificationListAccess().getAxisSpecificationParserRuleCall_0());
		}
		this_AxisSpecification_0=ruleAxisSpecification
		{
			$current.merge(this_AxisSpecification_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getAxisSpecificationListAccess().getCOMMAParserRuleCall_1_0());
			}
			this_COMMA_1=ruleCOMMA
			{
				$current.merge(this_COMMA_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAxisSpecificationListAccess().getAxisSpecificationParserRuleCall_1_1());
			}
			this_AxisSpecification_2=ruleAxisSpecification
			{
				$current.merge(this_AxisSpecification_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleMemberPropertyDefList
entryRuleMemberPropertyDefList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMemberPropertyDefListRule()); }
	iv_ruleMemberPropertyDefList=ruleMemberPropertyDefList
	{ $current=$iv_ruleMemberPropertyDefList.current.getText(); }
	EOF;

// Rule MemberPropertyDefList
ruleMemberPropertyDefList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMemberPropertyDefListAccess().getMemberPropertyDefinitionParserRuleCall_0());
		}
		this_MemberPropertyDefinition_0=ruleMemberPropertyDefinition
		{
			$current.merge(this_MemberPropertyDefinition_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getMemberPropertyDefListAccess().getCOMMAParserRuleCall_1_0());
			}
			this_COMMA_1=ruleCOMMA
			{
				$current.merge(this_COMMA_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getMemberPropertyDefListAccess().getMemberPropertyDefinitionParserRuleCall_1_1());
			}
			this_MemberPropertyDefinition_2=ruleMemberPropertyDefinition
			{
				$current.merge(this_MemberPropertyDefinition_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleMemberName
entryRuleMemberName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMemberNameRule()); }
	iv_ruleMemberName=ruleMemberName
	{ $current=$iv_ruleMemberName.current.getText(); }
	EOF;

// Rule MemberName
ruleMemberName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getMemberNameAccess().getCompoundIdParserRuleCall());
	}
	this_CompoundId_0=ruleCompoundId
	{
		$current.merge(this_CompoundId_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleMemberPropertyDefinition
entryRuleMemberPropertyDefinition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMemberPropertyDefinitionRule()); }
	iv_ruleMemberPropertyDefinition=ruleMemberPropertyDefinition
	{ $current=$iv_ruleMemberPropertyDefinition.current.getText(); }
	EOF;

// Rule MemberPropertyDefinition
ruleMemberPropertyDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMemberPropertyDefinitionAccess().getIdentifierParserRuleCall_0());
		}
		this_Identifier_0=ruleIdentifier
		{
			$current.merge(this_Identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getMemberPropertyDefinitionAccess().getEQParserRuleCall_1());
		}
		this_EQ_1=ruleEQ
		{
			$current.merge(this_EQ_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getMemberPropertyDefinitionAccess().getValueExpressionParserRuleCall_2());
		}
		this_ValueExpression_2=ruleValueExpression
		{
			$current.merge(this_ValueExpression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetName
entryRuleSetName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSetNameRule()); }
	iv_ruleSetName=ruleSetName
	{ $current=$iv_ruleSetName.current.getText(); }
	EOF;

// Rule SetName
ruleSetName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSetNameAccess().getCompoundIdParserRuleCall());
	}
	this_CompoundId_0=ruleCompoundId
	{
		$current.merge(this_CompoundId_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCompoundId
entryRuleCompoundId returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompoundIdRule()); }
	iv_ruleCompoundId=ruleCompoundId
	{ $current=$iv_ruleCompoundId.current.getText(); }
	EOF;

// Rule CompoundId
ruleCompoundId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompoundIdAccess().getIdentifierParserRuleCall_0());
		}
		this_Identifier_0=ruleIdentifier
		{
			$current.merge(this_Identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getCompoundIdAccess().getDOTParserRuleCall_1_0());
			}
			this_DOT_1=ruleDOT
			{
				$current.merge(this_DOT_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getCompoundIdAccess().getIdentifierParserRuleCall_1_1());
			}
			this_Identifier_2=ruleIdentifier
			{
				$current.merge(this_Identifier_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleAxisSpecification
entryRuleAxisSpecification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAxisSpecificationRule()); }
	iv_ruleAxisSpecification=ruleAxisSpecification
	{ $current=$iv_ruleAxisSpecification.current.getText(); }
	EOF;

// Rule AxisSpecification
ruleAxisSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=NON
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAxisSpecificationAccess().getNONKeyword_0_0());
			}
			kw=EMPTY
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAxisSpecificationAccess().getEMPTYKeyword_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getAxisSpecificationAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_2=ruleExpression
		{
			$current.merge(this_Expression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getAxisSpecificationAccess().getDimPropertiesParserRuleCall_2());
			}
			this_DimProperties_3=ruleDimProperties
			{
				$current.merge(this_DimProperties_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=ON
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAxisSpecificationAccess().getONKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getAxisSpecificationAccess().getAxisNameParserRuleCall_4());
		}
		this_AxisName_5=ruleAxisName
		{
			$current.merge(this_AxisName_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAxisName
entryRuleAxisName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAxisNameRule()); }
	iv_ruleAxisName=ruleAxisName
	{ $current=$iv_ruleAxisName.current.getText(); }
	EOF;

// Rule AxisName
ruleAxisName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAxisNameAccess().getIdentifierParserRuleCall());
	}
	this_Identifier_0=ruleIdentifier
	{
		$current.merge(this_Identifier_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleDimProperties
entryRuleDimProperties returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDimPropertiesRule()); }
	iv_ruleDimProperties=ruleDimProperties
	{ $current=$iv_ruleDimProperties.current.getText(); }
	EOF;

// Rule DimProperties
ruleDimProperties returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=DIMENSION
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDimPropertiesAccess().getDIMENSIONKeyword_0());
			}
		)?
		kw=PROPERTIES
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDimPropertiesAccess().getPROPERTIESKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getDimPropertiesAccess().getPropertyListParserRuleCall_2());
		}
		this_PropertyList_2=rulePropertyList
		{
			$current.merge(this_PropertyList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePropertyList
entryRulePropertyList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPropertyListRule()); }
	iv_rulePropertyList=rulePropertyList
	{ $current=$iv_rulePropertyList.current.getText(); }
	EOF;

// Rule PropertyList
rulePropertyList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPropertyListAccess().getPropertyParserRuleCall_0());
		}
		this_Property_0=ruleProperty
		{
			$current.merge(this_Property_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getPropertyListAccess().getCOMMAParserRuleCall_1_0());
			}
			this_COMMA_1=ruleCOMMA
			{
				$current.merge(this_COMMA_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPropertyListAccess().getPropertyParserRuleCall_1_1());
			}
			this_Property_2=ruleProperty
			{
				$current.merge(this_Property_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current.getText(); }
	EOF;

// Rule Property
ruleProperty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPropertyAccess().getCompoundIdParserRuleCall());
	}
	this_CompoundId_0=ruleCompoundId
	{
		$current.merge(this_CompoundId_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCubeSpecification
entryRuleCubeSpecification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCubeSpecificationRule()); }
	iv_ruleCubeSpecification=ruleCubeSpecification
	{ $current=$iv_ruleCubeSpecification.current.getText(); }
	EOF;

// Rule CubeSpecification
ruleCubeSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getCubeSpecificationAccess().getCubeNameParserRuleCall());
	}
	this_CubeName_0=ruleCubeName
	{
		$current.merge(this_CubeName_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCubeName
entryRuleCubeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCubeNameRule()); }
	iv_ruleCubeName=ruleCubeName
	{ $current=$iv_ruleCubeName.current.getText(); }
	EOF;

// Rule CubeName
ruleCubeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getCubeNameAccess().getCompoundIdParserRuleCall());
	}
	this_CompoundId_0=ruleCompoundId
	{
		$current.merge(this_CompoundId_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSlicerSpecification
entryRuleSlicerSpecification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSlicerSpecificationRule()); }
	iv_ruleSlicerSpecification=ruleSlicerSpecification
	{ $current=$iv_ruleSlicerSpecification.current.getText(); }
	EOF;

// Rule SlicerSpecification
ruleSlicerSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSlicerSpecificationAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current.merge(this_Expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCellPropeties
entryRuleCellPropeties returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCellPropetiesRule()); }
	iv_ruleCellPropeties=ruleCellPropeties
	{ $current=$iv_ruleCellPropeties.current.getText(); }
	EOF;

// Rule CellPropeties
ruleCellPropeties returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=CELL
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCellPropetiesAccess().getCELLKeyword_0());
			}
		)?
		kw=PROPERTIES
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCellPropetiesAccess().getPROPERTIESKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getCellPropetiesAccess().getCellPropertyListParserRuleCall_2());
		}
		this_CellPropertyList_2=ruleCellPropertyList
		{
			$current.merge(this_CellPropertyList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCellPropertyList
entryRuleCellPropertyList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCellPropertyListRule()); }
	iv_ruleCellPropertyList=ruleCellPropertyList
	{ $current=$iv_ruleCellPropertyList.current.getText(); }
	EOF;

// Rule CellPropertyList
ruleCellPropertyList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCellPropertyListAccess().getCellPropertyParserRuleCall_0());
		}
		this_CellProperty_0=ruleCellProperty
		{
			$current.merge(this_CellProperty_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getCellPropertyListAccess().getCOMMAParserRuleCall_1());
		}
		this_COMMA_1=ruleCOMMA
		{
			$current.merge(this_COMMA_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getCellPropertyListAccess().getCellPropertyParserRuleCall_2());
			}
			this_CellProperty_2=ruleCellProperty
			{
				$current.merge(this_CellProperty_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleCellProperty
entryRuleCellProperty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCellPropertyRule()); }
	iv_ruleCellProperty=ruleCellProperty
	{ $current=$iv_ruleCellProperty.current.getText(); }
	EOF;

// Rule CellProperty
ruleCellProperty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCellPropertyAccess().getMandatoryCellPropertyParserRuleCall_0());
		}
		this_MandatoryCellProperty_0=ruleMandatoryCellProperty
		{
			$current.merge(this_MandatoryCellProperty_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCellPropertyAccess().getProviderSpecificCellPropertyParserRuleCall_1());
		}
		this_ProviderSpecificCellProperty_1=ruleProviderSpecificCellProperty
		{
			$current.merge(this_ProviderSpecificCellProperty_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMandatoryCellProperty
entryRuleMandatoryCellProperty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMandatoryCellPropertyRule()); }
	iv_ruleMandatoryCellProperty=ruleMandatoryCellProperty
	{ $current=$iv_ruleMandatoryCellProperty.current.getText(); }
	EOF;

// Rule MandatoryCellProperty
ruleMandatoryCellProperty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=CELL_ORDINAL
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMandatoryCellPropertyAccess().getCELL_ORDINALKeyword_0());
		}
		    |
		kw=VALUE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMandatoryCellPropertyAccess().getVALUEKeyword_1());
		}
		    |
		kw=FORMATTED_VALUE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMandatoryCellPropertyAccess().getFORMATTED_VALUEKeyword_2());
		}
	)
;

// Entry rule entryRuleProviderSpecificCellProperty
entryRuleProviderSpecificCellProperty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProviderSpecificCellPropertyRule()); }
	iv_ruleProviderSpecificCellProperty=ruleProviderSpecificCellProperty
	{ $current=$iv_ruleProviderSpecificCellProperty.current.getText(); }
	EOF;

// Rule ProviderSpecificCellProperty
ruleProviderSpecificCellProperty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getProviderSpecificCellPropertyAccess().getIdentifierParserRuleCall());
	}
	this_Identifier_0=ruleIdentifier
	{
		$current.merge(this_Identifier_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current.getText(); }
	EOF;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_0());
		}
		this_ValueExpression_0=ruleValueExpression
		{
			$current.merge(this_ValueExpression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getCOLONParserRuleCall_1_0());
			}
			this_COLON_1=ruleCOLON
			{
				$current.merge(this_COLON_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_1_1());
			}
			this_ValueExpression_2=ruleValueExpression
			{
				$current.merge(this_ValueExpression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueExpressionRule()); }
	iv_ruleValueExpression=ruleValueExpression
	{ $current=$iv_ruleValueExpression.current.getText(); }
	EOF;

// Rule ValueExpression
ruleValueExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueExpressionAccess().getTerm5ParserRuleCall_0());
		}
		this_Term5_0=ruleTerm5
		{
			$current.merge(this_Term5_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getValueExpressionAccess().getValueXorExpressionParserRuleCall_1_0());
			}
			this_ValueXorExpression_1=ruleValueXorExpression
			{
				$current.merge(this_ValueXorExpression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getValueExpressionAccess().getValueOrExpressionParserRuleCall_1_1());
			}
			this_ValueOrExpression_2=ruleValueOrExpression
			{
				$current.merge(this_ValueOrExpression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleValueXorExpression
entryRuleValueXorExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueXorExpressionRule()); }
	iv_ruleValueXorExpression=ruleValueXorExpression
	{ $current=$iv_ruleValueXorExpression.current.getText(); }
	EOF;

// Rule ValueXorExpression
ruleValueXorExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=XOR
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getValueXorExpressionAccess().getXORKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getValueXorExpressionAccess().getTerm5ParserRuleCall_1());
		}
		this_Term5_1=ruleTerm5
		{
			$current.merge(this_Term5_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValueOrExpression
entryRuleValueOrExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueOrExpressionRule()); }
	iv_ruleValueOrExpression=ruleValueOrExpression
	{ $current=$iv_ruleValueOrExpression.current.getText(); }
	EOF;

// Rule ValueOrExpression
ruleValueOrExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=OR
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getValueOrExpressionAccess().getORKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getValueOrExpressionAccess().getTerm5ParserRuleCall_1());
		}
		this_Term5_1=ruleTerm5
		{
			$current.merge(this_Term5_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerm5
entryRuleTerm5 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerm5Rule()); }
	iv_ruleTerm5=ruleTerm5
	{ $current=$iv_ruleTerm5.current.getText(); }
	EOF;

// Rule Term5
ruleTerm5 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_0());
		}
		this_Term4_0=ruleTerm4
		{
			$current.merge(this_Term4_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=AND
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTerm5Access().getANDKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_1_1());
			}
			this_Term4_2=ruleTerm4
			{
				$current.merge(this_Term4_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleTerm4
entryRuleTerm4 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerm4Rule()); }
	iv_ruleTerm4=ruleTerm4
	{ $current=$iv_ruleTerm4.current.getText(); }
	EOF;

// Rule Term4
ruleTerm4 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=NOT
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTerm4Access().getNOTKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTerm4Access().getTerm4ParserRuleCall_0_1());
			}
			this_Term4_1=ruleTerm4
			{
				$current.merge(this_Term4_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTerm4Access().getTerm3ParserRuleCall_1());
		}
		this_Term3_2=ruleTerm3
		{
			$current.merge(this_Term3_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerm3
entryRuleTerm3 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerm3Rule()); }
	iv_ruleTerm3=ruleTerm3
	{ $current=$iv_ruleTerm3.current.getText(); }
	EOF;

// Rule Term3
ruleTerm3 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_0());
		}
		this_Term2_0=ruleTerm2
		{
			$current.merge(this_Term2_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getTerm3Access().getCompatingOperatorParserRuleCall_1_0());
			}
			this_CompatingOperator_1=ruleCompatingOperator
			{
				$current.merge(this_CompatingOperator_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_1_1());
			}
			this_Term2_2=ruleTerm2
			{
				$current.merge(this_Term2_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleTerm2
entryRuleTerm2 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerm2Rule()); }
	iv_ruleTerm2=ruleTerm2
	{ $current=$iv_ruleTerm2.current.getText(); }
	EOF;

// Rule Term2
ruleTerm2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerm2Access().getTermParserRuleCall_0());
		}
		this_Term_0=ruleTerm
		{
			$current.merge(this_Term_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerm2Access().getCONCATParserRuleCall_1_0_0());
				}
				this_CONCAT_1=ruleCONCAT
				{
					$current.merge(this_CONCAT_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTerm2Access().getPLUSParserRuleCall_1_0_1());
				}
				this_PLUS_2=rulePLUS
				{
					$current.merge(this_PLUS_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTerm2Access().getMINUSParserRuleCall_1_0_2());
				}
				this_MINUS_3=ruleMINUS
				{
					$current.merge(this_MINUS_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			{
				newCompositeNode(grammarAccess.getTerm2Access().getTermParserRuleCall_1_1());
			}
			this_Term_4=ruleTerm
			{
				$current.merge(this_Term_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current.getText(); }
	EOF;

// Rule Term
ruleTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0());
		}
		this_Factor_0=ruleFactor
		{
			$current.merge(this_Factor_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getSOLIDUSParserRuleCall_1_0_0());
				}
				this_SOLIDUS_1=ruleSOLIDUS
				{
					$current.merge(this_SOLIDUS_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTermAccess().getASTERISKParserRuleCall_1_0_1());
				}
				this_ASTERISK_2=ruleASTERISK
				{
					$current.merge(this_ASTERISK_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			{
				newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1());
			}
			this_Factor_3=ruleFactor
			{
				$current.merge(this_Factor_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current.getText(); }
	EOF;

// Rule Factor
ruleFactor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFactorAccess().getMINUSParserRuleCall_0_0());
			}
			this_MINUS_0=ruleMINUS
			{
				$current.merge(this_MINUS_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_0_1());
			}
			this_ValueExpressionPrimary_1=ruleValueExpressionPrimary
			{
				$current.merge(this_ValueExpressionPrimary_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFactorAccess().getPLUSParserRuleCall_1_0());
			}
			this_PLUS_2=rulePLUS
			{
				$current.merge(this_PLUS_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_1_1());
			}
			this_ValueExpressionPrimary_3=ruleValueExpressionPrimary
			{
				$current.merge(this_ValueExpressionPrimary_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getFactorAccess().getValueExpressionPrimaryParserRuleCall_2());
		}
		this_ValueExpressionPrimary_4=ruleValueExpressionPrimary
		{
			$current.merge(this_ValueExpressionPrimary_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current.getText(); }
	EOF;

// Rule Function
ruleFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getIdentifierParserRuleCall_0());
		}
		this_Identifier_0=ruleIdentifier
		{
			$current.merge(this_Identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getLPARENParserRuleCall_1());
		}
		this_LPAREN_1=ruleLPAREN
		{
			$current.merge(this_LPAREN_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getExpressionListParserRuleCall_2());
			}
			this_ExpressionList_2=ruleExpressionList
			{
				$current.merge(this_ExpressionList_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getRPARENParserRuleCall_3());
		}
		this_RPAREN_3=ruleRPAREN
		{
			$current.merge(this_RPAREN_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValueExpressionPrimary
entryRuleValueExpressionPrimary returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueExpressionPrimaryRule()); }
	iv_ruleValueExpressionPrimary=ruleValueExpressionPrimary
	{ $current=$iv_ruleValueExpressionPrimary.current.getText(); }
	EOF;

// Rule ValueExpressionPrimary
ruleValueExpressionPrimary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueExpressionPrimaryAccess().getValueExpressionPrimary0ParserRuleCall_0());
		}
		this_ValueExpressionPrimary0_0=ruleValueExpressionPrimary0
		{
			$current.merge(this_ValueExpressionPrimary0_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getValueExpressionPrimaryAccess().getDOTParserRuleCall_1_0());
			}
			this_DOT_1=ruleDOT
			{
				$current.merge(this_DOT_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getValueExpressionPrimaryAccess().getUnquotedIdentifierParserRuleCall_1_1_0());
				}
				this_UnquotedIdentifier_2=ruleUnquotedIdentifier
				{
					$current.merge(this_UnquotedIdentifier_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getValueExpressionPrimaryAccess().getQuotedIdentifierParserRuleCall_1_1_1());
				}
				this_QuotedIdentifier_3=ruleQuotedIdentifier
				{
					$current.merge(this_QuotedIdentifier_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getValueExpressionPrimaryAccess().getAmpQuotedIdentifierParserRuleCall_1_1_2());
				}
				this_AmpQuotedIdentifier_4=ruleAmpQuotedIdentifier
				{
					$current.merge(this_AmpQuotedIdentifier_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getValueExpressionPrimaryAccess().getFunctionParserRuleCall_1_1_3());
				}
				this_Function_5=ruleFunction
				{
					$current.merge(this_Function_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleValueExpressionPrimary0
entryRuleValueExpressionPrimary0 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueExpressionPrimary0Rule()); }
	iv_ruleValueExpressionPrimary0=ruleValueExpressionPrimary0
	{ $current=$iv_ruleValueExpressionPrimary0.current.getText(); }
	EOF;

// Rule ValueExpressionPrimary0
ruleValueExpressionPrimary0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getFunctionParserRuleCall_0());
		}
		this_Function_0=ruleFunction
		{
			$current.merge(this_Function_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getLPARENParserRuleCall_1_0());
			}
			this_LPAREN_1=ruleLPAREN
			{
				$current.merge(this_LPAREN_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getExpressionListParserRuleCall_1_1());
			}
			this_ExpressionList_2=ruleExpressionList
			{
				$current.merge(this_ExpressionList_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getRPARENParserRuleCall_1_2());
			}
			this_RPAREN_3=ruleRPAREN
			{
				$current.merge(this_RPAREN_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getLBRACEParserRuleCall_2_0());
			}
			this_LBRACE_4=ruleLBRACE
			{
				$current.merge(this_LBRACE_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getExpressionListParserRuleCall_2_1());
				}
				this_ExpressionList_5=ruleExpressionList
				{
					$current.merge(this_ExpressionList_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			{
				newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getRBRACEParserRuleCall_2_2());
			}
			this_RBRACE_6=ruleRBRACE
			{
				$current.merge(this_RBRACE_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getCaseExpressionParserRuleCall_3());
		}
		this_CaseExpression_7=ruleCaseExpression
		{
			$current.merge(this_CaseExpression_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_STRING_8=RULE_STRING
		{
			$current.merge(this_STRING_8);
		}
		{
			newLeafNode(this_STRING_8, grammarAccess.getValueExpressionPrimary0Access().getSTRINGTerminalRuleCall_4());
		}
		    |
		this_INT_9=RULE_INT
		{
			$current.merge(this_INT_9);
		}
		{
			newLeafNode(this_INT_9, grammarAccess.getValueExpressionPrimary0Access().getINTTerminalRuleCall_5());
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueExpressionPrimary0Access().getIdentifierParserRuleCall_6());
		}
		this_Identifier_10=ruleIdentifier
		{
			$current.merge(this_Identifier_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	iv_ruleExpressionList=ruleExpressionList
	{ $current=$iv_ruleExpressionList.current.getText(); }
	EOF;

// Rule ExpressionList
ruleExpressionList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current.merge(this_Expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getExpressionListAccess().getCOMMAParserRuleCall_1_0());
			}
			this_COMMA_1=ruleCOMMA
			{
				$current.merge(this_COMMA_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1());
			}
			this_Expression_2=ruleExpression
			{
				$current.merge(this_Expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleCaseExpression
entryRuleCaseExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCaseExpressionRule()); }
	iv_ruleCaseExpression=ruleCaseExpression
	{ $current=$iv_ruleCaseExpression.current.getText(); }
	EOF;

// Rule CaseExpression
ruleCaseExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=CASE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCaseExpressionAccess().getCASEKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getCaseExpressionAccess().getValueExpressionParserRuleCall_1());
			}
			this_ValueExpression_1=ruleValueExpression
			{
				$current.merge(this_ValueExpression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getCaseExpressionAccess().getWhenListParserRuleCall_2());
			}
			this_WhenList_2=ruleWhenList
			{
				$current.merge(this_WhenList_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw=ELSE
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCaseExpressionAccess().getELSEKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getCaseExpressionAccess().getValueExpressionParserRuleCall_3_1());
			}
			this_ValueExpression_4=ruleValueExpression
			{
				$current.merge(this_ValueExpression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=END
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCaseExpressionAccess().getENDKeyword_4());
		}
	)
;

// Entry rule entryRuleWhenList
entryRuleWhenList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWhenListRule()); }
	iv_ruleWhenList=ruleWhenList
	{ $current=$iv_ruleWhenList.current.getText(); }
	EOF;

// Rule WhenList
ruleWhenList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWhenListAccess().getWhenClauseParserRuleCall_0());
		}
		this_WhenClause_0=ruleWhenClause
		{
			$current.merge(this_WhenClause_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getWhenListAccess().getWhenClauseParserRuleCall_1());
			}
			this_WhenClause_1=ruleWhenClause
			{
				$current.merge(this_WhenClause_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleWhenClause
entryRuleWhenClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWhenClauseRule()); }
	iv_ruleWhenClause=ruleWhenClause
	{ $current=$iv_ruleWhenClause.current.getText(); }
	EOF;

// Rule WhenClause
ruleWhenClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=WHEN
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWhenClauseAccess().getWHENKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getWhenClauseAccess().getValueExpressionParserRuleCall_1());
		}
		this_ValueExpression_1=ruleValueExpression
		{
			$current.merge(this_ValueExpression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=THEN
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWhenClauseAccess().getTHENKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getWhenClauseAccess().getValueExpressionParserRuleCall_3());
		}
		this_ValueExpression_3=ruleValueExpression
		{
			$current.merge(this_ValueExpression_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCompatingOperator
entryRuleCompatingOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompatingOperatorRule()); }
	iv_ruleCompatingOperator=ruleCompatingOperator
	{ $current=$iv_ruleCompatingOperator.current.getText(); }
	EOF;

// Rule CompatingOperator
ruleCompatingOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompatingOperatorAccess().getEQParserRuleCall_0());
		}
		this_EQ_0=ruleEQ
		{
			$current.merge(this_EQ_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCompatingOperatorAccess().getNEParserRuleCall_1());
		}
		this_NE_1=ruleNE
		{
			$current.merge(this_NE_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCompatingOperatorAccess().getLTParserRuleCall_2());
		}
		this_LT_2=ruleLT
		{
			$current.merge(this_LT_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCompatingOperatorAccess().getGTParserRuleCall_3());
		}
		this_GT_3=ruleGT
		{
			$current.merge(this_GT_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCompatingOperatorAccess().getLEParserRuleCall_4());
		}
		this_LE_4=ruleLE
		{
			$current.merge(this_LE_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCompatingOperatorAccess().getGEParserRuleCall_5());
		}
		this_GE_5=ruleGE
		{
			$current.merge(this_GE_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleIdentifier=ruleIdentifier
	{ $current=$iv_ruleIdentifier.current.getText(); }
	EOF;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIdentifierAccess().getUnquotedIdentifierParserRuleCall_0());
		}
		this_UnquotedIdentifier_0=ruleUnquotedIdentifier
		{
			$current.merge(this_UnquotedIdentifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIdentifierAccess().getQuotedIdentifierParserRuleCall_1());
		}
		this_QuotedIdentifier_1=ruleQuotedIdentifier
		{
			$current.merge(this_QuotedIdentifier_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnquotedIdentifier
entryRuleUnquotedIdentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnquotedIdentifierRule()); }
	iv_ruleUnquotedIdentifier=ruleUnquotedIdentifier
	{ $current=$iv_ruleUnquotedIdentifier.current.getText(); }
	EOF;

// Rule UnquotedIdentifier
ruleUnquotedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnquotedIdentifierAccess().getKeywordParserRuleCall_0());
		}
		this_Keyword_0=ruleKeyword
		{
			$current.merge(this_Keyword_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getUnquotedIdentifierAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleAmpQuotedIdentifier
entryRuleAmpQuotedIdentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAmpQuotedIdentifierRule()); }
	iv_ruleAmpQuotedIdentifier=ruleAmpQuotedIdentifier
	{ $current=$iv_ruleAmpQuotedIdentifier.current.getText(); }
	EOF;

// Rule AmpQuotedIdentifier
ruleAmpQuotedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_AMP_QUOTED_ID_0=RULE_AMP_QUOTED_ID
	{
		$current.merge(this_AMP_QUOTED_ID_0);
	}
	{
		newLeafNode(this_AMP_QUOTED_ID_0, grammarAccess.getAmpQuotedIdentifierAccess().getAMP_QUOTED_IDTerminalRuleCall());
	}
;

// Entry rule entryRuleQuotedIdentifier
entryRuleQuotedIdentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuotedIdentifierRule()); }
	iv_ruleQuotedIdentifier=ruleQuotedIdentifier
	{ $current=$iv_ruleQuotedIdentifier.current.getText(); }
	EOF;

// Rule QuotedIdentifier
ruleQuotedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_QUOTED_ID_0=RULE_QUOTED_ID
	{
		$current.merge(this_QUOTED_ID_0);
	}
	{
		newLeafNode(this_QUOTED_ID_0, grammarAccess.getQuotedIdentifierAccess().getQUOTED_IDTerminalRuleCall());
	}
;

// Entry rule entryRuleKeyword
entryRuleKeyword returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKeywordRule()); }
	iv_ruleKeyword=ruleKeyword
	{ $current=$iv_ruleKeyword.current.getText(); }
	EOF;

// Rule Keyword
ruleKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=DIMENSION
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKeywordAccess().getDIMENSIONKeyword_0());
		}
		    |
		kw=PROPERTIES
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKeywordAccess().getPROPERTIESKeyword_1());
		}
	)
;

// Entry rule entryRuleQUOTE
entryRuleQUOTE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQUOTERule()); }
	iv_ruleQUOTE=ruleQUOTE
	{ $current=$iv_ruleQUOTE.current.getText(); }
	EOF;

// Rule QUOTE
ruleQUOTE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Apostrophe
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getQUOTEAccess().getApostropheKeyword());
	}
;

// Entry rule entryRuleASTERISK
entryRuleASTERISK returns [String current=null]:
	{ newCompositeNode(grammarAccess.getASTERISKRule()); }
	iv_ruleASTERISK=ruleASTERISK
	{ $current=$iv_ruleASTERISK.current.getText(); }
	EOF;

// Rule ASTERISK
ruleASTERISK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Asterisk
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getASTERISKAccess().getAsteriskKeyword());
	}
;

// Entry rule entryRuleCOLON
entryRuleCOLON returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOLONRule()); }
	iv_ruleCOLON=ruleCOLON
	{ $current=$iv_ruleCOLON.current.getText(); }
	EOF;

// Rule COLON
ruleCOLON returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Colon
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOLONAccess().getColonKeyword());
	}
;

// Entry rule entryRuleCOMMA
entryRuleCOMMA returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOMMARule()); }
	iv_ruleCOMMA=ruleCOMMA
	{ $current=$iv_ruleCOMMA.current.getText(); }
	EOF;

// Rule COMMA
ruleCOMMA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Comma
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOMMAAccess().getCommaKeyword());
	}
;

// Entry rule entryRuleCONCAT
entryRuleCONCAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCONCATRule()); }
	iv_ruleCONCAT=ruleCONCAT
	{ $current=$iv_ruleCONCAT.current.getText(); }
	EOF;

// Rule CONCAT
ruleCONCAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=VerticalLineVerticalLine
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCONCATAccess().getVerticalLineVerticalLineKeyword());
	}
;

// Entry rule entryRuleDOT
entryRuleDOT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOTRule()); }
	iv_ruleDOT=ruleDOT
	{ $current=$iv_ruleDOT.current.getText(); }
	EOF;

// Rule DOT
ruleDOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=FullStop
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDOTAccess().getFullStopKeyword());
	}
;

// Entry rule entryRuleEQ
entryRuleEQ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEQRule()); }
	iv_ruleEQ=ruleEQ
	{ $current=$iv_ruleEQ.current.getText(); }
	EOF;

// Rule EQ
ruleEQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=EqualsSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEQAccess().getEqualsSignKeyword());
	}
;

// Entry rule entryRuleGE
entryRuleGE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGERule()); }
	iv_ruleGE=ruleGE
	{ $current=$iv_ruleGE.current.getText(); }
	EOF;

// Rule GE
ruleGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=GreaterThanSignEqualsSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getGEAccess().getGreaterThanSignEqualsSignKeyword());
	}
;

// Entry rule entryRuleGT
entryRuleGT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGTRule()); }
	iv_ruleGT=ruleGT
	{ $current=$iv_ruleGT.current.getText(); }
	EOF;

// Rule GT
ruleGT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=GreaterThanSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getGTAccess().getGreaterThanSignKeyword());
	}
;

// Entry rule entryRuleLBRACE
entryRuleLBRACE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLBRACERule()); }
	iv_ruleLBRACE=ruleLBRACE
	{ $current=$iv_ruleLBRACE.current.getText(); }
	EOF;

// Rule LBRACE
ruleLBRACE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LeftCurlyBracket
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLBRACEAccess().getLeftCurlyBracketKeyword());
	}
;

// Entry rule entryRuleLE
entryRuleLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLERule()); }
	iv_ruleLE=ruleLE
	{ $current=$iv_ruleLE.current.getText(); }
	EOF;

// Rule LE
ruleLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LessThanSignEqualsSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLEAccess().getLessThanSignEqualsSignKeyword());
	}
;

// Entry rule entryRuleLPAREN
entryRuleLPAREN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLPARENRule()); }
	iv_ruleLPAREN=ruleLPAREN
	{ $current=$iv_ruleLPAREN.current.getText(); }
	EOF;

// Rule LPAREN
ruleLPAREN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LeftParenthesis
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLPARENAccess().getLeftParenthesisKeyword());
	}
;

// Entry rule entryRuleLT
entryRuleLT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLTRule()); }
	iv_ruleLT=ruleLT
	{ $current=$iv_ruleLT.current.getText(); }
	EOF;

// Rule LT
ruleLT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LessThanSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLTAccess().getLessThanSignKeyword());
	}
;

// Entry rule entryRuleMINUS
entryRuleMINUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMINUSRule()); }
	iv_ruleMINUS=ruleMINUS
	{ $current=$iv_ruleMINUS.current.getText(); }
	EOF;

// Rule MINUS
ruleMINUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=HyphenMinus
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMINUSAccess().getHyphenMinusKeyword());
	}
;

// Entry rule entryRuleNE
entryRuleNE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNERule()); }
	iv_ruleNE=ruleNE
	{ $current=$iv_ruleNE.current.getText(); }
	EOF;

// Rule NE
ruleNE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LessThanSignGreaterThanSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNEAccess().getLessThanSignGreaterThanSignKeyword());
	}
;

// Entry rule entryRulePLUS
entryRulePLUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPLUSRule()); }
	iv_rulePLUS=rulePLUS
	{ $current=$iv_rulePLUS.current.getText(); }
	EOF;

// Rule PLUS
rulePLUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=PlusSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPLUSAccess().getPlusSignKeyword());
	}
;

// Entry rule entryRuleRBRACE
entryRuleRBRACE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRBRACERule()); }
	iv_ruleRBRACE=ruleRBRACE
	{ $current=$iv_ruleRBRACE.current.getText(); }
	EOF;

// Rule RBRACE
ruleRBRACE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=RightCurlyBracket
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRBRACEAccess().getRightCurlyBracketKeyword());
	}
;

// Entry rule entryRuleRPAREN
entryRuleRPAREN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRPARENRule()); }
	iv_ruleRPAREN=ruleRPAREN
	{ $current=$iv_ruleRPAREN.current.getText(); }
	EOF;

// Rule RPAREN
ruleRPAREN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=RightParenthesis
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRPARENAccess().getRightParenthesisKeyword());
	}
;

// Entry rule entryRuleSOLIDUS
entryRuleSOLIDUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSOLIDUSRule()); }
	iv_ruleSOLIDUS=ruleSOLIDUS
	{ $current=$iv_ruleSOLIDUS.current.getText(); }
	EOF;

// Rule SOLIDUS
ruleSOLIDUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Solidus
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSOLIDUSAccess().getSolidusKeyword());
	}
;
