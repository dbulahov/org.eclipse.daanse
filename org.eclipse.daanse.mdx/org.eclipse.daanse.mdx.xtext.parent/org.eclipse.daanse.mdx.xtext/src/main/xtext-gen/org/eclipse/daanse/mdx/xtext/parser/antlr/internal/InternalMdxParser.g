/*
 * generated by Xtext 2.28.0
 */
parser grammar InternalMdxParser;

options {
	tokenVocab=InternalMdxLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.eclipse.daanse.mdx.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.daanse.mdx.xtext.services.MdxGrammarAccess;

}

@members {

 	private MdxGrammarAccess grammarAccess;

    public InternalMdxParser(TokenStream input, MdxGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MdxStatement";
   	}

   	@Override
   	protected MdxGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMdxStatement
entryRuleMdxStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMdxStatementRule()); }
	iv_ruleMdxStatement=ruleMdxStatement
	{ $current=$iv_ruleMdxStatement.current; }
	EOF;

// Rule MdxStatement
ruleMdxStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getMdxStatementAccess().getSelectStatementParserRuleCall());
	}
	this_SelectStatement_0=ruleSelectStatement
	{
		$current = $this_SelectStatement_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	iv_ruleSelectStatement=ruleSelectStatement
	{ $current=$iv_ruleSelectStatement.current; }
	EOF;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSelectStatementAccess().getSelectStatementAction_0(),
					$current);
			}
		)
		(
			otherlv_1=WITH
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectStatementAccess().getWITHKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getSelectStatementAccess().getFormulaSpecificationParserRuleCall_1_1());
			}
			ruleFormulaSpecification
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_3=SELECT
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectStatementAccess().getSELECTKeyword_2());
		}
		(
			{
				newCompositeNode(grammarAccess.getSelectStatementAccess().getAxis_specification_listParserRuleCall_3());
			}
			ruleaxis_specification_list
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_5=FROM
		{
			newLeafNode(otherlv_5, grammarAccess.getSelectStatementAccess().getFROMKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getSelectStatementAccess().getCube_specificationParserRuleCall_5());
		}
		rulecube_specification
		{
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_7=WHERE
			{
				newLeafNode(otherlv_7, grammarAccess.getSelectStatementAccess().getWHEREKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getSelectStatementAccess().getSlicer_specificationParserRuleCall_6_1());
			}
			ruleslicer_specification
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getSelectStatementAccess().getCell_propsParserRuleCall_7());
			}
			rulecell_props
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleFormulaSpecification
entryRuleFormulaSpecification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFormulaSpecificationRule()); }
	iv_ruleFormulaSpecification=ruleFormulaSpecification
	{ $current=$iv_ruleFormulaSpecification.current.getText(); }
	EOF;

// Rule FormulaSpecification
ruleFormulaSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFormulaSpecificationAccess().getSingle_formula_specificationParserRuleCall());
		}
		this_single_formula_specification_0=rulesingle_formula_specification
		{
			$current.merge(this_single_formula_specification_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRulesingle_formula_specification
entryRulesingle_formula_specification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSingle_formula_specificationRule()); }
	iv_rulesingle_formula_specification=rulesingle_formula_specification
	{ $current=$iv_rulesingle_formula_specification.current.getText(); }
	EOF;

// Rule single_formula_specification
rulesingle_formula_specification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSingle_formula_specificationAccess().getMember_specificationParserRuleCall_0());
		}
		this_member_specification_0=rulemember_specification
		{
			$current.merge(this_member_specification_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSingle_formula_specificationAccess().getSet_specificationParserRuleCall_1());
		}
		this_set_specification_1=ruleset_specification
		{
			$current.merge(this_set_specification_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleset_specification
entryRuleset_specification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSet_specificationRule()); }
	iv_ruleset_specification=ruleset_specification
	{ $current=$iv_ruleset_specification.current.getText(); }
	EOF;

// Rule set_specification
ruleset_specification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=SET
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSet_specificationAccess().getSETKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSet_specificationAccess().getSet_nameParserRuleCall_1());
		}
		this_set_name_1=ruleset_name
		{
			$current.merge(this_set_name_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=AS
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSet_specificationAccess().getASKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSet_specificationAccess().getQUOTEParserRuleCall_3_0_0());
				}
				this_QUOTE_3=ruleQUOTE
				{
					$current.merge(this_QUOTE_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getSet_specificationAccess().getExpressionParserRuleCall_3_0_1());
				}
				this_expression_4=ruleexpression
				{
					$current.merge(this_expression_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getSet_specificationAccess().getQUOTEParserRuleCall_3_0_2());
				}
				this_QUOTE_5=ruleQUOTE
				{
					$current.merge(this_QUOTE_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getSet_specificationAccess().getExpressionParserRuleCall_3_1());
			}
			this_expression_6=ruleexpression
			{
				$current.merge(this_expression_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulemember_specification
entryRulemember_specification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMember_specificationRule()); }
	iv_rulemember_specification=rulemember_specification
	{ $current=$iv_rulemember_specification.current.getText(); }
	EOF;

// Rule member_specification
rulemember_specification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=MEMBER
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMember_specificationAccess().getMEMBERKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getMember_specificationAccess().getMember_nameParserRuleCall_1());
		}
		this_member_name_1=rulemember_name
		{
			$current.merge(this_member_name_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=AS
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMember_specificationAccess().getASKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMember_specificationAccess().getQUOTEParserRuleCall_3_0_0_0());
					}
					this_QUOTE_3=ruleQUOTE
					{
						$current.merge(this_QUOTE_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getMember_specificationAccess().getValue_expressionParserRuleCall_3_0_0_1());
					}
					this_value_expression_4=rulevalue_expression
					{
						$current.merge(this_value_expression_4);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getMember_specificationAccess().getQUOTEParserRuleCall_3_0_0_2());
					}
					this_QUOTE_5=ruleQUOTE
					{
						$current.merge(this_QUOTE_5);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)
				    |
				{
					newCompositeNode(grammarAccess.getMember_specificationAccess().getValue_expressionParserRuleCall_3_0_1());
				}
				this_value_expression_6=rulevalue_expression
				{
					$current.merge(this_value_expression_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			{
				newCompositeNode(grammarAccess.getMember_specificationAccess().getCOMMAParserRuleCall_3_1());
			}
			this_COMMA_7=ruleCOMMA
			{
				$current.merge(this_COMMA_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getMember_specificationAccess().getMember_property_def_listParserRuleCall_3_2());
				}
				this_member_property_def_list_8=rulemember_property_def_list
				{
					$current.merge(this_member_property_def_list_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuleaxis_specification_list
entryRuleaxis_specification_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAxis_specification_listRule()); }
	iv_ruleaxis_specification_list=ruleaxis_specification_list
	{ $current=$iv_ruleaxis_specification_list.current.getText(); }
	EOF;

// Rule axis_specification_list
ruleaxis_specification_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAxis_specification_listAccess().getAxis_specificationParserRuleCall_0());
		}
		this_axis_specification_0=ruleaxis_specification
		{
			$current.merge(this_axis_specification_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getAxis_specification_listAccess().getCOMMAParserRuleCall_1_0());
			}
			this_COMMA_1=ruleCOMMA
			{
				$current.merge(this_COMMA_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAxis_specification_listAccess().getAxis_specificationParserRuleCall_1_1());
			}
			this_axis_specification_2=ruleaxis_specification
			{
				$current.merge(this_axis_specification_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulemember_property_def_list
entryRulemember_property_def_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMember_property_def_listRule()); }
	iv_rulemember_property_def_list=rulemember_property_def_list
	{ $current=$iv_rulemember_property_def_list.current.getText(); }
	EOF;

// Rule member_property_def_list
rulemember_property_def_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMember_property_def_listAccess().getMember_property_definitionParserRuleCall_0());
		}
		this_member_property_definition_0=rulemember_property_definition
		{
			$current.merge(this_member_property_definition_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getMember_property_def_listAccess().getCOMMAParserRuleCall_1_0());
			}
			this_COMMA_1=ruleCOMMA
			{
				$current.merge(this_COMMA_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getMember_property_def_listAccess().getMember_property_definitionParserRuleCall_1_1());
			}
			this_member_property_definition_2=rulemember_property_definition
			{
				$current.merge(this_member_property_definition_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulemember_name
entryRulemember_name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMember_nameRule()); }
	iv_rulemember_name=rulemember_name
	{ $current=$iv_rulemember_name.current.getText(); }
	EOF;

// Rule member_name
rulemember_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getMember_nameAccess().getCompound_idParserRuleCall());
	}
	this_compound_id_0=rulecompound_id
	{
		$current.merge(this_compound_id_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulemember_property_definition
entryRulemember_property_definition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMember_property_definitionRule()); }
	iv_rulemember_property_definition=rulemember_property_definition
	{ $current=$iv_rulemember_property_definition.current.getText(); }
	EOF;

// Rule member_property_definition
rulemember_property_definition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMember_property_definitionAccess().getIdentifierParserRuleCall_0());
		}
		this_identifier_0=ruleidentifier
		{
			$current.merge(this_identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getMember_property_definitionAccess().getEQParserRuleCall_1());
		}
		this_EQ_1=ruleEQ
		{
			$current.merge(this_EQ_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getMember_property_definitionAccess().getValue_expressionParserRuleCall_2());
		}
		this_value_expression_2=rulevalue_expression
		{
			$current.merge(this_value_expression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleset_name
entryRuleset_name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSet_nameRule()); }
	iv_ruleset_name=ruleset_name
	{ $current=$iv_ruleset_name.current.getText(); }
	EOF;

// Rule set_name
ruleset_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSet_nameAccess().getCompound_idParserRuleCall());
	}
	this_compound_id_0=rulecompound_id
	{
		$current.merge(this_compound_id_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulecompound_id
entryRulecompound_id returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompound_idRule()); }
	iv_rulecompound_id=rulecompound_id
	{ $current=$iv_rulecompound_id.current.getText(); }
	EOF;

// Rule compound_id
rulecompound_id returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompound_idAccess().getIdentifierParserRuleCall_0());
		}
		this_identifier_0=ruleidentifier
		{
			$current.merge(this_identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getCompound_idAccess().getDOTParserRuleCall_1_0());
			}
			this_DOT_1=ruleDOT
			{
				$current.merge(this_DOT_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getCompound_idAccess().getIdentifierParserRuleCall_1_1());
			}
			this_identifier_2=ruleidentifier
			{
				$current.merge(this_identifier_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleaxis_specification
entryRuleaxis_specification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAxis_specificationRule()); }
	iv_ruleaxis_specification=ruleaxis_specification
	{ $current=$iv_ruleaxis_specification.current.getText(); }
	EOF;

// Rule axis_specification
ruleaxis_specification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=NON
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAxis_specificationAccess().getNONKeyword_0_0());
			}
			kw=EMPTY
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAxis_specificationAccess().getEMPTYKeyword_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getAxis_specificationAccess().getExpressionParserRuleCall_1());
		}
		this_expression_2=ruleexpression
		{
			$current.merge(this_expression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getAxis_specificationAccess().getDim_propsParserRuleCall_2());
			}
			this_dim_props_3=ruledim_props
			{
				$current.merge(this_dim_props_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=ON
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAxis_specificationAccess().getONKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getAxis_specificationAccess().getAxis_nameParserRuleCall_4());
		}
		this_axis_name_5=ruleaxis_name
		{
			$current.merge(this_axis_name_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleaxis_name
entryRuleaxis_name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAxis_nameRule()); }
	iv_ruleaxis_name=ruleaxis_name
	{ $current=$iv_ruleaxis_name.current.getText(); }
	EOF;

// Rule axis_name
ruleaxis_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAxis_nameAccess().getIdentifierParserRuleCall());
	}
	this_identifier_0=ruleidentifier
	{
		$current.merge(this_identifier_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuledim_props
entryRuledim_props returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDim_propsRule()); }
	iv_ruledim_props=ruledim_props
	{ $current=$iv_ruledim_props.current.getText(); }
	EOF;

// Rule dim_props
ruledim_props returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=DIMENSION
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDim_propsAccess().getDIMENSIONKeyword_0());
			}
		)?
		kw=PROPERTIES
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDim_propsAccess().getPROPERTIESKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getDim_propsAccess().getProperty_listParserRuleCall_2());
		}
		this_property_list_2=ruleproperty_list
		{
			$current.merge(this_property_list_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleproperty_list
entryRuleproperty_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProperty_listRule()); }
	iv_ruleproperty_list=ruleproperty_list
	{ $current=$iv_ruleproperty_list.current.getText(); }
	EOF;

// Rule property_list
ruleproperty_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProperty_listAccess().getPropertyParserRuleCall_0());
		}
		this_property_0=ruleproperty
		{
			$current.merge(this_property_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getProperty_listAccess().getCOMMAParserRuleCall_1_0());
			}
			this_COMMA_1=ruleCOMMA
			{
				$current.merge(this_COMMA_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getProperty_listAccess().getPropertyParserRuleCall_1_1());
			}
			this_property_2=ruleproperty
			{
				$current.merge(this_property_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleproperty
entryRuleproperty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleproperty=ruleproperty
	{ $current=$iv_ruleproperty.current.getText(); }
	EOF;

// Rule property
ruleproperty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPropertyAccess().getCompound_idParserRuleCall());
	}
	this_compound_id_0=rulecompound_id
	{
		$current.merge(this_compound_id_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulecube_specification
entryRulecube_specification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCube_specificationRule()); }
	iv_rulecube_specification=rulecube_specification
	{ $current=$iv_rulecube_specification.current.getText(); }
	EOF;

// Rule cube_specification
rulecube_specification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getCube_specificationAccess().getCube_nameParserRuleCall());
	}
	this_cube_name_0=rulecube_name
	{
		$current.merge(this_cube_name_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulecube_name
entryRulecube_name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCube_nameRule()); }
	iv_rulecube_name=rulecube_name
	{ $current=$iv_rulecube_name.current.getText(); }
	EOF;

// Rule cube_name
rulecube_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getCube_nameAccess().getCompound_idParserRuleCall());
	}
	this_compound_id_0=rulecompound_id
	{
		$current.merge(this_compound_id_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleslicer_specification
entryRuleslicer_specification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSlicer_specificationRule()); }
	iv_ruleslicer_specification=ruleslicer_specification
	{ $current=$iv_ruleslicer_specification.current.getText(); }
	EOF;

// Rule slicer_specification
ruleslicer_specification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSlicer_specificationAccess().getExpressionParserRuleCall());
	}
	this_expression_0=ruleexpression
	{
		$current.merge(this_expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulecell_props
entryRulecell_props returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCell_propsRule()); }
	iv_rulecell_props=rulecell_props
	{ $current=$iv_rulecell_props.current.getText(); }
	EOF;

// Rule cell_props
rulecell_props returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=CELL
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCell_propsAccess().getCELLKeyword_0());
			}
		)?
		kw=PROPERTIES
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCell_propsAccess().getPROPERTIESKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getCell_propsAccess().getCell_property_listParserRuleCall_2());
		}
		this_cell_property_list_2=rulecell_property_list
		{
			$current.merge(this_cell_property_list_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulecell_property_list
entryRulecell_property_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCell_property_listRule()); }
	iv_rulecell_property_list=rulecell_property_list
	{ $current=$iv_rulecell_property_list.current.getText(); }
	EOF;

// Rule cell_property_list
rulecell_property_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCell_property_listAccess().getCell_propertyParserRuleCall_0());
		}
		this_cell_property_0=rulecell_property
		{
			$current.merge(this_cell_property_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getCell_property_listAccess().getCOMMAParserRuleCall_1());
		}
		this_COMMA_1=ruleCOMMA
		{
			$current.merge(this_COMMA_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getCell_property_listAccess().getCell_propertyParserRuleCall_2());
			}
			this_cell_property_2=rulecell_property
			{
				$current.merge(this_cell_property_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulecell_property
entryRulecell_property returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCell_propertyRule()); }
	iv_rulecell_property=rulecell_property
	{ $current=$iv_rulecell_property.current.getText(); }
	EOF;

// Rule cell_property
rulecell_property returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCell_propertyAccess().getMandatory_cell_propertyParserRuleCall_0());
		}
		this_mandatory_cell_property_0=rulemandatory_cell_property
		{
			$current.merge(this_mandatory_cell_property_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCell_propertyAccess().getProvider_specific_cell_propertyParserRuleCall_1());
		}
		this_provider_specific_cell_property_1=ruleprovider_specific_cell_property
		{
			$current.merge(this_provider_specific_cell_property_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulemandatory_cell_property
entryRulemandatory_cell_property returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMandatory_cell_propertyRule()); }
	iv_rulemandatory_cell_property=rulemandatory_cell_property
	{ $current=$iv_rulemandatory_cell_property.current.getText(); }
	EOF;

// Rule mandatory_cell_property
rulemandatory_cell_property returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=CELL_ORDINAL
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMandatory_cell_propertyAccess().getCELL_ORDINALKeyword_0());
		}
		    |
		kw=VALUE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMandatory_cell_propertyAccess().getVALUEKeyword_1());
		}
		    |
		kw=FORMATTED_VALUE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMandatory_cell_propertyAccess().getFORMATTED_VALUEKeyword_2());
		}
	)
;

// Entry rule entryRuleprovider_specific_cell_property
entryRuleprovider_specific_cell_property returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProvider_specific_cell_propertyRule()); }
	iv_ruleprovider_specific_cell_property=ruleprovider_specific_cell_property
	{ $current=$iv_ruleprovider_specific_cell_property.current.getText(); }
	EOF;

// Rule provider_specific_cell_property
ruleprovider_specific_cell_property returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getProvider_specific_cell_propertyAccess().getIdentifierParserRuleCall());
	}
	this_identifier_0=ruleidentifier
	{
		$current.merge(this_identifier_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current.getText(); }
	EOF;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getValue_expressionParserRuleCall_0());
		}
		this_value_expression_0=rulevalue_expression
		{
			$current.merge(this_value_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getCOLONParserRuleCall_1_0());
			}
			this_COLON_1=ruleCOLON
			{
				$current.merge(this_COLON_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getValue_expressionParserRuleCall_1_1());
			}
			this_value_expression_2=rulevalue_expression
			{
				$current.merge(this_value_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulevalue_expression
entryRulevalue_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValue_expressionRule()); }
	iv_rulevalue_expression=rulevalue_expression
	{ $current=$iv_rulevalue_expression.current.getText(); }
	EOF;

// Rule value_expression
rulevalue_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValue_expressionAccess().getTerm5ParserRuleCall_0());
		}
		this_term5_0=ruleterm5
		{
			$current.merge(this_term5_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getValue_expressionAccess().getValue_xor_expressionParserRuleCall_1_0());
			}
			this_value_xor_expression_1=rulevalue_xor_expression
			{
				$current.merge(this_value_xor_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getValue_expressionAccess().getValue_or_expressionParserRuleCall_1_1());
			}
			this_value_or_expression_2=rulevalue_or_expression
			{
				$current.merge(this_value_or_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulevalue_xor_expression
entryRulevalue_xor_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValue_xor_expressionRule()); }
	iv_rulevalue_xor_expression=rulevalue_xor_expression
	{ $current=$iv_rulevalue_xor_expression.current.getText(); }
	EOF;

// Rule value_xor_expression
rulevalue_xor_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=XOR
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getValue_xor_expressionAccess().getXORKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getValue_xor_expressionAccess().getTerm5ParserRuleCall_1());
		}
		this_term5_1=ruleterm5
		{
			$current.merge(this_term5_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulevalue_or_expression
entryRulevalue_or_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValue_or_expressionRule()); }
	iv_rulevalue_or_expression=rulevalue_or_expression
	{ $current=$iv_rulevalue_or_expression.current.getText(); }
	EOF;

// Rule value_or_expression
rulevalue_or_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=OR
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getValue_or_expressionAccess().getORKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getValue_or_expressionAccess().getTerm5ParserRuleCall_1());
		}
		this_term5_1=ruleterm5
		{
			$current.merge(this_term5_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleterm5
entryRuleterm5 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerm5Rule()); }
	iv_ruleterm5=ruleterm5
	{ $current=$iv_ruleterm5.current.getText(); }
	EOF;

// Rule term5
ruleterm5 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_0());
		}
		this_term4_0=ruleterm4
		{
			$current.merge(this_term4_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=AND
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTerm5Access().getANDKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getTerm5Access().getTerm4ParserRuleCall_1_1());
			}
			this_term4_2=ruleterm4
			{
				$current.merge(this_term4_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleterm4
entryRuleterm4 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerm4Rule()); }
	iv_ruleterm4=ruleterm4
	{ $current=$iv_ruleterm4.current.getText(); }
	EOF;

// Rule term4
ruleterm4 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=NOT
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTerm4Access().getNOTKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTerm4Access().getTerm4ParserRuleCall_0_1());
			}
			this_term4_1=ruleterm4
			{
				$current.merge(this_term4_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTerm4Access().getTerm3ParserRuleCall_1());
		}
		this_term3_2=ruleterm3
		{
			$current.merge(this_term3_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleterm3
entryRuleterm3 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerm3Rule()); }
	iv_ruleterm3=ruleterm3
	{ $current=$iv_ruleterm3.current.getText(); }
	EOF;

// Rule term3
ruleterm3 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_0());
		}
		this_term2_0=ruleterm2
		{
			$current.merge(this_term2_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getTerm3Access().getComp_opParserRuleCall_1_0());
			}
			this_comp_op_1=rulecomp_op
			{
				$current.merge(this_comp_op_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getTerm3Access().getTerm2ParserRuleCall_1_1());
			}
			this_term2_2=ruleterm2
			{
				$current.merge(this_term2_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleterm2
entryRuleterm2 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerm2Rule()); }
	iv_ruleterm2=ruleterm2
	{ $current=$iv_ruleterm2.current.getText(); }
	EOF;

// Rule term2
ruleterm2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerm2Access().getTermParserRuleCall_0());
		}
		this_term_0=ruleterm
		{
			$current.merge(this_term_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerm2Access().getCONCATParserRuleCall_1_0_0());
				}
				this_CONCAT_1=ruleCONCAT
				{
					$current.merge(this_CONCAT_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTerm2Access().getPLUSParserRuleCall_1_0_1());
				}
				this_PLUS_2=rulePLUS
				{
					$current.merge(this_PLUS_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTerm2Access().getMINUSParserRuleCall_1_0_2());
				}
				this_MINUS_3=ruleMINUS
				{
					$current.merge(this_MINUS_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			{
				newCompositeNode(grammarAccess.getTerm2Access().getTermParserRuleCall_1_1());
			}
			this_term_4=ruleterm
			{
				$current.merge(this_term_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleterm
entryRuleterm returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current.getText(); }
	EOF;

// Rule term
ruleterm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0());
		}
		this_factor_0=rulefactor
		{
			$current.merge(this_factor_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getSOLIDUSParserRuleCall_1_0_0());
				}
				this_SOLIDUS_1=ruleSOLIDUS
				{
					$current.merge(this_SOLIDUS_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getTermAccess().getASTERISKParserRuleCall_1_0_1());
				}
				this_ASTERISK_2=ruleASTERISK
				{
					$current.merge(this_ASTERISK_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			{
				newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1());
			}
			this_factor_3=rulefactor
			{
				$current.merge(this_factor_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulefactor
entryRulefactor returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_rulefactor=rulefactor
	{ $current=$iv_rulefactor.current.getText(); }
	EOF;

// Rule factor
rulefactor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFactorAccess().getMINUSParserRuleCall_0_0());
			}
			this_MINUS_0=ruleMINUS
			{
				$current.merge(this_MINUS_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_0_1());
			}
			this_value_expression_primary_1=rulevalue_expression_primary
			{
				$current.merge(this_value_expression_primary_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFactorAccess().getPLUSParserRuleCall_1_0());
			}
			this_PLUS_2=rulePLUS
			{
				$current.merge(this_PLUS_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_1_1());
			}
			this_value_expression_primary_3=rulevalue_expression_primary
			{
				$current.merge(this_value_expression_primary_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getFactorAccess().getValue_expression_primaryParserRuleCall_2());
		}
		this_value_expression_primary_4=rulevalue_expression_primary
		{
			$current.merge(this_value_expression_primary_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulefunction
entryRulefunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_rulefunction=rulefunction
	{ $current=$iv_rulefunction.current.getText(); }
	EOF;

// Rule function
rulefunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getIdentifierParserRuleCall_0());
		}
		this_identifier_0=ruleidentifier
		{
			$current.merge(this_identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getLPARENParserRuleCall_1());
		}
		this_LPAREN_1=ruleLPAREN
		{
			$current.merge(this_LPAREN_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getExp_listParserRuleCall_2());
			}
			this_exp_list_2=ruleexp_list
			{
				$current.merge(this_exp_list_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getRPARENParserRuleCall_3());
		}
		this_RPAREN_3=ruleRPAREN
		{
			$current.merge(this_RPAREN_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulevalue_expression_primary
entryRulevalue_expression_primary returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValue_expression_primaryRule()); }
	iv_rulevalue_expression_primary=rulevalue_expression_primary
	{ $current=$iv_rulevalue_expression_primary.current.getText(); }
	EOF;

// Rule value_expression_primary
rulevalue_expression_primary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValue_expression_primaryAccess().getValue_expression_primary0ParserRuleCall_0());
		}
		this_value_expression_primary0_0=rulevalue_expression_primary0
		{
			$current.merge(this_value_expression_primary0_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getValue_expression_primaryAccess().getDOTParserRuleCall_1_0());
			}
			this_DOT_1=ruleDOT
			{
				$current.merge(this_DOT_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getValue_expression_primaryAccess().getUnquoted_identifierParserRuleCall_1_1_0());
				}
				this_unquoted_identifier_2=ruleunquoted_identifier
				{
					$current.merge(this_unquoted_identifier_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getValue_expression_primaryAccess().getQuoted_identifierParserRuleCall_1_1_1());
				}
				this_quoted_identifier_3=rulequoted_identifier
				{
					$current.merge(this_quoted_identifier_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getValue_expression_primaryAccess().getAmp_quoted_identifierParserRuleCall_1_1_2());
				}
				this_amp_quoted_identifier_4=ruleamp_quoted_identifier
				{
					$current.merge(this_amp_quoted_identifier_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getValue_expression_primaryAccess().getFunctionParserRuleCall_1_1_3());
				}
				this_function_5=rulefunction
				{
					$current.merge(this_function_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulevalue_expression_primary0
entryRulevalue_expression_primary0 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValue_expression_primary0Rule()); }
	iv_rulevalue_expression_primary0=rulevalue_expression_primary0
	{ $current=$iv_rulevalue_expression_primary0.current.getText(); }
	EOF;

// Rule value_expression_primary0
rulevalue_expression_primary0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValue_expression_primary0Access().getFunctionParserRuleCall_0());
		}
		this_function_0=rulefunction
		{
			$current.merge(this_function_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getValue_expression_primary0Access().getLPARENParserRuleCall_1_0());
			}
			this_LPAREN_1=ruleLPAREN
			{
				$current.merge(this_LPAREN_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getValue_expression_primary0Access().getExp_listParserRuleCall_1_1());
			}
			this_exp_list_2=ruleexp_list
			{
				$current.merge(this_exp_list_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getValue_expression_primary0Access().getRPARENParserRuleCall_1_2());
			}
			this_RPAREN_3=ruleRPAREN
			{
				$current.merge(this_RPAREN_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getValue_expression_primary0Access().getLBRACEParserRuleCall_2_0());
			}
			this_LBRACE_4=ruleLBRACE
			{
				$current.merge(this_LBRACE_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getValue_expression_primary0Access().getExp_listParserRuleCall_2_1());
				}
				this_exp_list_5=ruleexp_list
				{
					$current.merge(this_exp_list_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			{
				newCompositeNode(grammarAccess.getValue_expression_primary0Access().getRBRACEParserRuleCall_2_2());
			}
			this_RBRACE_6=ruleRBRACE
			{
				$current.merge(this_RBRACE_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getValue_expression_primary0Access().getCase_expressionParserRuleCall_3());
		}
		this_case_expression_7=rulecase_expression
		{
			$current.merge(this_case_expression_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_STRING_8=RULE_STRING
		{
			$current.merge(this_STRING_8);
		}
		{
			newLeafNode(this_STRING_8, grammarAccess.getValue_expression_primary0Access().getSTRINGTerminalRuleCall_4());
		}
		    |
		this_INT_9=RULE_INT
		{
			$current.merge(this_INT_9);
		}
		{
			newLeafNode(this_INT_9, grammarAccess.getValue_expression_primary0Access().getINTTerminalRuleCall_5());
		}
		    |
		{
			newCompositeNode(grammarAccess.getValue_expression_primary0Access().getIdentifierParserRuleCall_6());
		}
		this_identifier_10=ruleidentifier
		{
			$current.merge(this_identifier_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleexp_list
entryRuleexp_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExp_listRule()); }
	iv_ruleexp_list=ruleexp_list
	{ $current=$iv_ruleexp_list.current.getText(); }
	EOF;

// Rule exp_list
ruleexp_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExp_listAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current.merge(this_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getExp_listAccess().getCOMMAParserRuleCall_1_0());
			}
			this_COMMA_1=ruleCOMMA
			{
				$current.merge(this_COMMA_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getExp_listAccess().getExpressionParserRuleCall_1_1());
			}
			this_expression_2=ruleexpression
			{
				$current.merge(this_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulecase_expression
entryRulecase_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCase_expressionRule()); }
	iv_rulecase_expression=rulecase_expression
	{ $current=$iv_rulecase_expression.current.getText(); }
	EOF;

// Rule case_expression
rulecase_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=CASE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCase_expressionAccess().getCASEKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getCase_expressionAccess().getValue_expressionParserRuleCall_1());
			}
			this_value_expression_1=rulevalue_expression
			{
				$current.merge(this_value_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getCase_expressionAccess().getWhen_listParserRuleCall_2());
			}
			this_when_list_2=rulewhen_list
			{
				$current.merge(this_when_list_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw=ELSE
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCase_expressionAccess().getELSEKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getCase_expressionAccess().getValue_expressionParserRuleCall_3_1());
			}
			this_value_expression_4=rulevalue_expression
			{
				$current.merge(this_value_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=END
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCase_expressionAccess().getENDKeyword_4());
		}
	)
;

// Entry rule entryRulewhen_list
entryRulewhen_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWhen_listRule()); }
	iv_rulewhen_list=rulewhen_list
	{ $current=$iv_rulewhen_list.current.getText(); }
	EOF;

// Rule when_list
rulewhen_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWhen_listAccess().getWhen_clauseParserRuleCall_0());
		}
		this_when_clause_0=rulewhen_clause
		{
			$current.merge(this_when_clause_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getWhen_listAccess().getWhen_clauseParserRuleCall_1());
			}
			this_when_clause_1=rulewhen_clause
			{
				$current.merge(this_when_clause_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulewhen_clause
entryRulewhen_clause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWhen_clauseRule()); }
	iv_rulewhen_clause=rulewhen_clause
	{ $current=$iv_rulewhen_clause.current.getText(); }
	EOF;

// Rule when_clause
rulewhen_clause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=WHEN
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWhen_clauseAccess().getWHENKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getWhen_clauseAccess().getValue_expressionParserRuleCall_1());
		}
		this_value_expression_1=rulevalue_expression
		{
			$current.merge(this_value_expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=THEN
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWhen_clauseAccess().getTHENKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getWhen_clauseAccess().getValue_expressionParserRuleCall_3());
		}
		this_value_expression_3=rulevalue_expression
		{
			$current.merge(this_value_expression_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulecomp_op
entryRulecomp_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComp_opRule()); }
	iv_rulecomp_op=rulecomp_op
	{ $current=$iv_rulecomp_op.current.getText(); }
	EOF;

// Rule comp_op
rulecomp_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComp_opAccess().getEQParserRuleCall_0());
		}
		this_EQ_0=ruleEQ
		{
			$current.merge(this_EQ_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComp_opAccess().getNEParserRuleCall_1());
		}
		this_NE_1=ruleNE
		{
			$current.merge(this_NE_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComp_opAccess().getLTParserRuleCall_2());
		}
		this_LT_2=ruleLT
		{
			$current.merge(this_LT_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComp_opAccess().getGTParserRuleCall_3());
		}
		this_GT_3=ruleGT
		{
			$current.merge(this_GT_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComp_opAccess().getLEParserRuleCall_4());
		}
		this_LE_4=ruleLE
		{
			$current.merge(this_LE_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComp_opAccess().getGEParserRuleCall_5());
		}
		this_GE_5=ruleGE
		{
			$current.merge(this_GE_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleidentifier
entryRuleidentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleidentifier=ruleidentifier
	{ $current=$iv_ruleidentifier.current.getText(); }
	EOF;

// Rule identifier
ruleidentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIdentifierAccess().getUnquoted_identifierParserRuleCall_0());
		}
		this_unquoted_identifier_0=ruleunquoted_identifier
		{
			$current.merge(this_unquoted_identifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIdentifierAccess().getQuoted_identifierParserRuleCall_1());
		}
		this_quoted_identifier_1=rulequoted_identifier
		{
			$current.merge(this_quoted_identifier_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleunquoted_identifier
entryRuleunquoted_identifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnquoted_identifierRule()); }
	iv_ruleunquoted_identifier=ruleunquoted_identifier
	{ $current=$iv_ruleunquoted_identifier.current.getText(); }
	EOF;

// Rule unquoted_identifier
ruleunquoted_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnquoted_identifierAccess().getKeywordParserRuleCall_0());
		}
		this_keyword_0=rulekeyword
		{
			$current.merge(this_keyword_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getUnquoted_identifierAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleamp_quoted_identifier
entryRuleamp_quoted_identifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAmp_quoted_identifierRule()); }
	iv_ruleamp_quoted_identifier=ruleamp_quoted_identifier
	{ $current=$iv_ruleamp_quoted_identifier.current.getText(); }
	EOF;

// Rule amp_quoted_identifier
ruleamp_quoted_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_AMP_QUOTED_ID_0=RULE_AMP_QUOTED_ID
	{
		$current.merge(this_AMP_QUOTED_ID_0);
	}
	{
		newLeafNode(this_AMP_QUOTED_ID_0, grammarAccess.getAmp_quoted_identifierAccess().getAMP_QUOTED_IDTerminalRuleCall());
	}
;

// Entry rule entryRulequoted_identifier
entryRulequoted_identifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuoted_identifierRule()); }
	iv_rulequoted_identifier=rulequoted_identifier
	{ $current=$iv_rulequoted_identifier.current.getText(); }
	EOF;

// Rule quoted_identifier
rulequoted_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_QUOTED_ID_0=RULE_QUOTED_ID
	{
		$current.merge(this_QUOTED_ID_0);
	}
	{
		newLeafNode(this_QUOTED_ID_0, grammarAccess.getQuoted_identifierAccess().getQUOTED_IDTerminalRuleCall());
	}
;

// Entry rule entryRulekeyword
entryRulekeyword returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKeywordRule()); }
	iv_rulekeyword=rulekeyword
	{ $current=$iv_rulekeyword.current.getText(); }
	EOF;

// Rule keyword
rulekeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=DIMENSION
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKeywordAccess().getDIMENSIONKeyword_0());
		}
		    |
		kw=PROPERTIES
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKeywordAccess().getPROPERTIESKeyword_1());
		}
	)
;

// Entry rule entryRuleQUOTE
entryRuleQUOTE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQUOTERule()); }
	iv_ruleQUOTE=ruleQUOTE
	{ $current=$iv_ruleQUOTE.current.getText(); }
	EOF;

// Rule QUOTE
ruleQUOTE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Apostrophe
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getQUOTEAccess().getApostropheKeyword());
	}
;

// Entry rule entryRuleASTERISK
entryRuleASTERISK returns [String current=null]:
	{ newCompositeNode(grammarAccess.getASTERISKRule()); }
	iv_ruleASTERISK=ruleASTERISK
	{ $current=$iv_ruleASTERISK.current.getText(); }
	EOF;

// Rule ASTERISK
ruleASTERISK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Asterisk
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getASTERISKAccess().getAsteriskKeyword());
	}
;

// Entry rule entryRuleCOLON
entryRuleCOLON returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOLONRule()); }
	iv_ruleCOLON=ruleCOLON
	{ $current=$iv_ruleCOLON.current.getText(); }
	EOF;

// Rule COLON
ruleCOLON returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Colon
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOLONAccess().getColonKeyword());
	}
;

// Entry rule entryRuleCOMMA
entryRuleCOMMA returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOMMARule()); }
	iv_ruleCOMMA=ruleCOMMA
	{ $current=$iv_ruleCOMMA.current.getText(); }
	EOF;

// Rule COMMA
ruleCOMMA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Comma
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOMMAAccess().getCommaKeyword());
	}
;

// Entry rule entryRuleCONCAT
entryRuleCONCAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCONCATRule()); }
	iv_ruleCONCAT=ruleCONCAT
	{ $current=$iv_ruleCONCAT.current.getText(); }
	EOF;

// Rule CONCAT
ruleCONCAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=VerticalLineVerticalLine
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCONCATAccess().getVerticalLineVerticalLineKeyword());
	}
;

// Entry rule entryRuleDOT
entryRuleDOT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOTRule()); }
	iv_ruleDOT=ruleDOT
	{ $current=$iv_ruleDOT.current.getText(); }
	EOF;

// Rule DOT
ruleDOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=FullStop
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDOTAccess().getFullStopKeyword());
	}
;

// Entry rule entryRuleEQ
entryRuleEQ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEQRule()); }
	iv_ruleEQ=ruleEQ
	{ $current=$iv_ruleEQ.current.getText(); }
	EOF;

// Rule EQ
ruleEQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=EqualsSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEQAccess().getEqualsSignKeyword());
	}
;

// Entry rule entryRuleGE
entryRuleGE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGERule()); }
	iv_ruleGE=ruleGE
	{ $current=$iv_ruleGE.current.getText(); }
	EOF;

// Rule GE
ruleGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=GreaterThanSignEqualsSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getGEAccess().getGreaterThanSignEqualsSignKeyword());
	}
;

// Entry rule entryRuleGT
entryRuleGT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGTRule()); }
	iv_ruleGT=ruleGT
	{ $current=$iv_ruleGT.current.getText(); }
	EOF;

// Rule GT
ruleGT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=GreaterThanSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getGTAccess().getGreaterThanSignKeyword());
	}
;

// Entry rule entryRuleLBRACE
entryRuleLBRACE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLBRACERule()); }
	iv_ruleLBRACE=ruleLBRACE
	{ $current=$iv_ruleLBRACE.current.getText(); }
	EOF;

// Rule LBRACE
ruleLBRACE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LeftCurlyBracket
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLBRACEAccess().getLeftCurlyBracketKeyword());
	}
;

// Entry rule entryRuleLE
entryRuleLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLERule()); }
	iv_ruleLE=ruleLE
	{ $current=$iv_ruleLE.current.getText(); }
	EOF;

// Rule LE
ruleLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LessThanSignEqualsSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLEAccess().getLessThanSignEqualsSignKeyword());
	}
;

// Entry rule entryRuleLPAREN
entryRuleLPAREN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLPARENRule()); }
	iv_ruleLPAREN=ruleLPAREN
	{ $current=$iv_ruleLPAREN.current.getText(); }
	EOF;

// Rule LPAREN
ruleLPAREN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LeftParenthesis
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLPARENAccess().getLeftParenthesisKeyword());
	}
;

// Entry rule entryRuleLT
entryRuleLT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLTRule()); }
	iv_ruleLT=ruleLT
	{ $current=$iv_ruleLT.current.getText(); }
	EOF;

// Rule LT
ruleLT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LessThanSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLTAccess().getLessThanSignKeyword());
	}
;

// Entry rule entryRuleMINUS
entryRuleMINUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMINUSRule()); }
	iv_ruleMINUS=ruleMINUS
	{ $current=$iv_ruleMINUS.current.getText(); }
	EOF;

// Rule MINUS
ruleMINUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=HyphenMinus
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMINUSAccess().getHyphenMinusKeyword());
	}
;

// Entry rule entryRuleNE
entryRuleNE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNERule()); }
	iv_ruleNE=ruleNE
	{ $current=$iv_ruleNE.current.getText(); }
	EOF;

// Rule NE
ruleNE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=LessThanSignGreaterThanSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNEAccess().getLessThanSignGreaterThanSignKeyword());
	}
;

// Entry rule entryRulePLUS
entryRulePLUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPLUSRule()); }
	iv_rulePLUS=rulePLUS
	{ $current=$iv_rulePLUS.current.getText(); }
	EOF;

// Rule PLUS
rulePLUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=PlusSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPLUSAccess().getPlusSignKeyword());
	}
;

// Entry rule entryRuleRBRACE
entryRuleRBRACE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRBRACERule()); }
	iv_ruleRBRACE=ruleRBRACE
	{ $current=$iv_ruleRBRACE.current.getText(); }
	EOF;

// Rule RBRACE
ruleRBRACE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=RightCurlyBracket
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRBRACEAccess().getRightCurlyBracketKeyword());
	}
;

// Entry rule entryRuleRPAREN
entryRuleRPAREN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRPARENRule()); }
	iv_ruleRPAREN=ruleRPAREN
	{ $current=$iv_ruleRPAREN.current.getText(); }
	EOF;

// Rule RPAREN
ruleRPAREN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=RightParenthesis
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRPARENAccess().getRightParenthesisKeyword());
	}
;

// Entry rule entryRuleSOLIDUS
entryRuleSOLIDUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSOLIDUSRule()); }
	iv_ruleSOLIDUS=ruleSOLIDUS
	{ $current=$iv_ruleSOLIDUS.current.getText(); }
	EOF;

// Rule SOLIDUS
ruleSOLIDUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Solidus
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSOLIDUSAccess().getSolidusKeyword());
	}
;
