/*
 * generated by Xtext 2.28.0
 */
package org.eclipse.daanse.mdx.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MdxGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MdxStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.MdxStatement");
		private final RuleCall cSelectStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MdxStatement:
		//    (SelectStatement);
		@Override public ParserRule getRule() { return rule; }
		
		//(SelectStatement)
		public RuleCall getSelectStatementParserRuleCall() { return cSelectStatementParserRuleCall; }
	}
	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWITHKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cFormulaSpecificationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cSELECTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAxis_specification_listParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cFROMKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cCube_specificationParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWHEREKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cSlicer_specificationParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cCell_propsParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//SelectStatement:
		//    {SelectStatement} ('WITH' FormulaSpecification)?
		//    'SELECT' axis_specification_list?
		//    'FROM' cube_specification
		//    ('WHERE' slicer_specification)?
		//    cell_props?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectStatement} ('WITH' FormulaSpecification)?
		//'SELECT' axis_specification_list?
		//'FROM' cube_specification
		//('WHERE' slicer_specification)?
		//cell_props?
		public Group getGroup() { return cGroup; }
		
		//{SelectStatement}
		public Action getSelectStatementAction_0() { return cSelectStatementAction_0; }
		
		//('WITH' FormulaSpecification)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'WITH'
		public Keyword getWITHKeyword_1_0() { return cWITHKeyword_1_0; }
		
		//FormulaSpecification
		public RuleCall getFormulaSpecificationParserRuleCall_1_1() { return cFormulaSpecificationParserRuleCall_1_1; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_2() { return cSELECTKeyword_2; }
		
		//axis_specification_list?
		public RuleCall getAxis_specification_listParserRuleCall_3() { return cAxis_specification_listParserRuleCall_3; }
		
		//'FROM'
		public Keyword getFROMKeyword_4() { return cFROMKeyword_4; }
		
		//cube_specification
		public RuleCall getCube_specificationParserRuleCall_5() { return cCube_specificationParserRuleCall_5; }
		
		//('WHERE' slicer_specification)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_6_0() { return cWHEREKeyword_6_0; }
		
		//slicer_specification
		public RuleCall getSlicer_specificationParserRuleCall_6_1() { return cSlicer_specificationParserRuleCall_6_1; }
		
		//cell_props?
		public RuleCall getCell_propsParserRuleCall_7() { return cCell_propsParserRuleCall_7; }
	}
	public class FormulaSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.FormulaSpecification");
		private final RuleCall cSingle_formula_specificationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FormulaSpecification:
		//    single_formula_specification+;
		@Override public ParserRule getRule() { return rule; }
		
		//single_formula_specification+
		public RuleCall getSingle_formula_specificationParserRuleCall() { return cSingle_formula_specificationParserRuleCall; }
	}
	public class Single_formula_specificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.single_formula_specification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMember_specificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSet_specificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//single_formula_specification:
		//    member_specification
		//    | set_specification;
		@Override public ParserRule getRule() { return rule; }
		
		//member_specification
		//| set_specification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//member_specification
		public RuleCall getMember_specificationParserRuleCall_0() { return cMember_specificationParserRuleCall_0; }
		
		//set_specification
		public RuleCall getSet_specificationParserRuleCall_1() { return cSet_specificationParserRuleCall_1; }
	}
	public class Set_specificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.set_specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSet_nameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cQUOTEParserRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final RuleCall cQUOTEParserRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//set_specification:
		//    'SET' set_name 'AS'
		//    (QUOTE expression QUOTE | expression);
		@Override public ParserRule getRule() { return rule; }
		
		//'SET' set_name 'AS'
		//(QUOTE expression QUOTE | expression)
		public Group getGroup() { return cGroup; }
		
		//'SET'
		public Keyword getSETKeyword_0() { return cSETKeyword_0; }
		
		//set_name
		public RuleCall getSet_nameParserRuleCall_1() { return cSet_nameParserRuleCall_1; }
		
		//'AS'
		public Keyword getASKeyword_2() { return cASKeyword_2; }
		
		//(QUOTE expression QUOTE | expression)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//QUOTE expression QUOTE
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//QUOTE
		public RuleCall getQUOTEParserRuleCall_3_0_0() { return cQUOTEParserRuleCall_3_0_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_3_0_1() { return cExpressionParserRuleCall_3_0_1; }
		
		//QUOTE
		public RuleCall getQUOTEParserRuleCall_3_0_2() { return cQUOTEParserRuleCall_3_0_2; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
	}
	public class Member_specificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.member_specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMEMBERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMember_nameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cQUOTEParserRuleCall_3_0_0_0 = (RuleCall)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cValue_expressionParserRuleCall_3_0_0_1 = (RuleCall)cGroup_3_0_0.eContents().get(1);
		private final RuleCall cQUOTEParserRuleCall_3_0_0_2 = (RuleCall)cGroup_3_0_0.eContents().get(2);
		private final RuleCall cValue_expressionParserRuleCall_3_0_1 = (RuleCall)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cCOMMAParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cMember_property_def_listParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//member_specification:
		//    'MEMBER' member_name 'AS'
		//    ((QUOTE value_expression QUOTE | value_expression)
		//    COMMA member_property_def_list?);
		@Override public ParserRule getRule() { return rule; }
		
		//'MEMBER' member_name 'AS'
		//((QUOTE value_expression QUOTE | value_expression)
		//COMMA member_property_def_list?)
		public Group getGroup() { return cGroup; }
		
		//'MEMBER'
		public Keyword getMEMBERKeyword_0() { return cMEMBERKeyword_0; }
		
		//member_name
		public RuleCall getMember_nameParserRuleCall_1() { return cMember_nameParserRuleCall_1; }
		
		//'AS'
		public Keyword getASKeyword_2() { return cASKeyword_2; }
		
		//((QUOTE value_expression QUOTE | value_expression)
		//COMMA member_property_def_list?)
		public Group getGroup_3() { return cGroup_3; }
		
		//(QUOTE value_expression QUOTE | value_expression)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//QUOTE value_expression QUOTE
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }
		
		//QUOTE
		public RuleCall getQUOTEParserRuleCall_3_0_0_0() { return cQUOTEParserRuleCall_3_0_0_0; }
		
		//value_expression
		public RuleCall getValue_expressionParserRuleCall_3_0_0_1() { return cValue_expressionParserRuleCall_3_0_0_1; }
		
		//QUOTE
		public RuleCall getQUOTEParserRuleCall_3_0_0_2() { return cQUOTEParserRuleCall_3_0_0_2; }
		
		//value_expression
		public RuleCall getValue_expressionParserRuleCall_3_0_1() { return cValue_expressionParserRuleCall_3_0_1; }
		
		//COMMA
		public RuleCall getCOMMAParserRuleCall_3_1() { return cCOMMAParserRuleCall_3_1; }
		
		//member_property_def_list?
		public RuleCall getMember_property_def_listParserRuleCall_3_2() { return cMember_property_def_listParserRuleCall_3_2; }
	}
	public class Axis_specification_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.axis_specification_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAxis_specificationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMAParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cAxis_specificationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//axis_specification_list:
		//    axis_specification (COMMA axis_specification)*;
		@Override public ParserRule getRule() { return rule; }
		
		//axis_specification (COMMA axis_specification)*
		public Group getGroup() { return cGroup; }
		
		//axis_specification
		public RuleCall getAxis_specificationParserRuleCall_0() { return cAxis_specificationParserRuleCall_0; }
		
		//(COMMA axis_specification)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMAParserRuleCall_1_0() { return cCOMMAParserRuleCall_1_0; }
		
		//axis_specification
		public RuleCall getAxis_specificationParserRuleCall_1_1() { return cAxis_specificationParserRuleCall_1_1; }
	}
	public class Member_property_def_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.member_property_def_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMember_property_definitionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMAParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cMember_property_definitionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//member_property_def_list:
		//    member_property_definition (COMMA member_property_definition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//member_property_definition (COMMA member_property_definition)*
		public Group getGroup() { return cGroup; }
		
		//member_property_definition
		public RuleCall getMember_property_definitionParserRuleCall_0() { return cMember_property_definitionParserRuleCall_0; }
		
		//(COMMA member_property_definition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMAParserRuleCall_1_0() { return cCOMMAParserRuleCall_1_0; }
		
		//member_property_definition
		public RuleCall getMember_property_definitionParserRuleCall_1_1() { return cMember_property_definitionParserRuleCall_1_1; }
	}
	public class Member_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.member_name");
		private final RuleCall cCompound_idParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//member_name:
		//    compound_id;
		@Override public ParserRule getRule() { return rule; }
		
		//compound_id
		public RuleCall getCompound_idParserRuleCall() { return cCompound_idParserRuleCall; }
	}
	public class Member_property_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.member_property_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEQParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cValue_expressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//member_property_definition:
		//    identifier EQ value_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier EQ value_expression
		public Group getGroup() { return cGroup; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//EQ
		public RuleCall getEQParserRuleCall_1() { return cEQParserRuleCall_1; }
		
		//value_expression
		public RuleCall getValue_expressionParserRuleCall_2() { return cValue_expressionParserRuleCall_2; }
	}
	public class Set_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.set_name");
		private final RuleCall cCompound_idParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//set_name:
		//    compound_id;
		@Override public ParserRule getRule() { return rule; }
		
		//compound_id
		public RuleCall getCompound_idParserRuleCall() { return cCompound_idParserRuleCall; }
	}
	public class Compound_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.compound_id");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//compound_id:
		//identifier (DOT identifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier (DOT identifier)*
		public Group getGroup() { return cGroup; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//(DOT identifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//DOT
		public RuleCall getDOTParserRuleCall_1_0() { return cDOTParserRuleCall_1_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
	}
	public class Axis_specificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.axis_specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNONKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEMPTYKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDim_propsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cONKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cAxis_nameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//axis_specification:
		//    ('NON' 'EMPTY')? expression dim_props? 'ON' axis_name;
		@Override public ParserRule getRule() { return rule; }
		
		//('NON' 'EMPTY')? expression dim_props? 'ON' axis_name
		public Group getGroup() { return cGroup; }
		
		//('NON' 'EMPTY')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'NON'
		public Keyword getNONKeyword_0_0() { return cNONKeyword_0_0; }
		
		//'EMPTY'
		public Keyword getEMPTYKeyword_0_1() { return cEMPTYKeyword_0_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//dim_props?
		public RuleCall getDim_propsParserRuleCall_2() { return cDim_propsParserRuleCall_2; }
		
		//'ON'
		public Keyword getONKeyword_3() { return cONKeyword_3; }
		
		//axis_name
		public RuleCall getAxis_nameParserRuleCall_4() { return cAxis_nameParserRuleCall_4; }
	}
	public class Axis_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.axis_name");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//axis_name:
		//    identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class Dim_propsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.dim_props");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDIMENSIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPROPERTIESKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cProperty_listParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//dim_props:
		//    'DIMENSION'? 'PROPERTIES' property_list;
		@Override public ParserRule getRule() { return rule; }
		
		//'DIMENSION'? 'PROPERTIES' property_list
		public Group getGroup() { return cGroup; }
		
		//'DIMENSION'?
		public Keyword getDIMENSIONKeyword_0() { return cDIMENSIONKeyword_0; }
		
		//'PROPERTIES'
		public Keyword getPROPERTIESKeyword_1() { return cPROPERTIESKeyword_1; }
		
		//property_list
		public RuleCall getProperty_listParserRuleCall_2() { return cProperty_listParserRuleCall_2; }
	}
	public class Property_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.property_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMAParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cPropertyParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//property_list:
		//    property (COMMA property)*;
		@Override public ParserRule getRule() { return rule; }
		
		//property (COMMA property)*
		public Group getGroup() { return cGroup; }
		
		//property
		public RuleCall getPropertyParserRuleCall_0() { return cPropertyParserRuleCall_0; }
		
		//(COMMA property)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMAParserRuleCall_1_0() { return cCOMMAParserRuleCall_1_0; }
		
		//property
		public RuleCall getPropertyParserRuleCall_1_1() { return cPropertyParserRuleCall_1_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.property");
		private final RuleCall cCompound_idParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//property:
		//    compound_id;
		@Override public ParserRule getRule() { return rule; }
		
		//compound_id
		public RuleCall getCompound_idParserRuleCall() { return cCompound_idParserRuleCall; }
	}
	public class Cube_specificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.cube_specification");
		private final RuleCall cCube_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//cube_specification:
		//    cube_name;
		@Override public ParserRule getRule() { return rule; }
		
		//cube_name
		public RuleCall getCube_nameParserRuleCall() { return cCube_nameParserRuleCall; }
	}
	public class Cube_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.cube_name");
		private final RuleCall cCompound_idParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//cube_name:
		//    compound_id;
		@Override public ParserRule getRule() { return rule; }
		
		//compound_id
		public RuleCall getCompound_idParserRuleCall() { return cCompound_idParserRuleCall; }
	}
	public class Slicer_specificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.slicer_specification");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//slicer_specification:
		//    expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class Cell_propsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.cell_props");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCELLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPROPERTIESKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCell_property_listParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//cell_props:
		//    'CELL'? 'PROPERTIES' cell_property_list;
		@Override public ParserRule getRule() { return rule; }
		
		//'CELL'? 'PROPERTIES' cell_property_list
		public Group getGroup() { return cGroup; }
		
		//'CELL'?
		public Keyword getCELLKeyword_0() { return cCELLKeyword_0; }
		
		//'PROPERTIES'
		public Keyword getPROPERTIESKeyword_1() { return cPROPERTIESKeyword_1; }
		
		//cell_property_list
		public RuleCall getCell_property_listParserRuleCall_2() { return cCell_property_listParserRuleCall_2; }
	}
	public class Cell_property_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.cell_property_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCell_propertyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCOMMAParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCell_propertyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//cell_property_list:
		//    cell_property COMMA cell_property*;
		@Override public ParserRule getRule() { return rule; }
		
		//cell_property COMMA cell_property*
		public Group getGroup() { return cGroup; }
		
		//cell_property
		public RuleCall getCell_propertyParserRuleCall_0() { return cCell_propertyParserRuleCall_0; }
		
		//COMMA
		public RuleCall getCOMMAParserRuleCall_1() { return cCOMMAParserRuleCall_1; }
		
		//cell_property*
		public RuleCall getCell_propertyParserRuleCall_2() { return cCell_propertyParserRuleCall_2; }
	}
	public class Cell_propertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.cell_property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatory_cell_propertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProvider_specific_cell_propertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//cell_property:
		//    mandatory_cell_property
		//    | provider_specific_cell_property;
		@Override public ParserRule getRule() { return rule; }
		
		//mandatory_cell_property
		//| provider_specific_cell_property
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//mandatory_cell_property
		public RuleCall getMandatory_cell_propertyParserRuleCall_0() { return cMandatory_cell_propertyParserRuleCall_0; }
		
		//provider_specific_cell_property
		public RuleCall getProvider_specific_cell_propertyParserRuleCall_1() { return cProvider_specific_cell_propertyParserRuleCall_1; }
	}
	public class Mandatory_cell_propertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.mandatory_cell_property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCELL_ORDINALKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVALUEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFORMATTED_VALUEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//mandatory_cell_property:
		//    'CELL_ORDINAL'
		//    | 'VALUE'
		//    | 'FORMATTED_VALUE';
		@Override public ParserRule getRule() { return rule; }
		
		//'CELL_ORDINAL'
		//| 'VALUE'
		//| 'FORMATTED_VALUE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CELL_ORDINAL'
		public Keyword getCELL_ORDINALKeyword_0() { return cCELL_ORDINALKeyword_0; }
		
		//'VALUE'
		public Keyword getVALUEKeyword_1() { return cVALUEKeyword_1; }
		
		//'FORMATTED_VALUE'
		public Keyword getFORMATTED_VALUEKeyword_2() { return cFORMATTED_VALUEKeyword_2; }
	}
	public class Provider_specific_cell_propertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.provider_specific_cell_property");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//provider_specific_cell_property:
		//    identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValue_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOLONParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cValue_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expression:
		//    value_expression (COLON value_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//value_expression (COLON value_expression)*
		public Group getGroup() { return cGroup; }
		
		//value_expression
		public RuleCall getValue_expressionParserRuleCall_0() { return cValue_expressionParserRuleCall_0; }
		
		//(COLON value_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COLON
		public RuleCall getCOLONParserRuleCall_1_0() { return cCOLONParserRuleCall_1_0; }
		
		//value_expression
		public RuleCall getValue_expressionParserRuleCall_1_1() { return cValue_expressionParserRuleCall_1_1; }
	}
	public class Value_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.value_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValue_xor_expressionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cValue_or_expressionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//value_expression:
		//    term5
		//    (value_xor_expression | value_or_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//term5
		//(value_xor_expression | value_or_expression)*
		public Group getGroup() { return cGroup; }
		
		//term5
		public RuleCall getTerm5ParserRuleCall_0() { return cTerm5ParserRuleCall_0; }
		
		//(value_xor_expression | value_or_expression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value_xor_expression
		public RuleCall getValue_xor_expressionParserRuleCall_1_0() { return cValue_xor_expressionParserRuleCall_1_0; }
		
		//value_or_expression
		public RuleCall getValue_or_expressionParserRuleCall_1_1() { return cValue_or_expressionParserRuleCall_1_1; }
	}
	public class Value_xor_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.value_xor_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTerm5ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//value_xor_expression:
		//    'XOR' term5;
		@Override public ParserRule getRule() { return rule; }
		
		//'XOR' term5
		public Group getGroup() { return cGroup; }
		
		//'XOR'
		public Keyword getXORKeyword_0() { return cXORKeyword_0; }
		
		//term5
		public RuleCall getTerm5ParserRuleCall_1() { return cTerm5ParserRuleCall_1; }
	}
	public class Value_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.value_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTerm5ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//value_or_expression:
		//    'OR' term5;
		@Override public ParserRule getRule() { return rule; }
		
		//'OR' term5
		public Group getGroup() { return cGroup; }
		
		//'OR'
		public Keyword getORKeyword_0() { return cORKeyword_0; }
		
		//term5
		public RuleCall getTerm5ParserRuleCall_1() { return cTerm5ParserRuleCall_1; }
	}
	public class Term5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.term5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTerm4ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//term5:
		//    term4
		//    ('AND' term4)*;
		@Override public ParserRule getRule() { return rule; }
		
		//term4
		//('AND' term4)*
		public Group getGroup() { return cGroup; }
		
		//term4
		public RuleCall getTerm4ParserRuleCall_0() { return cTerm4ParserRuleCall_0; }
		
		//('AND' term4)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'AND'
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }
		
		//term4
		public RuleCall getTerm4ParserRuleCall_1_1() { return cTerm4ParserRuleCall_1_1; }
	}
	public class Term4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.term4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNOTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTerm4ParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cTerm3ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//term4:
		//    'NOT' term4
		//    | term3;
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT' term4
		//| term3
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NOT' term4
		public Group getGroup_0() { return cGroup_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_0_0() { return cNOTKeyword_0_0; }
		
		//term4
		public RuleCall getTerm4ParserRuleCall_0_1() { return cTerm4ParserRuleCall_0_1; }
		
		//term3
		public RuleCall getTerm3ParserRuleCall_1() { return cTerm3ParserRuleCall_1; }
	}
	public class Term3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.term3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cComp_opParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cTerm2ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//term3:
		//    term2 (comp_op term2)*;
		@Override public ParserRule getRule() { return rule; }
		
		//term2 (comp_op term2)*
		public Group getGroup() { return cGroup; }
		
		//term2
		public RuleCall getTerm2ParserRuleCall_0() { return cTerm2ParserRuleCall_0; }
		
		//(comp_op term2)*
		public Group getGroup_1() { return cGroup_1; }
		
		//comp_op
		public RuleCall getComp_opParserRuleCall_1_0() { return cComp_opParserRuleCall_1_0; }
		
		//term2
		public RuleCall getTerm2ParserRuleCall_1_1() { return cTerm2ParserRuleCall_1_1; }
	}
	public class Term2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.term2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cCONCATParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cPLUSParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cMINUSParserRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cTermParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//term2:
		//    term ((CONCAT | PLUS | MINUS) term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//term ((CONCAT | PLUS | MINUS) term)*
		public Group getGroup() { return cGroup; }
		
		//term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//((CONCAT | PLUS | MINUS) term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(CONCAT | PLUS | MINUS)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//CONCAT
		public RuleCall getCONCATParserRuleCall_1_0_0() { return cCONCATParserRuleCall_1_0_0; }
		
		//PLUS
		public RuleCall getPLUSParserRuleCall_1_0_1() { return cPLUSParserRuleCall_1_0_1; }
		
		//MINUS
		public RuleCall getMINUSParserRuleCall_1_0_2() { return cMINUSParserRuleCall_1_0_2; }
		
		//term
		public RuleCall getTermParserRuleCall_1_1() { return cTermParserRuleCall_1_1; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cSOLIDUSParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cASTERISKParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//term:
		//    factor ((SOLIDUS | ASTERISK) factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//factor ((SOLIDUS | ASTERISK) factor)*
		public Group getGroup() { return cGroup; }
		
		//factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//((SOLIDUS | ASTERISK) factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(SOLIDUS | ASTERISK)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//SOLIDUS
		public RuleCall getSOLIDUSParserRuleCall_1_0_0() { return cSOLIDUSParserRuleCall_1_0_0; }
		
		//ASTERISK
		public RuleCall getASTERISKParserRuleCall_1_0_1() { return cASTERISKParserRuleCall_1_0_1; }
		
		//factor
		public RuleCall getFactorParserRuleCall_1_1() { return cFactorParserRuleCall_1_1; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMINUSParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cValue_expression_primaryParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPLUSParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cValue_expression_primaryParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cValue_expression_primaryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//factor:
		//    MINUS value_expression_primary
		//    | PLUS value_expression_primary
		//    | value_expression_primary;
		@Override public ParserRule getRule() { return rule; }
		
		//MINUS value_expression_primary
		//| PLUS value_expression_primary
		//| value_expression_primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MINUS value_expression_primary
		public Group getGroup_0() { return cGroup_0; }
		
		//MINUS
		public RuleCall getMINUSParserRuleCall_0_0() { return cMINUSParserRuleCall_0_0; }
		
		//value_expression_primary
		public RuleCall getValue_expression_primaryParserRuleCall_0_1() { return cValue_expression_primaryParserRuleCall_0_1; }
		
		//PLUS value_expression_primary
		public Group getGroup_1() { return cGroup_1; }
		
		//PLUS
		public RuleCall getPLUSParserRuleCall_1_0() { return cPLUSParserRuleCall_1_0; }
		
		//value_expression_primary
		public RuleCall getValue_expression_primaryParserRuleCall_1_1() { return cValue_expression_primaryParserRuleCall_1_1; }
		
		//value_expression_primary
		public RuleCall getValue_expression_primaryParserRuleCall_2() { return cValue_expression_primaryParserRuleCall_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLPARENParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExp_listParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRPARENParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//function:
		//    identifier LPAREN (exp_list)? RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier LPAREN (exp_list)? RPAREN
		public Group getGroup() { return cGroup; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//LPAREN
		public RuleCall getLPARENParserRuleCall_1() { return cLPARENParserRuleCall_1; }
		
		//(exp_list)?
		public RuleCall getExp_listParserRuleCall_2() { return cExp_listParserRuleCall_2; }
		
		//RPAREN
		public RuleCall getRPARENParserRuleCall_3() { return cRPARENParserRuleCall_3; }
	}
	public class Value_expression_primaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.value_expression_primary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValue_expression_primary0ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cUnquoted_identifierParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cQuoted_identifierParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cAmp_quoted_identifierParserRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cFunctionParserRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		
		//value_expression_primary:
		//    value_expression_primary0
		//    (DOT
		//    (unquoted_identifier
		//    | quoted_identifier
		//    | amp_quoted_identifier
		//    | function))*;
		@Override public ParserRule getRule() { return rule; }
		
		//value_expression_primary0
		//(DOT
		//(unquoted_identifier
		//| quoted_identifier
		//| amp_quoted_identifier
		//| function))*
		public Group getGroup() { return cGroup; }
		
		//value_expression_primary0
		public RuleCall getValue_expression_primary0ParserRuleCall_0() { return cValue_expression_primary0ParserRuleCall_0; }
		
		//(DOT
		//(unquoted_identifier
		//| quoted_identifier
		//| amp_quoted_identifier
		//| function))*
		public Group getGroup_1() { return cGroup_1; }
		
		//DOT
		public RuleCall getDOTParserRuleCall_1_0() { return cDOTParserRuleCall_1_0; }
		
		//(unquoted_identifier
		//| quoted_identifier
		//| amp_quoted_identifier
		//| function)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//unquoted_identifier
		public RuleCall getUnquoted_identifierParserRuleCall_1_1_0() { return cUnquoted_identifierParserRuleCall_1_1_0; }
		
		//quoted_identifier
		public RuleCall getQuoted_identifierParserRuleCall_1_1_1() { return cQuoted_identifierParserRuleCall_1_1_1; }
		
		//amp_quoted_identifier
		public RuleCall getAmp_quoted_identifierParserRuleCall_1_1_2() { return cAmp_quoted_identifierParserRuleCall_1_1_2; }
		
		//function
		public RuleCall getFunctionParserRuleCall_1_1_3() { return cFunctionParserRuleCall_1_1_3; }
	}
	public class Value_expression_primary0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.value_expression_primary0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLPARENParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExp_listParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRPARENParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLBRACEParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cExp_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cRBRACEParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cCase_expressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIdentifierParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//value_expression_primary0:
		//    function
		//    | (LPAREN exp_list RPAREN)
		//    | (LBRACE (exp_list)? RBRACE)
		//    | case_expression
		//    | STRING
		//    | INT
		//    | identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//function
		//| (LPAREN exp_list RPAREN)
		//| (LBRACE (exp_list)? RBRACE)
		//| case_expression
		//| STRING
		//| INT
		//| identifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//(LPAREN exp_list RPAREN)
		public Group getGroup_1() { return cGroup_1; }
		
		//LPAREN
		public RuleCall getLPARENParserRuleCall_1_0() { return cLPARENParserRuleCall_1_0; }
		
		//exp_list
		public RuleCall getExp_listParserRuleCall_1_1() { return cExp_listParserRuleCall_1_1; }
		
		//RPAREN
		public RuleCall getRPARENParserRuleCall_1_2() { return cRPARENParserRuleCall_1_2; }
		
		//(LBRACE (exp_list)? RBRACE)
		public Group getGroup_2() { return cGroup_2; }
		
		//LBRACE
		public RuleCall getLBRACEParserRuleCall_2_0() { return cLBRACEParserRuleCall_2_0; }
		
		//(exp_list)?
		public RuleCall getExp_listParserRuleCall_2_1() { return cExp_listParserRuleCall_2_1; }
		
		//RBRACE
		public RuleCall getRBRACEParserRuleCall_2_2() { return cRBRACEParserRuleCall_2_2; }
		
		//case_expression
		public RuleCall getCase_expressionParserRuleCall_3() { return cCase_expressionParserRuleCall_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_6() { return cIdentifierParserRuleCall_6; }
	}
	public class Exp_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.exp_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMAParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//exp_list:
		//    expression (COMMA expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expression (COMMA expression)*
		public Group getGroup() { return cGroup; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//(COMMA expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMAParserRuleCall_1_0() { return cCOMMAParserRuleCall_1_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}
	public class Case_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.case_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cValue_expressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWhen_listParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cELSEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cValue_expressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cENDKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//case_expression:
		//    'CASE' (value_expression)?
		//    (when_list)?
		//    ('ELSE' value_expression)?
		//    'END';
		@Override public ParserRule getRule() { return rule; }
		
		//'CASE' (value_expression)?
		//(when_list)?
		//('ELSE' value_expression)?
		//'END'
		public Group getGroup() { return cGroup; }
		
		//'CASE'
		public Keyword getCASEKeyword_0() { return cCASEKeyword_0; }
		
		//(value_expression)?
		public RuleCall getValue_expressionParserRuleCall_1() { return cValue_expressionParserRuleCall_1; }
		
		//(when_list)?
		public RuleCall getWhen_listParserRuleCall_2() { return cWhen_listParserRuleCall_2; }
		
		//('ELSE' value_expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'ELSE'
		public Keyword getELSEKeyword_3_0() { return cELSEKeyword_3_0; }
		
		//value_expression
		public RuleCall getValue_expressionParserRuleCall_3_1() { return cValue_expressionParserRuleCall_3_1; }
		
		//'END'
		public Keyword getENDKeyword_4() { return cENDKeyword_4; }
	}
	public class When_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.when_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWhen_clauseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWhen_clauseParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//when_list:
		//    when_clause (when_clause)*;
		@Override public ParserRule getRule() { return rule; }
		
		//when_clause (when_clause)*
		public Group getGroup() { return cGroup; }
		
		//when_clause
		public RuleCall getWhen_clauseParserRuleCall_0() { return cWhen_clauseParserRuleCall_0; }
		
		//(when_clause)*
		public RuleCall getWhen_clauseParserRuleCall_1() { return cWhen_clauseParserRuleCall_1; }
	}
	public class When_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.when_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHENKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cValue_expressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cValue_expressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//when_clause:
		//    'WHEN' value_expression 'THEN' value_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'WHEN' value_expression 'THEN' value_expression
		public Group getGroup() { return cGroup; }
		
		//'WHEN'
		public Keyword getWHENKeyword_0() { return cWHENKeyword_0; }
		
		//value_expression
		public RuleCall getValue_expressionParserRuleCall_1() { return cValue_expressionParserRuleCall_1; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//value_expression
		public RuleCall getValue_expressionParserRuleCall_3() { return cValue_expressionParserRuleCall_3; }
	}
	public class Comp_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.comp_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEQParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGTParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGEParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//comp_op:
		//    EQ
		//    | NE
		//    | LT
		//    | GT
		//    | LE
		//    | GE;
		@Override public ParserRule getRule() { return rule; }
		
		//EQ
		//| NE
		//| LT
		//| GT
		//| LE
		//| GE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ
		public RuleCall getEQParserRuleCall_0() { return cEQParserRuleCall_0; }
		
		//NE
		public RuleCall getNEParserRuleCall_1() { return cNEParserRuleCall_1; }
		
		//LT
		public RuleCall getLTParserRuleCall_2() { return cLTParserRuleCall_2; }
		
		//GT
		public RuleCall getGTParserRuleCall_3() { return cGTParserRuleCall_3; }
		
		//LE
		public RuleCall getLEParserRuleCall_4() { return cLEParserRuleCall_4; }
		
		//GE
		public RuleCall getGEParserRuleCall_5() { return cGEParserRuleCall_5; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnquoted_identifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuoted_identifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//identifier:
		//    (unquoted_identifier
		//    | quoted_identifier);
		@Override public ParserRule getRule() { return rule; }
		
		//(unquoted_identifier
		//| quoted_identifier)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unquoted_identifier
		public RuleCall getUnquoted_identifierParserRuleCall_0() { return cUnquoted_identifierParserRuleCall_0; }
		
		//quoted_identifier
		public RuleCall getQuoted_identifierParserRuleCall_1() { return cQuoted_identifierParserRuleCall_1; }
	}
	public class Unquoted_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.unquoted_identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeywordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//unquoted_identifier:
		//    keyword
		//    | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword
		//| ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//keyword
		public RuleCall getKeywordParserRuleCall_0() { return cKeywordParserRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class Amp_quoted_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.amp_quoted_identifier");
		private final RuleCall cAMP_QUOTED_IDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//amp_quoted_identifier:
		//    AMP_QUOTED_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//AMP_QUOTED_ID
		public RuleCall getAMP_QUOTED_IDTerminalRuleCall() { return cAMP_QUOTED_IDTerminalRuleCall; }
	}
	public class Quoted_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.quoted_identifier");
		private final RuleCall cQUOTED_IDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//quoted_identifier:
		//    QUOTED_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//QUOTED_ID
		public RuleCall getQUOTED_IDTerminalRuleCall() { return cQUOTED_IDTerminalRuleCall; }
	}
	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.keyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDIMENSIONKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPROPERTIESKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//keyword:
		//    'DIMENSION'
		//    | 'PROPERTIES';
		@Override public ParserRule getRule() { return rule; }
		
		//'DIMENSION'
		//| 'PROPERTIES'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'DIMENSION'
		public Keyword getDIMENSIONKeyword_0() { return cDIMENSIONKeyword_0; }
		
		//'PROPERTIES'
		public Keyword getPROPERTIESKeyword_1() { return cPROPERTIESKeyword_1; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// MDX Lexical Rules
		//DECIMAL returns ecore::EBigDecimal:
		//    INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class QUOTEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.QUOTE");
		private final Keyword cApostropheKeyword = (Keyword)rule.eContents().get(1);
		
		//// Typed
		//QUOTE:
		//    '\'';
		@Override public ParserRule getRule() { return rule; }
		
		//'\''
		public Keyword getApostropheKeyword() { return cApostropheKeyword; }
	}
	public class ASTERISKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.ASTERISK");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//ASTERISK:
		//    '*';
		@Override public ParserRule getRule() { return rule; }
		
		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}
	public class COLONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.COLON");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//COLON:
		//    ':';
		@Override public ParserRule getRule() { return rule; }
		
		//':'
		public Keyword getColonKeyword() { return cColonKeyword; }
	}
	public class SEMICOLONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.SEMICOLON");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//SEMICOLON:
		//    ';';
		@Override public ParserRule getRule() { return rule; }
		
		//';'
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}
	public class COMMAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.COMMA");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//COMMA:
		//    ',';
		@Override public ParserRule getRule() { return rule; }
		
		//','
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}
	public class CONCATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.CONCAT");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//CONCAT:
		//    '||';
		@Override public ParserRule getRule() { return rule; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}
	public class DOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.DOT");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//DOT:
		//    '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'.'
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}
	public class EQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.EQ");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//EQ:
		//    '=';
		@Override public ParserRule getRule() { return rule; }
		
		//'='
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}
	public class GEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.GE");
		private final Keyword cGreaterThanSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//GE:
		//    '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword() { return cGreaterThanSignEqualsSignKeyword; }
	}
	public class GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.GT");
		private final Keyword cGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//GT:
		//    '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword() { return cGreaterThanSignKeyword; }
	}
	public class LBRACEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.LBRACE");
		private final Keyword cLeftCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//LBRACE:
		//    '{';
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword() { return cLeftCurlyBracketKeyword; }
	}
	public class LEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.LE");
		private final Keyword cLessThanSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//LE:
		//    '<=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword() { return cLessThanSignEqualsSignKeyword; }
	}
	public class LPARENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.LPAREN");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//LPAREN:
		//    '(';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}
	public class LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.LT");
		private final Keyword cLessThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//LT:
		//    '<';
		@Override public ParserRule getRule() { return rule; }
		
		//'<'
		public Keyword getLessThanSignKeyword() { return cLessThanSignKeyword; }
	}
	public class MINUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.MINUS");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//MINUS:
		//    '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class NEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.NE");
		private final Keyword cLessThanSignGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NE:
		//    '<>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword() { return cLessThanSignGreaterThanSignKeyword; }
	}
	public class PLUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.PLUS");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//PLUS:
		//    '+';
		@Override public ParserRule getRule() { return rule; }
		
		//'+'
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}
	public class RBRACEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.RBRACE");
		private final Keyword cRightCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//RBRACE:
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword() { return cRightCurlyBracketKeyword; }
	}
	public class RPARENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.RPAREN");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//RPAREN:
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//')'
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}
	public class SOLIDUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.SOLIDUS");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//SOLIDUS:
		//    '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'/'
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}
	
	
	private final MdxStatementElements pMdxStatement;
	private final SelectStatementElements pSelectStatement;
	private final FormulaSpecificationElements pFormulaSpecification;
	private final Single_formula_specificationElements pSingle_formula_specification;
	private final Set_specificationElements pSet_specification;
	private final Member_specificationElements pMember_specification;
	private final Axis_specification_listElements pAxis_specification_list;
	private final Member_property_def_listElements pMember_property_def_list;
	private final Member_nameElements pMember_name;
	private final Member_property_definitionElements pMember_property_definition;
	private final Set_nameElements pSet_name;
	private final Compound_idElements pCompound_id;
	private final Axis_specificationElements pAxis_specification;
	private final Axis_nameElements pAxis_name;
	private final Dim_propsElements pDim_props;
	private final Property_listElements pProperty_list;
	private final PropertyElements pProperty;
	private final Cube_specificationElements pCube_specification;
	private final Cube_nameElements pCube_name;
	private final Slicer_specificationElements pSlicer_specification;
	private final Cell_propsElements pCell_props;
	private final Cell_property_listElements pCell_property_list;
	private final Cell_propertyElements pCell_property;
	private final Mandatory_cell_propertyElements pMandatory_cell_property;
	private final Provider_specific_cell_propertyElements pProvider_specific_cell_property;
	private final ExpressionElements pExpression;
	private final Value_expressionElements pValue_expression;
	private final Value_xor_expressionElements pValue_xor_expression;
	private final Value_or_expressionElements pValue_or_expression;
	private final Term5Elements pTerm5;
	private final Term4Elements pTerm4;
	private final Term3Elements pTerm3;
	private final Term2Elements pTerm2;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final FunctionElements pFunction;
	private final Value_expression_primaryElements pValue_expression_primary;
	private final Value_expression_primary0Elements pValue_expression_primary0;
	private final Exp_listElements pExp_list;
	private final Case_expressionElements pCase_expression;
	private final When_listElements pWhen_list;
	private final When_clauseElements pWhen_clause;
	private final Comp_opElements pComp_op;
	private final IdentifierElements pIdentifier;
	private final Unquoted_identifierElements pUnquoted_identifier;
	private final Amp_quoted_identifierElements pAmp_quoted_identifier;
	private final Quoted_identifierElements pQuoted_identifier;
	private final KeywordElements pKeyword;
	private final DECIMALElements pDECIMAL;
	private final QUOTEElements pQUOTE;
	private final ASTERISKElements pASTERISK;
	private final COLONElements pCOLON;
	private final SEMICOLONElements pSEMICOLON;
	private final COMMAElements pCOMMA;
	private final CONCATElements pCONCAT;
	private final DOTElements pDOT;
	private final EQElements pEQ;
	private final GEElements pGE;
	private final GTElements pGT;
	private final LBRACEElements pLBRACE;
	private final LEElements pLE;
	private final LPARENElements pLPAREN;
	private final LTElements pLT;
	private final MINUSElements pMINUS;
	private final NEElements pNE;
	private final PLUSElements pPLUS;
	private final RBRACEElements pRBRACE;
	private final RPARENElements pRPAREN;
	private final SOLIDUSElements pSOLIDUS;
	private final TerminalRule tID;
	private final TerminalRule tAMP_QUOTED_ID;
	private final TerminalRule tQUOTED_ID;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MdxGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMdxStatement = new MdxStatementElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pFormulaSpecification = new FormulaSpecificationElements();
		this.pSingle_formula_specification = new Single_formula_specificationElements();
		this.pSet_specification = new Set_specificationElements();
		this.pMember_specification = new Member_specificationElements();
		this.pAxis_specification_list = new Axis_specification_listElements();
		this.pMember_property_def_list = new Member_property_def_listElements();
		this.pMember_name = new Member_nameElements();
		this.pMember_property_definition = new Member_property_definitionElements();
		this.pSet_name = new Set_nameElements();
		this.pCompound_id = new Compound_idElements();
		this.pAxis_specification = new Axis_specificationElements();
		this.pAxis_name = new Axis_nameElements();
		this.pDim_props = new Dim_propsElements();
		this.pProperty_list = new Property_listElements();
		this.pProperty = new PropertyElements();
		this.pCube_specification = new Cube_specificationElements();
		this.pCube_name = new Cube_nameElements();
		this.pSlicer_specification = new Slicer_specificationElements();
		this.pCell_props = new Cell_propsElements();
		this.pCell_property_list = new Cell_property_listElements();
		this.pCell_property = new Cell_propertyElements();
		this.pMandatory_cell_property = new Mandatory_cell_propertyElements();
		this.pProvider_specific_cell_property = new Provider_specific_cell_propertyElements();
		this.pExpression = new ExpressionElements();
		this.pValue_expression = new Value_expressionElements();
		this.pValue_xor_expression = new Value_xor_expressionElements();
		this.pValue_or_expression = new Value_or_expressionElements();
		this.pTerm5 = new Term5Elements();
		this.pTerm4 = new Term4Elements();
		this.pTerm3 = new Term3Elements();
		this.pTerm2 = new Term2Elements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pFunction = new FunctionElements();
		this.pValue_expression_primary = new Value_expression_primaryElements();
		this.pValue_expression_primary0 = new Value_expression_primary0Elements();
		this.pExp_list = new Exp_listElements();
		this.pCase_expression = new Case_expressionElements();
		this.pWhen_list = new When_listElements();
		this.pWhen_clause = new When_clauseElements();
		this.pComp_op = new Comp_opElements();
		this.pIdentifier = new IdentifierElements();
		this.pUnquoted_identifier = new Unquoted_identifierElements();
		this.pAmp_quoted_identifier = new Amp_quoted_identifierElements();
		this.pQuoted_identifier = new Quoted_identifierElements();
		this.pKeyword = new KeywordElements();
		this.pDECIMAL = new DECIMALElements();
		this.pQUOTE = new QUOTEElements();
		this.pASTERISK = new ASTERISKElements();
		this.pCOLON = new COLONElements();
		this.pSEMICOLON = new SEMICOLONElements();
		this.pCOMMA = new COMMAElements();
		this.pCONCAT = new CONCATElements();
		this.pDOT = new DOTElements();
		this.pEQ = new EQElements();
		this.pGE = new GEElements();
		this.pGT = new GTElements();
		this.pLBRACE = new LBRACEElements();
		this.pLE = new LEElements();
		this.pLPAREN = new LPARENElements();
		this.pLT = new LTElements();
		this.pMINUS = new MINUSElements();
		this.pNE = new NEElements();
		this.pPLUS = new PLUSElements();
		this.pRBRACE = new RBRACEElements();
		this.pRPAREN = new RPARENElements();
		this.pSOLIDUS = new SOLIDUSElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.ID");
		this.tAMP_QUOTED_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.AMP_QUOTED_ID");
		this.tQUOTED_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.QUOTED_ID");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.daanse.mdx.xtext.Mdx.DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.daanse.mdx.xtext.Mdx".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MdxStatement:
	//    (SelectStatement);
	public MdxStatementElements getMdxStatementAccess() {
		return pMdxStatement;
	}
	
	public ParserRule getMdxStatementRule() {
		return getMdxStatementAccess().getRule();
	}
	
	//SelectStatement:
	//    {SelectStatement} ('WITH' FormulaSpecification)?
	//    'SELECT' axis_specification_list?
	//    'FROM' cube_specification
	//    ('WHERE' slicer_specification)?
	//    cell_props?;
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}
	
	//FormulaSpecification:
	//    single_formula_specification+;
	public FormulaSpecificationElements getFormulaSpecificationAccess() {
		return pFormulaSpecification;
	}
	
	public ParserRule getFormulaSpecificationRule() {
		return getFormulaSpecificationAccess().getRule();
	}
	
	//single_formula_specification:
	//    member_specification
	//    | set_specification;
	public Single_formula_specificationElements getSingle_formula_specificationAccess() {
		return pSingle_formula_specification;
	}
	
	public ParserRule getSingle_formula_specificationRule() {
		return getSingle_formula_specificationAccess().getRule();
	}
	
	//set_specification:
	//    'SET' set_name 'AS'
	//    (QUOTE expression QUOTE | expression);
	public Set_specificationElements getSet_specificationAccess() {
		return pSet_specification;
	}
	
	public ParserRule getSet_specificationRule() {
		return getSet_specificationAccess().getRule();
	}
	
	//member_specification:
	//    'MEMBER' member_name 'AS'
	//    ((QUOTE value_expression QUOTE | value_expression)
	//    COMMA member_property_def_list?);
	public Member_specificationElements getMember_specificationAccess() {
		return pMember_specification;
	}
	
	public ParserRule getMember_specificationRule() {
		return getMember_specificationAccess().getRule();
	}
	
	//axis_specification_list:
	//    axis_specification (COMMA axis_specification)*;
	public Axis_specification_listElements getAxis_specification_listAccess() {
		return pAxis_specification_list;
	}
	
	public ParserRule getAxis_specification_listRule() {
		return getAxis_specification_listAccess().getRule();
	}
	
	//member_property_def_list:
	//    member_property_definition (COMMA member_property_definition)*;
	public Member_property_def_listElements getMember_property_def_listAccess() {
		return pMember_property_def_list;
	}
	
	public ParserRule getMember_property_def_listRule() {
		return getMember_property_def_listAccess().getRule();
	}
	
	//member_name:
	//    compound_id;
	public Member_nameElements getMember_nameAccess() {
		return pMember_name;
	}
	
	public ParserRule getMember_nameRule() {
		return getMember_nameAccess().getRule();
	}
	
	//member_property_definition:
	//    identifier EQ value_expression;
	public Member_property_definitionElements getMember_property_definitionAccess() {
		return pMember_property_definition;
	}
	
	public ParserRule getMember_property_definitionRule() {
		return getMember_property_definitionAccess().getRule();
	}
	
	//set_name:
	//    compound_id;
	public Set_nameElements getSet_nameAccess() {
		return pSet_name;
	}
	
	public ParserRule getSet_nameRule() {
		return getSet_nameAccess().getRule();
	}
	
	//compound_id:
	//identifier (DOT identifier)*
	//;
	public Compound_idElements getCompound_idAccess() {
		return pCompound_id;
	}
	
	public ParserRule getCompound_idRule() {
		return getCompound_idAccess().getRule();
	}
	
	//axis_specification:
	//    ('NON' 'EMPTY')? expression dim_props? 'ON' axis_name;
	public Axis_specificationElements getAxis_specificationAccess() {
		return pAxis_specification;
	}
	
	public ParserRule getAxis_specificationRule() {
		return getAxis_specificationAccess().getRule();
	}
	
	//axis_name:
	//    identifier;
	public Axis_nameElements getAxis_nameAccess() {
		return pAxis_name;
	}
	
	public ParserRule getAxis_nameRule() {
		return getAxis_nameAccess().getRule();
	}
	
	//dim_props:
	//    'DIMENSION'? 'PROPERTIES' property_list;
	public Dim_propsElements getDim_propsAccess() {
		return pDim_props;
	}
	
	public ParserRule getDim_propsRule() {
		return getDim_propsAccess().getRule();
	}
	
	//property_list:
	//    property (COMMA property)*;
	public Property_listElements getProperty_listAccess() {
		return pProperty_list;
	}
	
	public ParserRule getProperty_listRule() {
		return getProperty_listAccess().getRule();
	}
	
	//property:
	//    compound_id;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//cube_specification:
	//    cube_name;
	public Cube_specificationElements getCube_specificationAccess() {
		return pCube_specification;
	}
	
	public ParserRule getCube_specificationRule() {
		return getCube_specificationAccess().getRule();
	}
	
	//cube_name:
	//    compound_id;
	public Cube_nameElements getCube_nameAccess() {
		return pCube_name;
	}
	
	public ParserRule getCube_nameRule() {
		return getCube_nameAccess().getRule();
	}
	
	//slicer_specification:
	//    expression;
	public Slicer_specificationElements getSlicer_specificationAccess() {
		return pSlicer_specification;
	}
	
	public ParserRule getSlicer_specificationRule() {
		return getSlicer_specificationAccess().getRule();
	}
	
	//cell_props:
	//    'CELL'? 'PROPERTIES' cell_property_list;
	public Cell_propsElements getCell_propsAccess() {
		return pCell_props;
	}
	
	public ParserRule getCell_propsRule() {
		return getCell_propsAccess().getRule();
	}
	
	//cell_property_list:
	//    cell_property COMMA cell_property*;
	public Cell_property_listElements getCell_property_listAccess() {
		return pCell_property_list;
	}
	
	public ParserRule getCell_property_listRule() {
		return getCell_property_listAccess().getRule();
	}
	
	//cell_property:
	//    mandatory_cell_property
	//    | provider_specific_cell_property;
	public Cell_propertyElements getCell_propertyAccess() {
		return pCell_property;
	}
	
	public ParserRule getCell_propertyRule() {
		return getCell_propertyAccess().getRule();
	}
	
	//mandatory_cell_property:
	//    'CELL_ORDINAL'
	//    | 'VALUE'
	//    | 'FORMATTED_VALUE';
	public Mandatory_cell_propertyElements getMandatory_cell_propertyAccess() {
		return pMandatory_cell_property;
	}
	
	public ParserRule getMandatory_cell_propertyRule() {
		return getMandatory_cell_propertyAccess().getRule();
	}
	
	//provider_specific_cell_property:
	//    identifier;
	public Provider_specific_cell_propertyElements getProvider_specific_cell_propertyAccess() {
		return pProvider_specific_cell_property;
	}
	
	public ParserRule getProvider_specific_cell_propertyRule() {
		return getProvider_specific_cell_propertyAccess().getRule();
	}
	
	//expression:
	//    value_expression (COLON value_expression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//value_expression:
	//    term5
	//    (value_xor_expression | value_or_expression)*;
	public Value_expressionElements getValue_expressionAccess() {
		return pValue_expression;
	}
	
	public ParserRule getValue_expressionRule() {
		return getValue_expressionAccess().getRule();
	}
	
	//value_xor_expression:
	//    'XOR' term5;
	public Value_xor_expressionElements getValue_xor_expressionAccess() {
		return pValue_xor_expression;
	}
	
	public ParserRule getValue_xor_expressionRule() {
		return getValue_xor_expressionAccess().getRule();
	}
	
	//value_or_expression:
	//    'OR' term5;
	public Value_or_expressionElements getValue_or_expressionAccess() {
		return pValue_or_expression;
	}
	
	public ParserRule getValue_or_expressionRule() {
		return getValue_or_expressionAccess().getRule();
	}
	
	//term5:
	//    term4
	//    ('AND' term4)*;
	public Term5Elements getTerm5Access() {
		return pTerm5;
	}
	
	public ParserRule getTerm5Rule() {
		return getTerm5Access().getRule();
	}
	
	//term4:
	//    'NOT' term4
	//    | term3;
	public Term4Elements getTerm4Access() {
		return pTerm4;
	}
	
	public ParserRule getTerm4Rule() {
		return getTerm4Access().getRule();
	}
	
	//term3:
	//    term2 (comp_op term2)*;
	public Term3Elements getTerm3Access() {
		return pTerm3;
	}
	
	public ParserRule getTerm3Rule() {
		return getTerm3Access().getRule();
	}
	
	//term2:
	//    term ((CONCAT | PLUS | MINUS) term)*;
	public Term2Elements getTerm2Access() {
		return pTerm2;
	}
	
	public ParserRule getTerm2Rule() {
		return getTerm2Access().getRule();
	}
	
	//term:
	//    factor ((SOLIDUS | ASTERISK) factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//factor:
	//    MINUS value_expression_primary
	//    | PLUS value_expression_primary
	//    | value_expression_primary;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//function:
	//    identifier LPAREN (exp_list)? RPAREN;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//value_expression_primary:
	//    value_expression_primary0
	//    (DOT
	//    (unquoted_identifier
	//    | quoted_identifier
	//    | amp_quoted_identifier
	//    | function))*;
	public Value_expression_primaryElements getValue_expression_primaryAccess() {
		return pValue_expression_primary;
	}
	
	public ParserRule getValue_expression_primaryRule() {
		return getValue_expression_primaryAccess().getRule();
	}
	
	//value_expression_primary0:
	//    function
	//    | (LPAREN exp_list RPAREN)
	//    | (LBRACE (exp_list)? RBRACE)
	//    | case_expression
	//    | STRING
	//    | INT
	//    | identifier;
	public Value_expression_primary0Elements getValue_expression_primary0Access() {
		return pValue_expression_primary0;
	}
	
	public ParserRule getValue_expression_primary0Rule() {
		return getValue_expression_primary0Access().getRule();
	}
	
	//exp_list:
	//    expression (COMMA expression)*;
	public Exp_listElements getExp_listAccess() {
		return pExp_list;
	}
	
	public ParserRule getExp_listRule() {
		return getExp_listAccess().getRule();
	}
	
	//case_expression:
	//    'CASE' (value_expression)?
	//    (when_list)?
	//    ('ELSE' value_expression)?
	//    'END';
	public Case_expressionElements getCase_expressionAccess() {
		return pCase_expression;
	}
	
	public ParserRule getCase_expressionRule() {
		return getCase_expressionAccess().getRule();
	}
	
	//when_list:
	//    when_clause (when_clause)*;
	public When_listElements getWhen_listAccess() {
		return pWhen_list;
	}
	
	public ParserRule getWhen_listRule() {
		return getWhen_listAccess().getRule();
	}
	
	//when_clause:
	//    'WHEN' value_expression 'THEN' value_expression;
	public When_clauseElements getWhen_clauseAccess() {
		return pWhen_clause;
	}
	
	public ParserRule getWhen_clauseRule() {
		return getWhen_clauseAccess().getRule();
	}
	
	//comp_op:
	//    EQ
	//    | NE
	//    | LT
	//    | GT
	//    | LE
	//    | GE;
	public Comp_opElements getComp_opAccess() {
		return pComp_op;
	}
	
	public ParserRule getComp_opRule() {
		return getComp_opAccess().getRule();
	}
	
	//identifier:
	//    (unquoted_identifier
	//    | quoted_identifier);
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//unquoted_identifier:
	//    keyword
	//    | ID;
	public Unquoted_identifierElements getUnquoted_identifierAccess() {
		return pUnquoted_identifier;
	}
	
	public ParserRule getUnquoted_identifierRule() {
		return getUnquoted_identifierAccess().getRule();
	}
	
	//amp_quoted_identifier:
	//    AMP_QUOTED_ID;
	public Amp_quoted_identifierElements getAmp_quoted_identifierAccess() {
		return pAmp_quoted_identifier;
	}
	
	public ParserRule getAmp_quoted_identifierRule() {
		return getAmp_quoted_identifierAccess().getRule();
	}
	
	//quoted_identifier:
	//    QUOTED_ID;
	public Quoted_identifierElements getQuoted_identifierAccess() {
		return pQuoted_identifier;
	}
	
	public ParserRule getQuoted_identifierRule() {
		return getQuoted_identifierAccess().getRule();
	}
	
	//keyword:
	//    'DIMENSION'
	//    | 'PROPERTIES';
	public KeywordElements getKeywordAccess() {
		return pKeyword;
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}
	
	//// MDX Lexical Rules
	//DECIMAL returns ecore::EBigDecimal:
	//    INT '.' INT;
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//// Typed
	//QUOTE:
	//    '\'';
	public QUOTEElements getQUOTEAccess() {
		return pQUOTE;
	}
	
	public ParserRule getQUOTERule() {
		return getQUOTEAccess().getRule();
	}
	
	//ASTERISK:
	//    '*';
	public ASTERISKElements getASTERISKAccess() {
		return pASTERISK;
	}
	
	public ParserRule getASTERISKRule() {
		return getASTERISKAccess().getRule();
	}
	
	//COLON:
	//    ':';
	public COLONElements getCOLONAccess() {
		return pCOLON;
	}
	
	public ParserRule getCOLONRule() {
		return getCOLONAccess().getRule();
	}
	
	//SEMICOLON:
	//    ';';
	public SEMICOLONElements getSEMICOLONAccess() {
		return pSEMICOLON;
	}
	
	public ParserRule getSEMICOLONRule() {
		return getSEMICOLONAccess().getRule();
	}
	
	//COMMA:
	//    ',';
	public COMMAElements getCOMMAAccess() {
		return pCOMMA;
	}
	
	public ParserRule getCOMMARule() {
		return getCOMMAAccess().getRule();
	}
	
	//CONCAT:
	//    '||';
	public CONCATElements getCONCATAccess() {
		return pCONCAT;
	}
	
	public ParserRule getCONCATRule() {
		return getCONCATAccess().getRule();
	}
	
	//DOT:
	//    '.';
	public DOTElements getDOTAccess() {
		return pDOT;
	}
	
	public ParserRule getDOTRule() {
		return getDOTAccess().getRule();
	}
	
	//EQ:
	//    '=';
	public EQElements getEQAccess() {
		return pEQ;
	}
	
	public ParserRule getEQRule() {
		return getEQAccess().getRule();
	}
	
	//GE:
	//    '>=';
	public GEElements getGEAccess() {
		return pGE;
	}
	
	public ParserRule getGERule() {
		return getGEAccess().getRule();
	}
	
	//GT:
	//    '>';
	public GTElements getGTAccess() {
		return pGT;
	}
	
	public ParserRule getGTRule() {
		return getGTAccess().getRule();
	}
	
	//LBRACE:
	//    '{';
	public LBRACEElements getLBRACEAccess() {
		return pLBRACE;
	}
	
	public ParserRule getLBRACERule() {
		return getLBRACEAccess().getRule();
	}
	
	//LE:
	//    '<=';
	public LEElements getLEAccess() {
		return pLE;
	}
	
	public ParserRule getLERule() {
		return getLEAccess().getRule();
	}
	
	//LPAREN:
	//    '(';
	public LPARENElements getLPARENAccess() {
		return pLPAREN;
	}
	
	public ParserRule getLPARENRule() {
		return getLPARENAccess().getRule();
	}
	
	//LT:
	//    '<';
	public LTElements getLTAccess() {
		return pLT;
	}
	
	public ParserRule getLTRule() {
		return getLTAccess().getRule();
	}
	
	//MINUS:
	//    '-';
	public MINUSElements getMINUSAccess() {
		return pMINUS;
	}
	
	public ParserRule getMINUSRule() {
		return getMINUSAccess().getRule();
	}
	
	//NE:
	//    '<>';
	public NEElements getNEAccess() {
		return pNE;
	}
	
	public ParserRule getNERule() {
		return getNEAccess().getRule();
	}
	
	//PLUS:
	//    '+';
	public PLUSElements getPLUSAccess() {
		return pPLUS;
	}
	
	public ParserRule getPLUSRule() {
		return getPLUSAccess().getRule();
	}
	
	//RBRACE:
	//    '}';
	public RBRACEElements getRBRACEAccess() {
		return pRBRACE;
	}
	
	public ParserRule getRBRACERule() {
		return getRBRACEAccess().getRule();
	}
	
	//RPAREN:
	//    ')';
	public RPARENElements getRPARENAccess() {
		return pRPAREN;
	}
	
	public ParserRule getRPARENRule() {
		return getRPARENAccess().getRule();
	}
	
	//SOLIDUS:
	//    '/';
	public SOLIDUSElements getSOLIDUSAccess() {
		return pSOLIDUS;
	}
	
	public ParserRule getSOLIDUSRule() {
		return getSOLIDUSAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal AMP_QUOTED_ID:
	//    '[&' (ID ((' ' | '\t' | '.')+ ID)* | DIGIT) ']';
	public TerminalRule getAMP_QUOTED_IDRule() {
		return tAMP_QUOTED_ID;
	}
	
	//terminal QUOTED_ID:
	//    ('[' (ID ((' ' | '\t' | '.')+ ID)* | DIGIT) ']');
	public TerminalRule getQUOTED_IDRule() {
		return tQUOTED_ID;
	}
	
	//terminal LETTER:
	//    ("$" |
	//    "A".."Z" |
	//    "_" |
	//    "a".."z" |
	//    "\u00c0".."\u00d6" |
	//    "\u00d8".."\u00f6" |
	//    "\u00f8".."\u00ff" |
	//    "\u0100".."\u1fff" |
	//    "\u3040".."\u318f" |
	//    "\u3300".."\u337f" |
	//    "\u3400".."\u3d2d" |
	//    "\u4e00".."\u9fff" |
	//    "\uf900".."\ufaff");
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DIGIT:
	//    ("0".."9" |
	//    "\u0660".."\u0669" |
	//    "\u06f0".."\u06f9" |
	//    "\u0966".."\u096f" |
	//    "\u09e6".."\u09ef" |
	//    "\u0a66".."\u0a6f" |
	//    "\u0ae6".."\u0aef" |
	//    "\u0b66".."\u0b6f" |
	//    "\u0be7".."\u0bef" |
	//    "\u0c66".."\u0c6f" |
	//    "\u0ce6".."\u0cef" |
	//    "\u0d66".."\u0d6f" |
	//    "\u0e50".."\u0e59" |
	//    "\u0ed0".."\u0ed9" |
	//    "\u1040".."\u1049");
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
