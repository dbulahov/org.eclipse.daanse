/*
 * generated by Xtext 2.28.0
 */
lexer grammar InternalMdxLexer;

@header {
package org.eclipse.daanse.mdx.xtext.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

FORMATTED_VALUE : ('F'|'f')('O'|'o')('R'|'r')('M'|'m')('A'|'a')('T'|'t')('T'|'t')('E'|'e')('D'|'d')'_'('V'|'v')('A'|'a')('L'|'l')('U'|'u')('E'|'e');

CELL_ORDINAL : ('C'|'c')('E'|'e')('L'|'l')('L'|'l')'_'('O'|'o')('R'|'r')('D'|'d')('I'|'i')('N'|'n')('A'|'a')('L'|'l');

PROPERTIES : ('P'|'p')('R'|'r')('O'|'o')('P'|'p')('E'|'e')('R'|'r')('T'|'t')('I'|'i')('E'|'e')('S'|'s');

DIMENSION : ('D'|'d')('I'|'i')('M'|'m')('E'|'e')('N'|'n')('S'|'s')('I'|'i')('O'|'o')('N'|'n');

MEMBER : ('M'|'m')('E'|'e')('M'|'m')('B'|'b')('E'|'e')('R'|'r');

SELECT : ('S'|'s')('E'|'e')('L'|'l')('E'|'e')('C'|'c')('T'|'t');

EMPTY : ('E'|'e')('M'|'m')('P'|'p')('T'|'t')('Y'|'y');

VALUE : ('V'|'v')('A'|'a')('L'|'l')('U'|'u')('E'|'e');

WHERE : ('W'|'w')('H'|'h')('E'|'e')('R'|'r')('E'|'e');

CASE : ('C'|'c')('A'|'a')('S'|'s')('E'|'e');

CELL : ('C'|'c')('E'|'e')('L'|'l')('L'|'l');

ELSE : ('E'|'e')('L'|'l')('S'|'s')('E'|'e');

FROM : ('F'|'f')('R'|'r')('O'|'o')('M'|'m');

THEN : ('T'|'t')('H'|'h')('E'|'e')('N'|'n');

WHEN : ('W'|'w')('H'|'h')('E'|'e')('N'|'n');

WITH : ('W'|'w')('I'|'i')('T'|'t')('H'|'h');

AND : ('A'|'a')('N'|'n')('D'|'d');

END : ('E'|'e')('N'|'n')('D'|'d');

NON : ('N'|'n')('O'|'o')('N'|'n');

NOT : ('N'|'n')('O'|'o')('T'|'t');

SET : ('S'|'s')('E'|'e')('T'|'t');

XOR : ('X'|'x')('O'|'o')('R'|'r');

LessThanSignEqualsSign : '<''=';

LessThanSignGreaterThanSign : '<''>';

GreaterThanSignEqualsSign : '>''=';

AS : ('A'|'a')('S'|'s');

ON : ('O'|'o')('N'|'n');

OR : ('O'|'o')('R'|'r');

VerticalLineVerticalLine : '|''|';

Apostrophe : '\'';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

LeftCurlyBracket : '{';

RightCurlyBracket : '}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*;

RULE_AMP_QUOTED_ID : '[&' (RULE_ID ((' '|'\t'|'.')+ RULE_ID)*|RULE_DIGIT) ']';

RULE_QUOTED_ID : '[' (RULE_ID ((' '|'\t'|'.')+ RULE_ID)*|RULE_DIGIT) ']';

RULE_LETTER : ('$'|'A'..'Z'|'_'|'a'..'z'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00F6'|'\u00F8'..'\u00FF'|'\u0100'..'\u1FFF'|'\u3040'..'\u318F'|'\u3300'..'\u337F'|'\u3400'..'\u3D2D'|'\u4E00'..'\u9FFF'|'\uF900'..'\uFAFF');

fragment RULE_DIGIT : ('0'..'9'|'\u0660'..'\u0669'|'\u06F0'..'\u06F9'|'\u0966'..'\u096F'|'\u09E6'..'\u09EF'|'\u0A66'..'\u0A6F'|'\u0AE6'..'\u0AEF'|'\u0B66'..'\u0B6F'|'\u0BE7'..'\u0BEF'|'\u0C66'..'\u0C6F'|'\u0CE6'..'\u0CEF'|'\u0D66'..'\u0D6F'|'\u0E50'..'\u0E59'|'\u0ED0'..'\u0ED9'|'\u1040'..'\u1049');

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
