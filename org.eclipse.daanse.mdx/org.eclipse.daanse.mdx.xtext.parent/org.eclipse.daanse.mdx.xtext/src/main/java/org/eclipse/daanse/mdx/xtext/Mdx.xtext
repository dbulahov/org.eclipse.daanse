grammar org.eclipse.daanse.mdx.xtext.Mdx with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate mdx "http://www.eclipse.org/daanse/mdx/xtext/Mdx"

MdxStatement:
	(statement=SelectStatement);

SelectStatement:
	{SelectStatement} ('WITH' FormulaSpecification)?
	'SELECT' AxisSpecificationList?
	'FROM' CubeSpecification
	('WHERE' SlicerSpecification)?
	CellPropeties?;

FormulaSpecification:
	SingleFormulaSpecification+;

SingleFormulaSpecification:
	MemberSpecification
	| SetSpecification;

SetSpecification:
	'SET' SetName 'AS'
	(QUOTE Expression QUOTE | Expression);

MemberSpecification:
	'MEMBER' MemberName 'AS'
	((QUOTE ValueExpression QUOTE | ValueExpression)
	COMMA MemberPropertyDefList?);

AxisSpecificationList:
	AxisSpecification (COMMA AxisSpecification)*;

MemberPropertyDefList:
	MemberPropertyDefinition (COMMA MemberPropertyDefinition)*;

MemberName:
	CompoundId;

MemberPropertyDefinition:
	Identifier EQ ValueExpression;

SetName:
	CompoundId;

CompoundId:
	Identifier (DOT Identifier)*;

AxisSpecification:
	('NON' 'EMPTY')? Expression DimProperties? 'ON' AxisName;

AxisName:
	Identifier;

DimProperties:
	'DIMENSION'? 'PROPERTIES' PropertyList;

PropertyList:
	Property (COMMA Property)*;

Property:
	CompoundId;

CubeSpecification:
	CubeName;

CubeName:
	CompoundId;

SlicerSpecification:
	Expression;

CellPropeties:
	'CELL'? 'PROPERTIES' CellPropertyList;

CellPropertyList:
	CellProperty COMMA CellProperty*;

CellProperty:
	MandatoryCellProperty
	| ProviderSpecificCellProperty;

MandatoryCellProperty:
	'CELL_ORDINAL'
	| 'VALUE'
	| 'FORMATTED_VALUE';

ProviderSpecificCellProperty:
	Identifier;

Expression:
	ValueExpression (COLON ValueExpression)*;

ValueExpression:
	Term5
	(ValueXorExpression | ValueOrExpression)*;

ValueXorExpression:
	'XOR' Term5;

ValueOrExpression:
	'OR' Term5;

Term5:
	Term4
	('AND' Term4)*;

Term4:
	'NOT' Term4
	| Term3;

Term3:
	Term2 (CompatingOperator Term2)*;

Term2:
	Term ((CONCAT | PLUS | MINUS) Term)*;

Term:
	Factor ((SOLIDUS | ASTERISK) Factor)*;

Factor:
	MINUS ValueExpressionPrimary
	| PLUS ValueExpressionPrimary
	| ValueExpressionPrimary;

Function:
	Identifier LPAREN (ExpressionList)? RPAREN;

ValueExpressionPrimary:
	ValueExpressionPrimary0
	(DOT
	(UnquotedIdentifier
	| QuotedIdentifier
	| AmpQuotedIdentifier
	| Function))*;

ValueExpressionPrimary0:
	Function
	| (LPAREN ExpressionList RPAREN)
	| (LBRACE (ExpressionList)? RBRACE)
	| CaseExpression
	| STRING
	| INT
	| Identifier;

ExpressionList:
	Expression (COMMA Expression)*;

CaseExpression:
	'CASE' (ValueExpression)?
	(WhenList)?
	('ELSE' ValueExpression)?
	'END';

WhenList:
	WhenClause (WhenClause)*;

WhenClause:
	'WHEN' ValueExpression 'THEN' ValueExpression;

CompatingOperator:
	EQ
	| NE
	| LT
	| GT
	| LE
	| GE;

Identifier:
	(UnquotedIdentifier
	| QuotedIdentifier);

UnquotedIdentifier:
	Keyword
	| ID;

AmpQuotedIdentifier:
	AMP_QUOTED_ID;

QuotedIdentifier:
	QUOTED_ID;

Keyword:
	'DIMENSION'
	| 'PROPERTIES';

// MDX Lexical Rules					
DECIMAL returns ecore::EBigDecimal:
	INT '.' INT;

// Typed
QUOTE:
	'\'';

ASTERISK:
	'*';

COLON:
	':';

SEMICOLON:
	';';

COMMA:
	',';

CONCAT:
	'||';

DOT:
	'.';

EQ:
	'=';

GE:
	'>=';

GT:
	'>';

LBRACE:
	'{';

LE:
	'<=';

LPAREN:
	'(';

LT:
	'<';

MINUS:
	'-';

NE:
	'<>';

PLUS:
	'+';

RBRACE:
	'}';

RPAREN:
	')';

SOLIDUS:
	'/';

@Override
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$')*;

terminal AMP_QUOTED_ID:
	'[&' (ID ((' ' | '\t' | '.')+ ID)* | DIGIT) ']';

terminal QUOTED_ID:
	('[' (ID ((' ' | '\t' | '.')+ ID)* | DIGIT) ']');

terminal LETTER:
	("$" |
	"A".."Z" |
	"_" |
	"a".."z" |
	"\u00c0".."\u00d6" |
	"\u00d8".."\u00f6" |
	"\u00f8".."\u00ff" |
	"\u0100".."\u1fff" |
	"\u3040".."\u318f" |
	"\u3300".."\u337f" |
	"\u3400".."\u3d2d" |
	"\u4e00".."\u9fff" |
	"\uf900".."\ufaff");

terminal DIGIT:
	("0".."9" |
	"\u0660".."\u0669" |
	"\u06f0".."\u06f9" |
	"\u0966".."\u096f" |
	"\u09e6".."\u09ef" |
	"\u0a66".."\u0a6f" |
	"\u0ae6".."\u0aef" |
	"\u0b66".."\u0b6f" |
	"\u0be7".."\u0bef" |
	"\u0c66".."\u0c6f" |
	"\u0ce6".."\u0cef" |
	"\u0d66".."\u0d6f" |
	"\u0e50".."\u0e59" |
	"\u0ed0".."\u0ed9" |
	"\u1040".."\u1049");