/*
 * generated by Xtext 2.27.0
 */
package org.eclipse.daanse.mdx.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.daanse.mdx.xtext.ide.contentassist.antlr.internal.InternalMdxParser;
import org.eclipse.daanse.mdx.xtext.services.MdxGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MdxParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MdxGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MdxGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSingle_formula_specificationAccess().getAlternatives(), "rule__Single_formula_specification__Alternatives");
			builder.put(grammarAccess.getSet_specificationAccess().getAlternatives_3(), "rule__Set_specification__Alternatives_3");
			builder.put(grammarAccess.getMember_specificationAccess().getAlternatives_3_0(), "rule__Member_specification__Alternatives_3_0");
			builder.put(grammarAccess.getCell_propertyAccess().getAlternatives(), "rule__Cell_property__Alternatives");
			builder.put(grammarAccess.getMandatory_cell_propertyAccess().getAlternatives(), "rule__Mandatory_cell_property__Alternatives");
			builder.put(grammarAccess.getValue_expressionAccess().getAlternatives_1(), "rule__Value_expression__Alternatives_1");
			builder.put(grammarAccess.getTerm4Access().getAlternatives(), "rule__Term4__Alternatives");
			builder.put(grammarAccess.getTerm2Access().getAlternatives_1_0(), "rule__Term2__Alternatives_1_0");
			builder.put(grammarAccess.getTermAccess().getAlternatives_1_0(), "rule__Term__Alternatives_1_0");
			builder.put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
			builder.put(grammarAccess.getValue_expression_primaryAccess().getAlternatives_1_1(), "rule__Value_expression_primary__Alternatives_1_1");
			builder.put(grammarAccess.getValue_expression_primary0Access().getAlternatives(), "rule__Value_expression_primary0__Alternatives");
			builder.put(grammarAccess.getComp_opAccess().getAlternatives(), "rule__Comp_op__Alternatives");
			builder.put(grammarAccess.getIdentifierAccess().getAlternatives(), "rule__Identifier__Alternatives");
			builder.put(grammarAccess.getUnquoted_identifierAccess().getAlternatives(), "rule__Unquoted_identifier__Alternatives");
			builder.put(grammarAccess.getKeywordAccess().getAlternatives(), "rule__Keyword__Alternatives");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup(), "rule__SelectStatement__Group__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_1(), "rule__SelectStatement__Group_1__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_6(), "rule__SelectStatement__Group_6__0");
			builder.put(grammarAccess.getSet_specificationAccess().getGroup(), "rule__Set_specification__Group__0");
			builder.put(grammarAccess.getSet_specificationAccess().getGroup_3_0(), "rule__Set_specification__Group_3_0__0");
			builder.put(grammarAccess.getMember_specificationAccess().getGroup(), "rule__Member_specification__Group__0");
			builder.put(grammarAccess.getMember_specificationAccess().getGroup_3(), "rule__Member_specification__Group_3__0");
			builder.put(grammarAccess.getMember_specificationAccess().getGroup_3_0_0(), "rule__Member_specification__Group_3_0_0__0");
			builder.put(grammarAccess.getAxis_specification_listAccess().getGroup(), "rule__Axis_specification_list__Group__0");
			builder.put(grammarAccess.getAxis_specification_listAccess().getGroup_1(), "rule__Axis_specification_list__Group_1__0");
			builder.put(grammarAccess.getMember_property_def_listAccess().getGroup(), "rule__Member_property_def_list__Group__0");
			builder.put(grammarAccess.getMember_property_def_listAccess().getGroup_1(), "rule__Member_property_def_list__Group_1__0");
			builder.put(grammarAccess.getMember_property_definitionAccess().getGroup(), "rule__Member_property_definition__Group__0");
			builder.put(grammarAccess.getCompound_idAccess().getGroup(), "rule__Compound_id__Group__0");
			builder.put(grammarAccess.getCompound_idAccess().getGroup_1(), "rule__Compound_id__Group_1__0");
			builder.put(grammarAccess.getAxis_specificationAccess().getGroup(), "rule__Axis_specification__Group__0");
			builder.put(grammarAccess.getAxis_specificationAccess().getGroup_0(), "rule__Axis_specification__Group_0__0");
			builder.put(grammarAccess.getDim_propsAccess().getGroup(), "rule__Dim_props__Group__0");
			builder.put(grammarAccess.getProperty_listAccess().getGroup(), "rule__Property_list__Group__0");
			builder.put(grammarAccess.getProperty_listAccess().getGroup_1(), "rule__Property_list__Group_1__0");
			builder.put(grammarAccess.getCell_propsAccess().getGroup(), "rule__Cell_props__Group__0");
			builder.put(grammarAccess.getCell_property_listAccess().getGroup(), "rule__Cell_property_list__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getValue_expressionAccess().getGroup(), "rule__Value_expression__Group__0");
			builder.put(grammarAccess.getValue_xor_expressionAccess().getGroup(), "rule__Value_xor_expression__Group__0");
			builder.put(grammarAccess.getValue_or_expressionAccess().getGroup(), "rule__Value_or_expression__Group__0");
			builder.put(grammarAccess.getTerm5Access().getGroup(), "rule__Term5__Group__0");
			builder.put(grammarAccess.getTerm5Access().getGroup_1(), "rule__Term5__Group_1__0");
			builder.put(grammarAccess.getTerm4Access().getGroup_0(), "rule__Term4__Group_0__0");
			builder.put(grammarAccess.getTerm3Access().getGroup(), "rule__Term3__Group__0");
			builder.put(grammarAccess.getTerm3Access().getGroup_1(), "rule__Term3__Group_1__0");
			builder.put(grammarAccess.getTerm2Access().getGroup(), "rule__Term2__Group__0");
			builder.put(grammarAccess.getTerm2Access().getGroup_1(), "rule__Term2__Group_1__0");
			builder.put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
			builder.put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_0(), "rule__Factor__Group_0__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getValue_expression_primaryAccess().getGroup(), "rule__Value_expression_primary__Group__0");
			builder.put(grammarAccess.getValue_expression_primaryAccess().getGroup_1(), "rule__Value_expression_primary__Group_1__0");
			builder.put(grammarAccess.getValue_expression_primary0Access().getGroup_1(), "rule__Value_expression_primary0__Group_1__0");
			builder.put(grammarAccess.getValue_expression_primary0Access().getGroup_2(), "rule__Value_expression_primary0__Group_2__0");
			builder.put(grammarAccess.getExp_listAccess().getGroup(), "rule__Exp_list__Group__0");
			builder.put(grammarAccess.getExp_listAccess().getGroup_1(), "rule__Exp_list__Group_1__0");
			builder.put(grammarAccess.getCase_expressionAccess().getGroup(), "rule__Case_expression__Group__0");
			builder.put(grammarAccess.getCase_expressionAccess().getGroup_3(), "rule__Case_expression__Group_3__0");
			builder.put(grammarAccess.getWhen_listAccess().getGroup(), "rule__When_list__Group__0");
			builder.put(grammarAccess.getWhen_clauseAccess().getGroup(), "rule__When_clause__Group__0");
			builder.put(grammarAccess.getDECIMALAccess().getGroup(), "rule__DECIMAL__Group__0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MdxGrammarAccess grammarAccess;

	@Override
	protected InternalMdxParser createParser() {
		InternalMdxParser result = new InternalMdxParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MdxGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MdxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
