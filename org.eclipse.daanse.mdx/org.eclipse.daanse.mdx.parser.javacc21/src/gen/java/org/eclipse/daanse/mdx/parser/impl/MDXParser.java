/* Generated by: JavaCC 21 Parser Generator. MDXParser.java */
package org.eclipse.daanse.mdx.parser.impl;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Map;
import java.util.concurrent.CancellationException;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseMdxStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseDrillthroughStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseReturnItems;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseReturnItem;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectWithClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectQueryAxesClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectSlicerAxisClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectCellPropertyListClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseCreateMemberBodyClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseMemberPropertyDefinition;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseFormulaExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTexpressionOrEmpty;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTexpOrEmptyList;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTexpList;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTexpressionEof;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseIdentifier;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseNameSegment;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseKeyIdentifier;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseAmpId;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseKeyword;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseCompoundId;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTunaliasedExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm5;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm4;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm3;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm2;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTfactor;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTprimary;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTsegmentOrFuncall;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseNumericLiteral;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTatom;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTcaseExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseCellProperty;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseCreateSetBodyClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectQueryAxisClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectSubcubeClause;
import static org.eclipse.daanse.mdx.parser.impl.mdxConstants.TokenType.*;
import java.util.EnumSet;
import java.util.LinkedList;
import org.eclipse.daanse.mdx.parser.api.model.CompoundId;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectQueryClause;
import org.eclipse.daanse.mdx.parser.api.model.DrillthroughStatement;
import java.io.IOException;
import java.util.concurrent.CancellationException;
import java.math.BigDecimal;
import java.util.List;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectQueryAxesClause;
import org.eclipse.daanse.mdx.parser.api.model.SelectStatement;
import org.eclipse.daanse.mdx.parser.api.model.select.CreateMemberBodyClause;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectQueryAsteriskClause;
import java.nio.file.Path;
import java.util.ArrayList;
import org.eclipse.daanse.mdx.parser.api.model.CellProperty;
import org.eclipse.daanse.mdx.parser.api.model.FormulaExpression;
import org.eclipse.daanse.mdx.parser.api.model.Segment;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectSlicerAxisClause;
import java.io.PrintStream;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectCellPropertyListClause;
import org.eclipse.daanse.mdx.parser.api.model.Literal;
import java.nio.charset.Charset;
import org.eclipse.daanse.mdx.parser.api.model.NumericLiteral;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectWithClause;
import org.eclipse.daanse.mdx.parser.api.model.MemberPropertyDefinition;
import java.util.Collections;
import java.nio.file.Files;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectSubcubeClause;
import java.io.Reader;
import java.io.InputStreamReader;
import org.eclipse.daanse.mdx.parser.api.model.SymbolLiteral;
import org.eclipse.daanse.mdx.parser.api.model.select.CreateSetBodyClause;
import org.eclipse.daanse.mdx.parser.api.model.CallExpression;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectQueryAxisClause;
import org.eclipse.daanse.mdx.parser.api.model.KeySegment;
import org.eclipse.daanse.mdx.parser.api.model.MdxStatement;
import org.eclipse.daanse.mdx.parser.api.model.NameSegment;
import org.eclipse.daanse.mdx.parser.api.model.StringLiteral;
import org.eclipse.daanse.mdx.parser.api.model.ReturnItem;
import org.eclipse.daanse.mdx.parser.api.model.Axis;
import java.util.Arrays;
import java.util.HashMap;
import org.eclipse.daanse.mdx.parser.api.model.NullLiteral;
import java.util.ListIterator;
import org.eclipse.daanse.mdx.parser.api.model.Expression;
@SuppressWarnings("unused")
public class MDXParser implements mdxConstants {
    private static String stripQuotes(String s, String prefix, String suffix, String quoted) {
        assert s.startsWith(prefix)&&s.endsWith(suffix);
        s= s.substring(prefix.length(), s.length()-suffix.length());
        s= s.replace(quoted, suffix);
        return s;
    }

    private Expression createCall(Expression left, Segment segment, List<Expression> expressions) {
        final String name= segment instanceof NameSegment?((NameSegment) segment).name():
        null;
        if (expressions!=null) {
            if (left!=null) {
                // Method syntax: "x.foo(arg1, arg2)" or "x.foo()"
                expressions.add(0, left);
                return new CallExpression(name, CallExpression.Type.Method, expressions);
            }
            else  {
                // Function syntax: "foo(arg1, arg2)" or "foo()"
                return new CallExpression(name, CallExpression.Type.Function, expressions);
            }
        }
        else  {
            // Member syntax: "foo.bar"
            // or property syntax: "foo.RESERVED_WORD"
            CallExpression.Type type;
            boolean call= false;
            switch(segment.quoting()) {
                case UNQUOTED:
                type= CallExpression.Type.Property;
                call= true;
                //funTable.isProperty(name); TODO: all is call
                break;
                case QUOTED:
                type= CallExpression.Type.PropertyQuoted;
                break;
                default:
                type= CallExpression.Type.PropertyAmpersAndQuoted;
                break;
            }
            if (left instanceof CompoundId&&!call) {
                List<Segment> newSegments= new ArrayList<Segment> (((CompoundId) left).segments());
                newSegments.add(segment);
                return new CompoundId(newSegments);
            }
            else if (left== null) {
                return new CompoundId(List.of(segment));
            }
            else  {
                return new CallExpression(name, type, List.of(left));
            }
        }
    }

    static final int UNLIMITED= Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean scanToEnd, hitFailure;
    private String currentlyParsedProduction, currentLookaheadProduction;
    private int lookaheadRoutineNesting, nonTerminalNesting;
    private boolean cancelled;
    public void cancel() {
        cancelled= true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public mdxLexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public MDXParser(String inputSource, CharSequence content) {
        this(new mdxLexer(inputSource, content));
    }

    public MDXParser(CharSequence content) {
        this("input", content);
    }

    /**
   * @param inputSource just the name of the input source (typically the filename) that 
   * will be used in error messages and so on.
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public MDXParser(String inputSource, Path path) throws IOException {
        this(inputSource, mdxLexer.stringFromBytes(Files.readAllBytes(path)));
    }

    public MDXParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, mdxLexer.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public MDXParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public MDXParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public MDXParser(Reader reader) {
        this(new mdxLexer("input", reader));
    }

    /** Constructor with user supplied Lexer. */
    public MDXParser(mdxLexer lexer) {
        token_source= lexer;
        lastConsumedToken= lexer.DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    final private Token nextToken(final Token tok) {
        Token result= token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result= token_source.getNextToken(result);
        }
        nextTokenType= null;
        return result;
    }

    /**
   * @return the next Token off the stream. This is the same as #getToken(1)
   */
    final public Token getNextToken() {
        return getToken(1);
    }

    /**
 * @param index how many tokens to look ahead
 * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream. 
 * If we are in a lookahead, it looks ahead from the currentLookaheadToken
 * Otherwise, it is the lastConsumedToken. If you pass in a negative
 * number it goes backward.
 */
    final public Token getToken(final int index) {
        Token t= currentLookaheadToken== null?lastConsumedToken:
        currentLookaheadToken;
        for (int i= 0; i<index; i++) {
            t= nextToken(t);
        }
        for (int i= 0; i> index; i--) {
            t= t.getPrevious();
            if (t== null) break;
        }
        return t;
    }

    private final TokenType nextTokenType() {
        if (nextTokenType== null) {
            nextTokenType= nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.add(tt);
        }
        token_source.reset(getToken(0));
        nextTokenType= null;
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.remove(tt);
        }
        token_source.reset(getToken(0));
        nextTokenType= null;
        return result;
    }

    private static HashMap<TokenType[], EnumSet<TokenType> > enumSetCache= new HashMap<> ();
    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key= new TokenType[1+rest.length];
        key[0]= first;
        if (rest.length> 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result= (rest.length== 0)?EnumSet.of(first):
        EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    // cc21/mdx.jj:458:1
    final public// ----------------------------------------------------------------------------
    // MDX Statement
    //
    // <statement> ::= <selectStatement>
    //                   | <drillthroughStatement>
    //                   | <explainStatement>
    //
    // <selectStatement> ::= [WITH <formulaSpecification>]
    //                         SELECT [<SelectQueryAxisClause>
    //                                [, <SelectQueryAxisClause>...]]
    //                         FROM [<cubeSpecification>]
    //                         [WHERE <slicerSpecification>]
    //                         [<cellProps>]
    //
    // <drillthroughStatment> ::=
    //     DRILLTHROUGH
    //     [ MAXROWS <count> ]
    //     [ FIRSTROWSET <count> ]
    //     <selectStatement>
    //     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
    //
    // <explainStatement> ::=
    //     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
    //
    MdxStatement parseMdxStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseMdxStatement";
        ASTparseMdxStatement parseMdxStatement1= null;
        if (buildTree) {
            parseMdxStatement1= new ASTparseMdxStatement();
            openNodeScope(parseMdxStatement1);
        }
        MdxStatement mdxStatement= null;
        ParseException parseException1= null;
        int callStackSize2= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:463:3
            pushOntoCallStack("parseMdxStatement", "cc21/mdx.jj", 463, 3);
            try {
                mdxStatement= parseSelectStatement();
            }
            finally {
                popCallStack();
            }
            // Code for EndOfFile specified at cc21/mdx.jj:476:3
            consumeToken(EOF);
            // Code for CodeBlock specified at cc21/mdx.jj:477:3
            return mdxStatement;
        }
        catch(ParseException e) {
            parseException1= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2);
            if (parseMdxStatement1!=null) {
                if (parseException1== null) {
                    closeNodeScope(parseMdxStatement1, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:482:1
    final public DrillthroughStatement parseDrillthroughStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseDrillthroughStatement";
        ASTparseDrillthroughStatement parseDrillthroughStatement2= null;
        if (buildTree) {
            parseDrillthroughStatement2= new ASTparseDrillthroughStatement();
            openNodeScope(parseDrillthroughStatement2);
        }
        SelectStatement selectStatement= null;
        List<ReturnItem> returnItems= null;
        ParseException parseException13= null;
        int callStackSize14= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.jj:488:3
            consumeToken(DRILLTHROUGH);
            // Code for ZeroOrOne specified at cc21/mdx.jj:489:3
            if (nextTokenType()== MAXROWS) {
                // Code for RegexpRef specified at cc21/mdx.jj:489:4
                consumeToken(MAXROWS);
                // Code for RegexpRef specified at cc21/mdx.jj:489:16
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:490:3
            if (nextTokenType()== FIRSTROWSET) {
                // Code for RegexpRef specified at cc21/mdx.jj:490:4
                consumeToken(FIRSTROWSET);
                // Code for RegexpRef specified at cc21/mdx.jj:490:20
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for NonTerminal specified at cc21/mdx.jj:491:3
            pushOntoCallStack("parseDrillthroughStatement", "cc21/mdx.jj", 491, 3);
            try {
                selectStatement= parseSelectStatement();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:492:3
            if (nextTokenType()== RETURN) {
                // Code for RegexpRef specified at cc21/mdx.jj:493:5
                consumeToken(RETURN);
                // Code for NonTerminal specified at cc21/mdx.jj:493:16
                pushOntoCallStack("parseDrillthroughStatement", "cc21/mdx.jj", 493, 16);
                try {
                    returnItems= parseReturnItems();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:495:3
            return new DrillthroughStatement();
        }
        catch(ParseException e) {
            parseException13= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize14);
            if (parseDrillthroughStatement2!=null) {
                if (parseException13== null) {
                    closeNodeScope(parseDrillthroughStatement2, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:500:1
    final public List<ReturnItem> parseReturnItems() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseReturnItems";
        ASTparseReturnItems parseReturnItems3= null;
        if (buildTree) {
            parseReturnItems3= new ASTparseReturnItems();
            openNodeScope(parseReturnItems3);
        }
        List<ReturnItem> returnItems= new LinkedList<ReturnItem> ();
        ReturnItem item;
        ParseException parseException61= null;
        int callStackSize62= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:506:3
            pushOntoCallStack("parseReturnItems", "cc21/mdx.jj", 506, 3);
            try {
                item= parseReturnItem();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:507:3
            returnItems.add(item);
            // Code for ZeroOrMore specified at cc21/mdx.jj:510:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:511:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:511:15
                pushOntoCallStack("parseReturnItems", "cc21/mdx.jj", 511, 15);
                try {
                    item= parseReturnItem();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:512:5
                returnItems.add(item);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:516:3
            return returnItems;
        }
        catch(ParseException e) {
            parseException61= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize62);
            if (parseReturnItems3!=null) {
                if (parseException61== null) {
                    closeNodeScope(parseReturnItems3, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:521:1
    final public ReturnItem parseReturnItem() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseReturnItem";
        ASTparseReturnItem parseReturnItem4= null;
        if (buildTree) {
            parseReturnItem4= new ASTparseReturnItem();
            openNodeScope(parseReturnItem4);
        }
        CompoundId compoundId;
        ParseException parseException88= null;
        int callStackSize89= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:526:3
            pushOntoCallStack("parseReturnItem", "cc21/mdx.jj", 526, 3);
            try {
                compoundId= parseCompoundId();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:527:3
            return new ReturnItem(compoundId);
        }
        catch(ParseException e) {
            parseException88= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize89);
            if (parseReturnItem4!=null) {
                if (parseException88== null) {
                    closeNodeScope(parseReturnItem4, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:537:1
    final public//CreateCellCalculationBodyClause:
    //;
    //MeasureBodyClause:
    //  <APPROX_NUMERIC_LITERAL>
    //;
    SelectWithClause parseSelectWithClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectWithClause";
        ASTparseSelectWithClause parseSelectWithClause5= null;
        if (buildTree) {
            parseSelectWithClause5= new ASTparseSelectWithClause();
            openNodeScope(parseSelectWithClause5);
        }
        CreateMemberBodyClause createMemberBodyClause= null;
        CreateSetBodyClause createSetBodyClause= null;
        ParseException parseException97= null;
        int callStackSize98= parsingStack.size();
        try {
            if (nextTokenType()== MEMBER||nextTokenType== CALCULATED) {
                // Code for ZeroOrOne specified at cc21/mdx.jj:544:5
                if (nextTokenType()== CALCULATED) {
                    // Code for RegexpStringLiteral specified at cc21/mdx.jj:544:6
                    consumeToken(CALCULATED);
                }
                // Code for RegexpRef specified at cc21/mdx.jj:544:21
                consumeToken(MEMBER);
                // Code for NonTerminal specified at cc21/mdx.jj:544:32
                pushOntoCallStack("parseSelectWithClause", "cc21/mdx.jj", 544, 32);
                try {
                    createMemberBodyClause= parseCreateMemberBodyClause();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== SET) {
                // Code for RegexpRef specified at cc21/mdx.jj:545:5
                consumeToken(SET);
                // Code for NonTerminal specified at cc21/mdx.jj:545:13
                pushOntoCallStack("parseSelectWithClause", "cc21/mdx.jj", 545, 13);
                try {
                    createSetBodyClause= parseCreateSetBodyClause();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("parseSelectWithClause", "cc21/mdx.jj", 544, 5);
                throw new ParseException(this, first_set$mdx_jj$544$5, parsingStack);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:548:3
            return new SelectWithClause();
        }
        catch(ParseException e) {
            parseException97= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize98);
            if (parseSelectWithClause5!=null) {
                if (parseException97== null) {
                    closeNodeScope(parseSelectWithClause5, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:553:1
    final public SelectStatement parseSelectStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectStatement";
        ASTparseSelectStatement parseSelectStatement6= null;
        if (buildTree) {
            parseSelectStatement6= new ASTparseSelectStatement();
            openNodeScope(parseSelectStatement6);
        }
        SelectWithClause selectWithClause= null;
        SelectSlicerAxisClause selectSlicerAxisClause= null;
        SelectQueryClause selectQueryClause= null;
        SelectSubcubeClause selectSubcubeClause= null;
        SelectCellPropertyListClause selectCellPropertyListClause= null;
        ParseException parseException134= null;
        int callStackSize135= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.jj:562:3
            if (nextTokenType()== WITH) {
                // Code for RegexpRef specified at cc21/mdx.jj:563:5
                consumeToken(WITH);
                // Code for OneOrMore specified at cc21/mdx.jj:564:5
                while (true) {
                    // Code for NonTerminal specified at cc21/mdx.jj:565:7
                    pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 565, 7);
                    try {
                        selectWithClause= parseSelectWithClause();
                    }
                    finally {
                        popCallStack();
                    }
                    if (!(nextTokenType()== MEMBER||nextTokenType== SET||nextTokenType== CALCULATED)) break;
                }
            }
            // Code for RegexpRef specified at cc21/mdx.jj:568:3
            consumeToken(SELECT);
            // Code for ZeroOrOne specified at cc21/mdx.jj:569:3
            // Code for ExpansionChoice specified at cc21/mdx.jj:570:5
            if (nextTokenType()== ASTERISK) {
                // Code for NonTerminal specified at cc21/mdx.jj:570:5
                pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 570, 5);
                try {
                    selectQueryClause= parseSelectQueryAsteriskClause();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$mdx_jj$572$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:572:5
                pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 572, 5);
                try {
                    selectQueryClause= parseSelectQueryAxesClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at cc21/mdx.jj:574:3
            consumeToken(FROM);
            // Code for NonTerminal specified at cc21/mdx.jj:574:12
            pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 574, 12);
            try {
                selectSubcubeClause= parseSelectSubcubeClause();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:575:3
            if (nextTokenType()== WHERE) {
                // Code for NonTerminal specified at cc21/mdx.jj:576:5
                pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 576, 5);
                try {
                    selectSlicerAxisClause= parseSelectSlicerAxisClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:578:3
            if (nextTokenType()== CELL||nextTokenType== PROPERTIES) {
                // Code for NonTerminal specified at cc21/mdx.jj:579:5
                pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 579, 5);
                try {
                    selectCellPropertyListClause= parseSelectCellPropertyListClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:581:3
            return new SelectStatement(null, selectQueryClause, null, null);
            //    return new SelectStatement(selectWithClause, selectQueryClause, selectSubcubeClause, selectCellPropertyListClause);
        }
        catch(ParseException e) {
            parseException134= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize135);
            if (parseSelectStatement6!=null) {
                if (parseException134== null) {
                    closeNodeScope(parseSelectStatement6, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:587:1
    final public SelectQueryClause parseSelectQueryAsteriskClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectQueryAsteriskClause";
        ASTparseSelectQueryAsteriskClause parseSelectQueryAsteriskClause7= null;
        if (buildTree) {
            parseSelectQueryAsteriskClause7= new ASTparseSelectQueryAsteriskClause();
            openNodeScope(parseSelectQueryAsteriskClause7);
        }
        ParseException parseException203= null;
        int callStackSize204= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.jj:591:3
            consumeToken(ASTERISK);
            // Code for CodeBlock specified at cc21/mdx.jj:592:3
            return new SelectQueryAsteriskClause();
        }
        catch(ParseException e) {
            parseException203= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize204);
            if (parseSelectQueryAsteriskClause7!=null) {
                if (parseException203== null) {
                    closeNodeScope(parseSelectQueryAsteriskClause7, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:597:1
    final public SelectQueryClause parseSelectQueryAxesClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectQueryAxesClause";
        ASTparseSelectQueryAxesClause parseSelectQueryAxesClause8= null;
        if (buildTree) {
            parseSelectQueryAxesClause8= new ASTparseSelectQueryAxesClause();
            openNodeScope(parseSelectQueryAxesClause8);
        }
        List<SelectQueryAxisClause> selectQueryAxisClauses= new LinkedList<SelectQueryAxisClause> ();
        SelectQueryAxisClause selectQueryAxisClause;
        ParseException parseException212= null;
        int callStackSize213= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:603:3
            pushOntoCallStack("parseSelectQueryAxesClause", "cc21/mdx.jj", 603, 3);
            try {
                selectQueryAxisClause= parseSelectQueryAxisClause();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:604:3
            selectQueryAxisClauses.add(selectQueryAxisClause);
            // Code for ZeroOrMore specified at cc21/mdx.jj:607:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:608:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:608:15
                pushOntoCallStack("parseSelectQueryAxesClause", "cc21/mdx.jj", 608, 15);
                try {
                    selectQueryAxisClause= parseSelectQueryAxisClause();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:609:5
                selectQueryAxisClauses.add(selectQueryAxisClause);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:613:3
            return new SelectQueryAxesClause(selectQueryAxisClauses);
        }
        catch(ParseException e) {
            parseException212= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize213);
            if (parseSelectQueryAxesClause8!=null) {
                if (parseException212== null) {
                    closeNodeScope(parseSelectQueryAxesClause8, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:618:1
    final public SelectSlicerAxisClause parseSelectSlicerAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectSlicerAxisClause";
        ASTparseSelectSlicerAxisClause parseSelectSlicerAxisClause9= null;
        if (buildTree) {
            parseSelectSlicerAxisClause9= new ASTparseSelectSlicerAxisClause();
            openNodeScope(parseSelectSlicerAxisClause9);
        }
        Expression expression= null;
        ParseException parseException239= null;
        int callStackSize240= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.jj:623:3
            consumeToken(WHERE);
            // Code for NonTerminal specified at cc21/mdx.jj:623:13
            pushOntoCallStack("parseSelectSlicerAxisClause", "cc21/mdx.jj", 623, 13);
            try {
                expression= parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:624:3
            return new SelectSlicerAxisClause();
        }
        catch(ParseException e) {
            parseException239= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize240);
            if (parseSelectSlicerAxisClause9!=null) {
                if (parseException239== null) {
                    closeNodeScope(parseSelectSlicerAxisClause9, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:629:1
    final public SelectCellPropertyListClause parseSelectCellPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectCellPropertyListClause";
        ASTparseSelectCellPropertyListClause parseSelectCellPropertyListClause10= null;
        if (buildTree) {
            parseSelectCellPropertyListClause10= new ASTparseSelectCellPropertyListClause();
            openNodeScope(parseSelectCellPropertyListClause10);
        }
        List<CellProperty> cellPropertys= new LinkedList<CellProperty> ();
        ParseException parseException251= null;
        int callStackSize252= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.jj:634:3
            if (nextTokenType()== CELL) {
                // Code for RegexpRef specified at cc21/mdx.jj:634:4
                consumeToken(CELL);
            }
            // Code for RegexpRef specified at cc21/mdx.jj:634:15
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at cc21/mdx.jj:634:30
            pushOntoCallStack("parseSelectCellPropertyListClause", "cc21/mdx.jj", 634, 30);
            try {
                parseCellProperty();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:635:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:636:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:636:15
                pushOntoCallStack("parseSelectCellPropertyListClause", "cc21/mdx.jj", 636, 15);
                try {
                    parseCellProperty();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:638:3
            return new SelectCellPropertyListClause();
        }
        catch(ParseException e) {
            parseException251= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize252);
            if (parseSelectCellPropertyListClause10!=null) {
                if (parseException251== null) {
                    closeNodeScope(parseSelectCellPropertyListClause10, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:643:1
    final public CreateMemberBodyClause parseCreateMemberBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseCreateMemberBodyClause";
        ASTparseCreateMemberBodyClause parseCreateMemberBodyClause11= null;
        if (buildTree) {
            parseCreateMemberBodyClause11= new ASTparseCreateMemberBodyClause();
            openNodeScope(parseCreateMemberBodyClause11);
        }
        ParseException parseException284= null;
        int callStackSize285= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:647:3
            pushOntoCallStack("parseCreateMemberBodyClause", "cc21/mdx.jj", 647, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.jj:647:21
            consumeToken(AS);
            // Code for NonTerminal specified at cc21/mdx.jj:647:28
            pushOntoCallStack("parseCreateMemberBodyClause", "cc21/mdx.jj", 647, 28);
            try {
                parseFormulaExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:648:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:649:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:649:15
                pushOntoCallStack("parseCreateMemberBodyClause", "cc21/mdx.jj", 649, 15);
                try {
                    parseMemberPropertyDefinition();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:651:3
            return new CreateMemberBodyClause();
        }
        catch(ParseException e) {
            parseException284= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize285);
            if (parseCreateMemberBodyClause11!=null) {
                if (parseException284== null) {
                    closeNodeScope(parseCreateMemberBodyClause11, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:656:1
    final public MemberPropertyDefinition parseMemberPropertyDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseMemberPropertyDefinition";
        ASTparseMemberPropertyDefinition parseMemberPropertyDefinition12= null;
        if (buildTree) {
            parseMemberPropertyDefinition12= new ASTparseMemberPropertyDefinition();
            openNodeScope(parseMemberPropertyDefinition12);
        }
        ParseException parseException311= null;
        int callStackSize312= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:660:3
            pushOntoCallStack("parseMemberPropertyDefinition", "cc21/mdx.jj", 660, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.jj:660:21
            consumeToken(EQ);
            // Code for NonTerminal specified at cc21/mdx.jj:660:28
            pushOntoCallStack("parseMemberPropertyDefinition", "cc21/mdx.jj", 660, 28);
            try {
                parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:661:3
            return new MemberPropertyDefinition();
        }
        catch(ParseException e) {
            parseException311= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize312);
            if (parseMemberPropertyDefinition12!=null) {
                if (parseException311== null) {
                    closeNodeScope(parseMemberPropertyDefinition12, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:666:1
    final public FormulaExpression parseFormulaExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseFormulaExpression";
        ASTparseFormulaExpression parseFormulaExpression13= null;
        if (buildTree) {
            parseFormulaExpression13= new ASTparseFormulaExpression();
            openNodeScope(parseFormulaExpression13);
        }
        ParseException parseException326= null;
        int callStackSize327= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:670:3
            pushOntoCallStack("parseFormulaExpression", "cc21/mdx.jj", 670, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.jj:670:21
            consumeToken(EQ);
            // Code for NonTerminal specified at cc21/mdx.jj:670:28
            pushOntoCallStack("parseFormulaExpression", "cc21/mdx.jj", 670, 28);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:671:3
            return new FormulaExpression();
        }
        catch(ParseException e) {
            parseException326= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize327);
            if (parseFormulaExpression13!=null) {
                if (parseException326== null) {
                    closeNodeScope(parseFormulaExpression13, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:676:1
    final public Expression parseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseExpression";
        ASTparseExpression parseExpression14= null;
        if (buildTree) {
            parseExpression14= new ASTparseExpression();
            openNodeScope(parseExpression14);
        }
        Expression expression;
        Segment segment;
        ParseException parseException341= null;
        int callStackSize342= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:682:3
            pushOntoCallStack("parseExpression", "cc21/mdx.jj", 682, 3);
            try {
                expression= unaliasedExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:683:3
            while (true) {
                if (!(nextTokenType()== AS)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:684:5
                consumeToken(AS);
                // Code for NonTerminal specified at cc21/mdx.jj:684:12
                pushOntoCallStack("parseExpression", "cc21/mdx.jj", 684, 12);
                try {
                    segment= parseIdentifier();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:685:5
                CompoundId compundId= new CompoundId(List.of(segment));
                expression= new CallExpression("AS", CallExpression.Type.Term_Infix, List.of(expression, compundId));
            }
            // Code for CodeBlock specified at cc21/mdx.jj:693:3
            return expression;
        }
        catch(ParseException e) {
            parseException341= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize342);
            if (parseExpression14!=null) {
                if (parseException341== null) {
                    closeNodeScope(parseExpression14, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:698:1
    final public Expression expressionOrEmpty() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "expressionOrEmpty";
        // Code for ExpansionChoice specified at cc21/mdx.jj:703:3
        ASTexpressionOrEmpty expressionOrEmpty15= null;
        if (buildTree) {
            expressionOrEmpty15= new ASTexpressionOrEmpty();
            openNodeScope(expressionOrEmpty15);
        }
        Expression expression;
        ParseException parseException365= null;
        int callStackSize366= parsingStack.size();
        try {
            if (first_set$mdx_jj$703$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:703:3
                pushOntoCallStack("expressionOrEmpty", "cc21/mdx.jj", 703, 3);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:704:3
                return expression;
            }
            else  {
                // Code for CodeBlock specified at cc21/mdx.jj:708:3
                return new CallExpression("", CallExpression.Type.Empty, List.of());
            }
        }
        catch(ParseException e) {
            parseException365= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize366);
            if (expressionOrEmpty15!=null) {
                if (parseException365== null) {
                    closeNodeScope(expressionOrEmpty15, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:716:1
    final public// Comma-separated list of expressions, some of which may be empty. Used
    // for functions.
    List<Expression> expOrEmptyList() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "expOrEmptyList";
        ASTexpOrEmptyList expOrEmptyList16= null;
        if (buildTree) {
            expOrEmptyList16= new ASTexpOrEmptyList();
            openNodeScope(expOrEmptyList16);
        }
        Expression expression;
        List<Expression> list= new LinkedList<Expression> ();
        ParseException parseException383= null;
        int callStackSize384= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:722:3
            pushOntoCallStack("expOrEmptyList", "cc21/mdx.jj", 722, 3);
            try {
                expression= expressionOrEmpty();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:723:3
            list.add(expression);
            // Code for ZeroOrMore specified at cc21/mdx.jj:726:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:727:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:728:5
                pushOntoCallStack("expOrEmptyList", "cc21/mdx.jj", 728, 5);
                try {
                    expression= expressionOrEmpty();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:729:5
                list.add(expression);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:733:3
            return list;
        }
        catch(ParseException e) {
            parseException383= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize384);
            if (expOrEmptyList16!=null) {
                if (parseException383== null) {
                    closeNodeScope(expOrEmptyList16, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:739:1
    final public// List of expressions, none of which may be empty.
    List<Expression> expList() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "expList";
        ASTexpList expList17= null;
        if (buildTree) {
            expList17= new ASTexpList();
            openNodeScope(expList17);
        }
        Expression expression;
        List<Expression> list= new LinkedList<Expression> ();
        ParseException parseException410= null;
        int callStackSize411= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:745:3
            pushOntoCallStack("expList", "cc21/mdx.jj", 745, 3);
            try {
                expression= parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:746:3
            list.add(expression);
            // Code for ZeroOrMore specified at cc21/mdx.jj:749:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:750:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:751:5
                pushOntoCallStack("expList", "cc21/mdx.jj", 751, 5);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:752:5
                list.add(expression);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:756:3
            return list;
        }
        catch(ParseException e) {
            parseException410= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize411);
            if (expList17!=null) {
                if (parseException410== null) {
                    closeNodeScope(expList17, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:761:1
    final public Expression expressionEof() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "expressionEof";
        ASTexpressionEof expressionEof18= null;
        if (buildTree) {
            expressionEof18= new ASTexpressionEof();
            openNodeScope(expressionEof18);
        }
        Expression expression;
        ParseException parseException437= null;
        int callStackSize438= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:766:3
            pushOntoCallStack("expressionEof", "cc21/mdx.jj", 766, 3);
            try {
                expression= parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for EndOfFile specified at cc21/mdx.jj:766:34
            consumeToken(EOF);
            // Code for CodeBlock specified at cc21/mdx.jj:767:3
            return expression;
        }
        catch(ParseException e) {
            parseException437= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize438);
            if (expressionEof18!=null) {
                if (parseException437== null) {
                    closeNodeScope(expressionEof18, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:777:1
    final public// ----------------------------------------------------------------------------
    // Elements
    //
    //
    // <identifier> ::= <regularIdentifier> | <delimitedIdentifier>
    Segment parseIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseIdentifier";
        ASTparseIdentifier parseIdentifier19= null;
        if (buildTree) {
            parseIdentifier19= new ASTparseIdentifier();
            openNodeScope(parseIdentifier19);
        }
        Segment segment;
        ParseException parseException449= null;
        int callStackSize450= parsingStack.size();
        try {
            if (first_set$mdx_jj$783$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:783:5
                pushOntoCallStack("parseIdentifier", "cc21/mdx.jj", 783, 5);
                try {
                    segment= parseNameSegment();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== AMP_QUOTED_ID||nextTokenType== AMP_UNQUOTED_ID) {
                // Code for NonTerminal specified at cc21/mdx.jj:785:5
                pushOntoCallStack("parseIdentifier", "cc21/mdx.jj", 785, 5);
                try {
                    segment= parseKeyIdentifier();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("parseIdentifier", "cc21/mdx.jj", 783, 5);
                throw new ParseException(this, first_set$mdx_jj$783$5$, parsingStack);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:787:3
            return segment;
        }
        catch(ParseException e) {
            parseException449= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize450);
            if (parseIdentifier19!=null) {
                if (parseException449== null) {
                    closeNodeScope(parseIdentifier19, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNameSegment_FIRST_SET= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    // cc21/mdx.jj:792:1
    final public NameSegment parseNameSegment() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseNameSegment";
        // Code for ExpansionChoice specified at cc21/mdx.jj:797:3
        ASTparseNameSegment parseNameSegment20= null;
        if (buildTree) {
            parseNameSegment20= new ASTparseNameSegment();
            openNodeScope(parseNameSegment20);
        }
        String id;
        ParseException parseException471= null;
        int callStackSize472= parsingStack.size();
        try {
            if (nextTokenType()== DIMENSION||nextTokenType== PROPERTIES) {
                // Code for NonTerminal specified at cc21/mdx.jj:797:3
                pushOntoCallStack("parseNameSegment", "cc21/mdx.jj", 797, 3);
                try {
                    id= parseKeyword();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:798:3
                // Allow a non-reserved keyword to be converted back into an identifier
                // if it is not in a context where it is meaningful.
                return new NameSegment(id, Segment.Quoting.UNQUOTED);
            }
            else if (nextTokenType()== ID) {
                // Code for RegexpRef specified at cc21/mdx.jj:803:3
                consumeToken(ID);
                // Code for CodeBlock specified at cc21/mdx.jj:804:3
                return new NameSegment(getToken(0).getImage(), Segment.Quoting.UNQUOTED);
            }
            else if (nextTokenType()== ATSIGN) {
                // Code for RegexpRef specified at cc21/mdx.jj:807:3
                consumeToken(ATSIGN);
                // Code for RegexpRef specified at cc21/mdx.jj:807:14
                consumeToken(ID);
                // Code for CodeBlock specified at cc21/mdx.jj:808:3
                return new NameSegment("@"+getToken(0).getImage(), Segment.Quoting.UNQUOTED);
            }
            else if (nextTokenType()== QUOTED_ID) {
                // Code for RegexpRef specified at cc21/mdx.jj:811:3
                consumeToken(QUOTED_ID);
                // Code for CodeBlock specified at cc21/mdx.jj:812:3
                return new NameSegment(stripQuotes(getToken(0).getImage(), "[", "]", "]]"), Segment.Quoting.QUOTED);
            }
            else  {
                pushOntoCallStack("parseNameSegment", "cc21/mdx.jj", 797, 3);
                throw new ParseException(this, parseNameSegment_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException471= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize472);
            if (parseNameSegment20!=null) {
                if (parseException471== null) {
                    closeNodeScope(parseNameSegment20, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:820:1
    final public// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
    KeySegment parseKeyIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseKeyIdentifier";
        ASTparseKeyIdentifier parseKeyIdentifier21= null;
        if (buildTree) {
            parseKeyIdentifier21= new ASTparseKeyIdentifier();
            openNodeScope(parseKeyIdentifier21);
        }
        List<NameSegment> list= new ArrayList<NameSegment> ();
        NameSegment key;
        ParseException parseException513= null;
        int callStackSize514= parsingStack.size();
        try {
            // Code for OneOrMore specified at cc21/mdx.jj:826:3
            while (true) {
                // Code for NonTerminal specified at cc21/mdx.jj:827:5
                pushOntoCallStack("parseKeyIdentifier", "cc21/mdx.jj", 827, 5);
                try {
                    key= parseAmpId();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:828:5
                list.add(key);
                if (!(nextTokenType()== AMP_QUOTED_ID||nextTokenType== AMP_UNQUOTED_ID)) break;
            }
            // Code for CodeBlock specified at cc21/mdx.jj:832:3
            return new KeySegment(list);
        }
        catch(ParseException e) {
            parseException513= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize514);
            if (parseKeyIdentifier21!=null) {
                if (parseException513== null) {
                    closeNodeScope(parseKeyIdentifier21, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseAmpId_FIRST_SET= tokenTypeSet(AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    // cc21/mdx.jj:837:1
    final public NameSegment parseAmpId() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseAmpId";
        // Code for ExpansionChoice specified at cc21/mdx.jj:841:3
        ASTparseAmpId parseAmpId22= null;
        if (buildTree) {
            parseAmpId22= new ASTparseAmpId();
            openNodeScope(parseAmpId22);
        }
        ParseException parseException531= null;
        int callStackSize532= parsingStack.size();
        try {
            if (nextTokenType()== AMP_QUOTED_ID) {
                // Code for RegexpRef specified at cc21/mdx.jj:841:3
                consumeToken(AMP_QUOTED_ID);
                // Code for CodeBlock specified at cc21/mdx.jj:842:3
                return new NameSegment(stripQuotes(getToken(0).getImage(), "&[", "]", "]]"), Segment.Quoting.QUOTED);
            }
            else if (nextTokenType()== AMP_UNQUOTED_ID) {
                // Code for RegexpRef specified at cc21/mdx.jj:848:3
                consumeToken(AMP_UNQUOTED_ID);
                // Code for CodeBlock specified at cc21/mdx.jj:849:3
                return new NameSegment(getToken(0).getImage().substring(1), Segment.Quoting.UNQUOTED);
            }
            else  {
                pushOntoCallStack("parseAmpId", "cc21/mdx.jj", 841, 3);
                throw new ParseException(this, parseAmpId_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException531= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize532);
            if (parseAmpId22!=null) {
                if (parseException531== null) {
                    closeNodeScope(parseAmpId22, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseKeyword_FIRST_SET= tokenTypeSet(DIMENSION, PROPERTIES);
    // cc21/mdx.jj:858:1
    final public// a keyword (unlike a reserved word) can be converted back into an
    // identifier in some contexts
    String parseKeyword() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseKeyword";
        // Code for ExpansionChoice specified at cc21/mdx.jj:862:3
        ASTparseKeyword parseKeyword23= null;
        if (buildTree) {
            parseKeyword23= new ASTparseKeyword();
            openNodeScope(parseKeyword23);
        }
        ParseException parseException552= null;
        int callStackSize553= parsingStack.size();
        try {
            if (nextTokenType()== DIMENSION) {
                // Code for RegexpRef specified at cc21/mdx.jj:862:3
                consumeToken(DIMENSION);
                // Code for CodeBlock specified at cc21/mdx.jj:863:3
                return"Dimension";
            }
            else if (nextTokenType()== PROPERTIES) {
                // Code for RegexpRef specified at cc21/mdx.jj:866:3
                consumeToken(PROPERTIES);
                // Code for CodeBlock specified at cc21/mdx.jj:867:3
                return"Properties";
            }
            else  {
                pushOntoCallStack("parseKeyword", "cc21/mdx.jj", 862, 3);
                throw new ParseException(this, parseKeyword_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException552= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize553);
            if (parseKeyword23!=null) {
                if (parseException552== null) {
                    closeNodeScope(parseKeyword23, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:872:1
    final public CompoundId parseCompoundId() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseCompoundId";
        ASTparseCompoundId parseCompoundId24= null;
        if (buildTree) {
            parseCompoundId24= new ASTparseCompoundId();
            openNodeScope(parseCompoundId24);
        }
        CompoundId compoundId;
        List<Segment> list= new ArrayList<Segment> ();
        Segment s;
        ParseException parseException573= null;
        int callStackSize574= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:879:3
            pushOntoCallStack("parseCompoundId", "cc21/mdx.jj", 879, 3);
            try {
                s= parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:880:3
            list.add(s);
            // Code for ZeroOrMore specified at cc21/mdx.jj:883:3
            while (true) {
                if (!(scan$mdx_jj$884$5())) break;
                // Code for RegexpRef specified at cc21/mdx.jj:885:5
                consumeToken(DOT);
                // Code for NonTerminal specified at cc21/mdx.jj:885:13
                pushOntoCallStack("parseCompoundId", "cc21/mdx.jj", 885, 13);
                try {
                    s= parseIdentifier();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:886:5
                list.add(s);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:890:3
            return new CompoundId(list);
        }
        catch(ParseException e) {
            parseException573= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize574);
            if (parseCompoundId24!=null) {
                if (parseException573== null) {
                    closeNodeScope(parseCompoundId24, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:897:1
    final public// ----------------------------------------------------------------------------
    // Expressions
    Expression unaliasedExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "unaliasedExpression";
        ASTunaliasedExpression unaliasedExpression25= null;
        if (buildTree) {
            unaliasedExpression25= new ASTunaliasedExpression();
            openNodeScope(unaliasedExpression25);
        }
        Expression x, y;
        ParseException parseException600= null;
        int callStackSize601= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:902:3
            pushOntoCallStack("unaliasedExpression", "cc21/mdx.jj", 902, 3);
            try {
                x= term5();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:903:3
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.jj:904:5
                if (nextTokenType()== OR) {
                    // Code for RegexpRef specified at cc21/mdx.jj:904:5
                    consumeToken(OR);
                    // Code for NonTerminal specified at cc21/mdx.jj:904:12
                    pushOntoCallStack("unaliasedExpression", "cc21/mdx.jj", 904, 12);
                    try {
                        y= term5();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:905:5
                    x= new CallExpression("OR", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== XOR) {
                    // Code for RegexpRef specified at cc21/mdx.jj:911:5
                    consumeToken(XOR);
                    // Code for NonTerminal specified at cc21/mdx.jj:911:13
                    pushOntoCallStack("unaliasedExpression", "cc21/mdx.jj", 911, 13);
                    try {
                        y= term5();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:912:5
                    x= new CallExpression("XOR", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== COLON) {
                    // Code for RegexpRef specified at cc21/mdx.jj:920:5
                    consumeToken(COLON);
                    // Code for NonTerminal specified at cc21/mdx.jj:920:15
                    pushOntoCallStack("unaliasedExpression", "cc21/mdx.jj", 920, 15);
                    try {
                        y= term5();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:921:5
                    x= new CallExpression(":", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else  {
                    break;
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:928:3
            return x;
        }
        catch(ParseException e) {
            parseException600= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize601);
            if (unaliasedExpression25!=null) {
                if (parseException600== null) {
                    closeNodeScope(unaliasedExpression25, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:933:1
    final public Expression term5() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term5";
        ASTterm5 term526= null;
        if (buildTree) {
            term526= new ASTterm5();
            openNodeScope(term526);
        }
        Expression x, y;
        ParseException parseException651= null;
        int callStackSize652= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:938:3
            pushOntoCallStack("term5", "cc21/mdx.jj", 938, 3);
            try {
                x= term4();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:939:3
            while (true) {
                if (!(nextTokenType()== AND)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:940:5
                consumeToken(AND);
                // Code for NonTerminal specified at cc21/mdx.jj:940:13
                pushOntoCallStack("term5", "cc21/mdx.jj", 940, 13);
                try {
                    y= term4();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:941:5
                x= new CallExpression("AND", CallExpression.Type.Term_Infix, List.of(x, y));
            }
            // Code for CodeBlock specified at cc21/mdx.jj:948:3
            return x;
        }
        catch(ParseException e) {
            parseException651= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize652);
            if (term526!=null) {
                if (parseException651== null) {
                    closeNodeScope(term526, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> term4_FIRST_SET= term4_FIRST_SET_init();
    static private EnumSet<TokenType> term4_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // cc21/mdx.jj:953:1
    final public Expression term4() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term4";
        // Code for ExpansionChoice specified at cc21/mdx.jj:958:3
        ASTterm4 term427= null;
        if (buildTree) {
            term427= new ASTterm4();
            openNodeScope(term427);
        }
        Expression x;
        ParseException parseException675= null;
        int callStackSize676= parsingStack.size();
        try {
            if (first_set$mdx_jj$958$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:958:3
                pushOntoCallStack("term4", "cc21/mdx.jj", 958, 3);
                try {
                    x= term3();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:959:3
                return x;
            }
            else if (nextTokenType()== NOT) {
                // Code for RegexpRef specified at cc21/mdx.jj:962:3
                consumeToken(NOT);
                // Code for NonTerminal specified at cc21/mdx.jj:962:11
                pushOntoCallStack("term4", "cc21/mdx.jj", 962, 11);
                try {
                    x= term4();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:963:3
                return new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(x));
            }
            else  {
                pushOntoCallStack("term4", "cc21/mdx.jj", 958, 3);
                throw new ParseException(this, term4_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException675= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize676);
            if (term427!=null) {
                if (parseException675== null) {
                    closeNodeScope(term427, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:971:1
    final public Expression term3() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term3";
        ASTterm3 term328= null;
        if (buildTree) {
            term328= new ASTterm3();
            openNodeScope(term328);
        }
        Expression x, y;
        Token op;
        ParseException parseException699= null;
        int callStackSize700= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:977:3
            pushOntoCallStack("term3", "cc21/mdx.jj", 977, 3);
            try {
                x= term2();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:978:3
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.jj:980:5
                if (first_set$mdx_jj$980$5.contains(nextTokenType())) {
                    if (nextTokenType()== EQ) {
                        // Code for RegexpRef specified at cc21/mdx.jj:981:7
                        consumeToken(EQ);
                        // Code for CodeBlock specified at cc21/mdx.jj:982:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== NE) {
                        // Code for RegexpRef specified at cc21/mdx.jj:985:7
                        consumeToken(NE);
                        // Code for CodeBlock specified at cc21/mdx.jj:986:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== LT) {
                        // Code for RegexpRef specified at cc21/mdx.jj:989:7
                        consumeToken(LT);
                        // Code for CodeBlock specified at cc21/mdx.jj:990:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== GT) {
                        // Code for RegexpRef specified at cc21/mdx.jj:993:7
                        consumeToken(GT);
                        // Code for CodeBlock specified at cc21/mdx.jj:994:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== LE) {
                        // Code for RegexpRef specified at cc21/mdx.jj:997:7
                        consumeToken(LE);
                        // Code for CodeBlock specified at cc21/mdx.jj:998:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== GE) {
                        // Code for RegexpRef specified at cc21/mdx.jj:1001:7
                        consumeToken(GE);
                        // Code for CodeBlock specified at cc21/mdx.jj:1002:7
                        op= getToken(0);
                    }
                    else  {
                        pushOntoCallStack("term3", "cc21/mdx.jj", 981, 7);
                        throw new ParseException(this, first_set$mdx_jj$981$7, parsingStack);
                    }
                    // Code for NonTerminal specified at cc21/mdx.jj:1006:5
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1006, 5);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1007:5
                    x= new CallExpression(op.getImage(), CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (scan$mdx_jj$1016$5()) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1017:5
                    consumeToken(IS);
                    // Code for RegexpRef specified at cc21/mdx.jj:1017:12
                    consumeToken(NULL);
                    // Code for CodeBlock specified at cc21/mdx.jj:1018:5
                    x= new CallExpression("IS NULL", CallExpression.Type.Term_Postfix, List.of(x));
                }
                else if (scan$mdx_jj$1026$5()) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1027:5
                    consumeToken(IS);
                    // Code for NonTerminal specified at cc21/mdx.jj:1027:12
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1027, 12);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1028:5
                    x= new CallExpression("IS", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== IS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1034:5
                    consumeToken(IS);
                    // Code for RegexpRef specified at cc21/mdx.jj:1034:12
                    consumeToken(EMPTY);
                    // Code for CodeBlock specified at cc21/mdx.jj:1035:5
                    x= new CallExpression("IS EMPTY", CallExpression.Type.Term_Postfix, List.of(x));
                }
                else if (nextTokenType()== MATCHES) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1039:5
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at cc21/mdx.jj:1039:17
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1039, 17);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1040:5
                    x= new CallExpression("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (scan$mdx_jj$1046$5()) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1047:5
                    consumeToken(NOT);
                    // Code for RegexpRef specified at cc21/mdx.jj:1047:13
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at cc21/mdx.jj:1047:25
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1047, 25);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1048:5
                    x= new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpression("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y))));
                }
                else if (nextTokenType()== IN) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1059:5
                    consumeToken(IN);
                    // Code for NonTerminal specified at cc21/mdx.jj:1059:12
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1059, 12);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1060:5
                    x= new CallExpression("IN", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== NOT) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1066:5
                    consumeToken(NOT);
                    // Code for RegexpRef specified at cc21/mdx.jj:1066:13
                    consumeToken(IN);
                    // Code for NonTerminal specified at cc21/mdx.jj:1066:20
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1066, 20);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1067:5
                    x= new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpression("IN", CallExpression.Type.Term_Infix, List.of(x, y))));
                }
                else  {
                    break;
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1079:3
            return x;
        }
        catch(ParseException e) {
            parseException699= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize700);
            if (term328!=null) {
                if (parseException699== null) {
                    closeNodeScope(term328, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1084:1
    final public Expression term2() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term2";
        ASTterm2 term229= null;
        if (buildTree) {
            term229= new ASTterm2();
            openNodeScope(term229);
        }
        Expression x, y;
        ParseException parseException871= null;
        int callStackSize872= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1089:3
            pushOntoCallStack("term2", "cc21/mdx.jj", 1089, 3);
            try {
                x= term();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1090:3
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.jj:1091:5
                if (nextTokenType()== PLUS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1091:5
                    consumeToken(PLUS);
                    // Code for NonTerminal specified at cc21/mdx.jj:1091:14
                    pushOntoCallStack("term2", "cc21/mdx.jj", 1091, 14);
                    try {
                        y= term();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1092:5
                    x= new CallExpression("+", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== MINUS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1098:5
                    consumeToken(MINUS);
                    // Code for NonTerminal specified at cc21/mdx.jj:1098:15
                    pushOntoCallStack("term2", "cc21/mdx.jj", 1098, 15);
                    try {
                        y= term();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1099:5
                    x= new CallExpression("-", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== CONCAT) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1105:5
                    consumeToken(CONCAT);
                    // Code for NonTerminal specified at cc21/mdx.jj:1105:16
                    pushOntoCallStack("term2", "cc21/mdx.jj", 1105, 16);
                    try {
                        y= term();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1106:5
                    x= new CallExpression("||", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else  {
                    break;
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1113:3
            return x;
        }
        catch(ParseException e) {
            parseException871= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize872);
            if (term229!=null) {
                if (parseException871== null) {
                    closeNodeScope(term229, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1118:1
    final public Expression term() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term";
        ASTterm term30= null;
        if (buildTree) {
            term30= new ASTterm();
            openNodeScope(term30);
        }
        Expression x, y;
        ParseException parseException922= null;
        int callStackSize923= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1123:3
            pushOntoCallStack("term", "cc21/mdx.jj", 1123, 3);
            try {
                x= factor();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1124:3
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.jj:1125:5
                if (nextTokenType()== ASTERISK) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1125:5
                    consumeToken(ASTERISK);
                    // Code for NonTerminal specified at cc21/mdx.jj:1125:18
                    pushOntoCallStack("term", "cc21/mdx.jj", 1125, 18);
                    try {
                        y= factor();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1126:5
                    x= new CallExpression("*", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== SOLIDUS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1132:5
                    consumeToken(SOLIDUS);
                    // Code for NonTerminal specified at cc21/mdx.jj:1132:17
                    pushOntoCallStack("term", "cc21/mdx.jj", 1132, 17);
                    try {
                        y= factor();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1133:5
                    x= new CallExpression("/", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else  {
                    break;
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1140:3
            return x;
        }
        catch(ParseException e) {
            parseException922= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize923);
            if (term30!=null) {
                if (parseException922== null) {
                    closeNodeScope(term30, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> factor_FIRST_SET= factor_FIRST_SET_init();
    static private EnumSet<TokenType> factor_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // cc21/mdx.jj:1145:1
    final public Expression factor() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "factor";
        // Code for ExpansionChoice specified at cc21/mdx.jj:1150:3
        ASTfactor factor31= null;
        if (buildTree) {
            factor31= new ASTfactor();
            openNodeScope(factor31);
        }
        Expression p;
        ParseException parseException961= null;
        int callStackSize962= parsingStack.size();
        try {
            if (first_set$mdx_jj$1150$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:1150:3
                pushOntoCallStack("factor", "cc21/mdx.jj", 1150, 3);
                try {
                    p= primary();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1151:3
                return p;
            }
            else if (nextTokenType()== PLUS) {
                // Code for RegexpRef specified at cc21/mdx.jj:1154:3
                consumeToken(PLUS);
                // Code for NonTerminal specified at cc21/mdx.jj:1154:12
                pushOntoCallStack("factor", "cc21/mdx.jj", 1154, 12);
                try {
                    p= primary();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1155:3
                return p;
            }
            else if (nextTokenType()== MINUS) {
                // Code for RegexpRef specified at cc21/mdx.jj:1158:3
                consumeToken(MINUS);
                // Code for NonTerminal specified at cc21/mdx.jj:1158:13
                pushOntoCallStack("factor", "cc21/mdx.jj", 1158, 13);
                try {
                    p= primary();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1159:3
                return new CallExpression("-", CallExpression.Type.Term_Prefix, List.of(p));
            }
            else if (nextTokenType()== EXISTING) {
                // Code for RegexpRef specified at cc21/mdx.jj:1165:3
                consumeToken(EXISTING);
                // Code for NonTerminal specified at cc21/mdx.jj:1165:16
                pushOntoCallStack("factor", "cc21/mdx.jj", 1165, 16);
                try {
                    p= primary();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1166:3
                return new CallExpression("Existing", CallExpression.Type.Term_Prefix, List.of(p));
            }
            else  {
                pushOntoCallStack("factor", "cc21/mdx.jj", 1150, 3);
                throw new ParseException(this, factor_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException961= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize962);
            if (factor31!=null) {
                if (parseException961== null) {
                    closeNodeScope(factor31, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1174:1
    final public Expression primary() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "primary";
        ASTprimary primary32= null;
        if (buildTree) {
            primary32= new ASTprimary();
            openNodeScope(primary32);
        }
        Expression expression;
        ParseException parseException1009= null;
        int callStackSize1010= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1179:3
            pushOntoCallStack("primary", "cc21/mdx.jj", 1179, 3);
            try {
                expression= atom();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1180:3
            while (true) {
                if (!(nextTokenType()== DOT)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:1181:5
                consumeToken(DOT);
                // Code for NonTerminal specified at cc21/mdx.jj:1181:13
                pushOntoCallStack("primary", "cc21/mdx.jj", 1181, 13);
                try {
                    expression= segmentOrFuncall(expression);
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1183:3
            return expression;
        }
        catch(ParseException e) {
            parseException1009= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1010);
            if (primary32!=null) {
                if (parseException1009== null) {
                    closeNodeScope(primary32, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1188:1
    final public Expression segmentOrFuncall(Expression left) {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "segmentOrFuncall";
        ASTsegmentOrFuncall segmentOrFuncall33= null;
        if (buildTree) {
            segmentOrFuncall33= new ASTsegmentOrFuncall();
            openNodeScope(segmentOrFuncall33);
        }
        Segment segment;
        List<Expression> argList= null;
        ParseException parseException1030= null;
        int callStackSize1031= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1194:3
            pushOntoCallStack("segmentOrFuncall", "cc21/mdx.jj", 1194, 3);
            try {
                segment= parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:1195:3
            if (nextTokenType()== LPAREN) {
                // Code for RegexpRef specified at cc21/mdx.jj:1196:5
                consumeToken(LPAREN);
                if (scan$mdx_jj$1198$7()) {
                    // Code for CodeBlock specified at cc21/mdx.jj:1199:7
                    argList= Collections.emptyList();
                }
                else  {
                    // Code for NonTerminal specified at cc21/mdx.jj:1203:7
                    pushOntoCallStack("segmentOrFuncall", "cc21/mdx.jj", 1203, 7);
                    try {
                        argList= expOrEmptyList();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1205:5
                consumeToken(RPAREN);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1207:3
            return createCall(left, segment, argList);
        }
        catch(ParseException e) {
            parseException1030= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1031);
            if (segmentOrFuncall33!=null) {
                if (parseException1030== null) {
                    closeNodeScope(segmentOrFuncall33, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNumericLiteral_FIRST_SET= tokenTypeSet(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);
    // cc21/mdx.jj:1212:1
    final public NumericLiteral parseNumericLiteral() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseNumericLiteral";
        // Code for ExpansionChoice specified at cc21/mdx.jj:1216:3
        ASTparseNumericLiteral parseNumericLiteral34= null;
        if (buildTree) {
            parseNumericLiteral34= new ASTparseNumericLiteral();
            openNodeScope(parseNumericLiteral34);
        }
        ParseException parseException1067= null;
        int callStackSize1068= parsingStack.size();
        try {
            if (nextTokenType()== DECIMAL_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.jj:1216:3
                consumeToken(DECIMAL_NUMERIC_LITERAL);
                // Code for CodeBlock specified at cc21/mdx.jj:1217:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            }
            else if (nextTokenType()== UNSIGNED_INTEGER_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.jj:1220:3
                consumeToken(UNSIGNED_INTEGER_LITERAL);
                // Code for CodeBlock specified at cc21/mdx.jj:1221:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            }
            else if (nextTokenType()== APPROX_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.jj:1224:3
                consumeToken(APPROX_NUMERIC_LITERAL);
                // Code for CodeBlock specified at cc21/mdx.jj:1225:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            }
            else  {
                pushOntoCallStack("parseNumericLiteral", "cc21/mdx.jj", 1216, 3);
                throw new ParseException(this, parseNumericLiteral_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1067= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1068);
            if (parseNumericLiteral34!=null) {
                if (parseException1067== null) {
                    closeNodeScope(parseNumericLiteral34, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> atom_FIRST_SET= atom_FIRST_SET_init();
    static private EnumSet<TokenType> atom_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // cc21/mdx.jj:1230:1
    final public Expression atom() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "atom";
        // Code for ExpansionChoice specified at cc21/mdx.jj:1237:3
        ASTatom atom35= null;
        if (buildTree) {
            atom35= new ASTatom();
            openNodeScope(atom35);
        }
        Expression expression;
        NameSegment segment;
        List<Expression> expressions;
        ParseException parseException1097= null;
        int callStackSize1098= parsingStack.size();
        try {
            if (nextTokenType()== SINGLE_QUOTED_STRING) {
                // Code for RegexpRef specified at cc21/mdx.jj:1237:3
                consumeToken(SINGLE_QUOTED_STRING);
                // Code for CodeBlock specified at cc21/mdx.jj:1238:3
                return new StringLiteral(stripQuotes(getToken(0).getImage(), "'", "'", "''"));
            }
            else if (nextTokenType()== DOUBLE_QUOTED_STRING) {
                // Code for RegexpRef specified at cc21/mdx.jj:1241:3
                consumeToken(DOUBLE_QUOTED_STRING);
                // Code for CodeBlock specified at cc21/mdx.jj:1242:3
                return new StringLiteral(stripQuotes(getToken(0).getImage(), '"'+"", '"'+"", '"'+""+'"'));
            }
            else if (nextTokenType()== UNSIGNED_INTEGER_LITERAL||nextTokenType== APPROX_NUMERIC_LITERAL||nextTokenType== DECIMAL_NUMERIC_LITERAL) {
                // Code for NonTerminal specified at cc21/mdx.jj:1245:3
                pushOntoCallStack("atom", "cc21/mdx.jj", 1245, 3);
                try {
                    expression= parseNumericLiteral();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1246:3
                return expression;
            }
            else if (nextTokenType()== NULL) {
                // Code for RegexpRef specified at cc21/mdx.jj:1249:3
                consumeToken(NULL);
                // Code for CodeBlock specified at cc21/mdx.jj:1250:3
                return NullLiteral.SINGLETON;
            }
            else if (nextTokenType()== CAST) {
                // Code for RegexpRef specified at cc21/mdx.jj:1253:3
                consumeToken(CAST);
                // Code for RegexpRef specified at cc21/mdx.jj:1253:12
                consumeToken(LPAREN);
                // Code for NonTerminal specified at cc21/mdx.jj:1253:23
                pushOntoCallStack("atom", "cc21/mdx.jj", 1253, 23);
                try {
                    expression= unaliasedExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1254:3
                consumeToken(AS);
                // Code for NonTerminal specified at cc21/mdx.jj:1254:10
                pushOntoCallStack("atom", "cc21/mdx.jj", 1254, 10);
                try {
                    segment= parseNameSegment();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1254:39
                consumeToken(RPAREN);
                // Code for CodeBlock specified at cc21/mdx.jj:1255:3
                return new CallExpression("CAST", CallExpression.Type.Cast, List.of(expression, new SymbolLiteral(segment.name())));
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpRef specified at cc21/mdx.jj:1263:3
                consumeToken(LPAREN);
                // Code for NonTerminal specified at cc21/mdx.jj:1263:14
                pushOntoCallStack("atom", "cc21/mdx.jj", 1263, 14);
                try {
                    expressions= expList();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1263:38
                consumeToken(RPAREN);
                // Code for CodeBlock specified at cc21/mdx.jj:1264:3
                // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
                // are just expressions.
                return new CallExpression("()", CallExpression.Type.Parentheses, expressions);
            }
            else if (nextTokenType()== LBRACE) {
                // Code for RegexpRef specified at cc21/mdx.jj:1272:3
                consumeToken(LBRACE);
                if (scan$mdx_jj$1274$5()) {
                    // Code for CodeBlock specified at cc21/mdx.jj:1275:5
                    expressions= Collections.emptyList();
                }
                else if (first_set$mdx_jj$1279$5.contains(nextTokenType())) {
                    // Code for NonTerminal specified at cc21/mdx.jj:1279:5
                    pushOntoCallStack("atom", "cc21/mdx.jj", 1279, 5);
                    try {
                        expressions= expList();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else  {
                    pushOntoCallStack("atom", "cc21/mdx.jj", 1274, 5);
                    throw new ParseException(this, first_set$mdx_jj$1274$5, parsingStack);
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1281:3
                consumeToken(RBRACE);
                // Code for CodeBlock specified at cc21/mdx.jj:1282:3
                return new CallExpression("{}", CallExpression.Type.Braces, expressions);
            }
            else if (nextTokenType()== CASE) {
                // Code for NonTerminal specified at cc21/mdx.jj:1286:3
                pushOntoCallStack("atom", "cc21/mdx.jj", 1286, 3);
                try {
                    expression= caseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1287:3
                return expression;
            }
            else if (first_set$mdx_jj$1293$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:1293:3
                pushOntoCallStack("atom", "cc21/mdx.jj", 1293, 3);
                try {
                    // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
                    // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
                    segment= parseNameSegment();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at cc21/mdx.jj:1294:3
                while (true) {
                    if (!(nextTokenType()== BANG)) break;
                    // Code for RegexpRef specified at cc21/mdx.jj:1295:5
                    consumeToken(BANG);
                    // Code for NonTerminal specified at cc21/mdx.jj:1295:14
                    pushOntoCallStack("atom", "cc21/mdx.jj", 1295, 14);
                    try {
                        segment= parseNameSegment();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1296:5
                    // We support the syntax for qualifying function names with package
                    // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
                    // but currently we ignore the qualifiers. The previous example is
                    // equivalent to 'foo(a, b)'.
                }
                if (nextTokenType()== LPAREN) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1304:5
                    consumeToken(LPAREN);
                    if (scan$mdx_jj$1306$7()) {
                        // Code for CodeBlock specified at cc21/mdx.jj:1307:7
                        expressions= Collections.emptyList();
                    }
                    else  {
                        // Code for NonTerminal specified at cc21/mdx.jj:1311:7
                        pushOntoCallStack("atom", "cc21/mdx.jj", 1311, 7);
                        try {
                            expressions= expOrEmptyList();
                        }
                        finally {
                            popCallStack();
                        }
                    }
                    // Code for RegexpRef specified at cc21/mdx.jj:1313:5
                    consumeToken(RPAREN);
                }
                else  {
                    // Code for CodeBlock specified at cc21/mdx.jj:1315:16
                    expressions= null;
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1319:3
                return createCall(null, segment, expressions);
            }
            else  {
                pushOntoCallStack("atom", "cc21/mdx.jj", 1237, 3);
                throw new ParseException(this, atom_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1097= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1098);
            if (atom35!=null) {
                if (parseException1097== null) {
                    closeNodeScope(atom35, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1324:1
    final public Expression caseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "caseExpression";
        ASTcaseExpression caseExpression36= null;
        if (buildTree) {
            caseExpression36= new ASTcaseExpression();
            openNodeScope(caseExpression36);
        }
        Expression expression, expression2;
        List<Expression> expressions= new ArrayList<Expression> ();
        boolean match= false;
        ParseException parseException1271= null;
        int callStackSize1272= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.jj:1331:3
            consumeToken(CASE);
            // Code for ZeroOrOne specified at cc21/mdx.jj:1332:3
            if (first_set$mdx_jj$1333$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:1333:5
                pushOntoCallStack("caseExpression", "cc21/mdx.jj", 1333, 5);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1334:5
                match= true;
                expressions.add(expression);
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1339:3
            while (true) {
                if (!(nextTokenType()== WHEN)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:1340:5
                consumeToken(WHEN);
                // Code for NonTerminal specified at cc21/mdx.jj:1340:14
                pushOntoCallStack("caseExpression", "cc21/mdx.jj", 1340, 14);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1340:45
                consumeToken(THEN);
                // Code for NonTerminal specified at cc21/mdx.jj:1340:54
                pushOntoCallStack("caseExpression", "cc21/mdx.jj", 1340, 54);
                try {
                    expression2= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1341:5
                expressions.add(expression);
                expressions.add(expression2);
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:1346:3
            if (nextTokenType()== ELSE) {
                // Code for RegexpRef specified at cc21/mdx.jj:1347:5
                consumeToken(ELSE);
                // Code for NonTerminal specified at cc21/mdx.jj:1347:14
                pushOntoCallStack("caseExpression", "cc21/mdx.jj", 1347, 14);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1348:5
                expressions.add(expression);
            }
            // Code for RegexpRef specified at cc21/mdx.jj:1352:3
            consumeToken(END);
            // Code for CodeBlock specified at cc21/mdx.jj:1353:3
            if (match) {
                return new CallExpression("_CaseMatch", CallExpression.Type.Term_Case, expressions);
            }
            else  {
                return new CallExpression("_CaseTest", CallExpression.Type.Term_Case, expressions);
            }
        }
        catch(ParseException e) {
            parseException1271= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1272);
            if (caseExpression36!=null) {
                if (parseException1271== null) {
                    closeNodeScope(caseExpression36, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1367:1
    final public CellProperty parseCellProperty() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseCellProperty";
        ASTparseCellProperty parseCellProperty37= null;
        if (buildTree) {
            parseCellProperty37= new ASTparseCellProperty();
            openNodeScope(parseCellProperty37);
        }
        ParseException parseException1331= null;
        int callStackSize1332= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1370:3
            pushOntoCallStack("parseCellProperty", "cc21/mdx.jj", 1370, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1371:3
            return new CellProperty(List.of());
        }
        catch(ParseException e) {
            parseException1331= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1332);
            if (parseCellProperty37!=null) {
                if (parseException1331== null) {
                    closeNodeScope(parseCellProperty37, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1376:1
    final public CreateSetBodyClause parseCreateSetBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseCreateSetBodyClause";
        ASTparseCreateSetBodyClause parseCreateSetBodyClause38= null;
        if (buildTree) {
            parseCreateSetBodyClause38= new ASTparseCreateSetBodyClause();
            openNodeScope(parseCreateSetBodyClause38);
        }
        ParseException parseException1340= null;
        int callStackSize1341= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1379:3
            pushOntoCallStack("parseCreateSetBodyClause", "cc21/mdx.jj", 1379, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.jj:1379:21
            consumeToken(AS);
            // Code for NonTerminal specified at cc21/mdx.jj:1379:28
            pushOntoCallStack("parseCreateSetBodyClause", "cc21/mdx.jj", 1379, 28);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1380:3
            return new CreateSetBodyClause();
        }
        catch(ParseException e) {
            parseException1340= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1341);
            if (parseCreateSetBodyClause38!=null) {
                if (parseException1340== null) {
                    closeNodeScope(parseCreateSetBodyClause38, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1385:1
    final public SelectDimensionPropertyListClause parseSelectDimensionPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectDimensionPropertyListClause";
        ASTparseSelectDimensionPropertyListClause parseSelectDimensionPropertyListClause39= null;
        if (buildTree) {
            parseSelectDimensionPropertyListClause39= new ASTparseSelectDimensionPropertyListClause();
            openNodeScope(parseSelectDimensionPropertyListClause39);
        }
        ParseException parseException1355= null;
        int callStackSize1356= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.jj:1388:3
            if (nextTokenType()== DIMENSION) {
                // Code for RegexpRef specified at cc21/mdx.jj:1388:4
                consumeToken(DIMENSION);
            }
            // Code for RegexpRef specified at cc21/mdx.jj:1388:20
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at cc21/mdx.jj:1389:3
            pushOntoCallStack("parseSelectDimensionPropertyListClause", "cc21/mdx.jj", 1389, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1390:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:1391:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:1391:15
                pushOntoCallStack("parseSelectDimensionPropertyListClause", "cc21/mdx.jj", 1391, 15);
                try {
                    parseIdentifier();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1393:3
            return new SelectDimensionPropertyListClause();
        }
        catch(ParseException e) {
            parseException1355= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1356);
            if (parseSelectDimensionPropertyListClause39!=null) {
                if (parseException1355== null) {
                    closeNodeScope(parseSelectDimensionPropertyListClause39, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1399:1
    final public// <SelectQueryAxisClause> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
    SelectQueryAxisClause parseSelectQueryAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectQueryAxisClause";
        ASTparseSelectQueryAxisClause parseSelectQueryAxisClause40= null;
        if (buildTree) {
            parseSelectQueryAxisClause40= new ASTparseSelectQueryAxisClause();
            openNodeScope(parseSelectQueryAxisClause40);
        }
        boolean nonEmpty= false;
        SelectDimensionPropertyListClause selectDimensionPropertyListClause= null;
        Expression expression;
        int n;
        Axis axis;
        ParseException parseException1388= null;
        int callStackSize1389= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.jj:1408:3
            if (nextTokenType()== NON) {
                // Code for RegexpRef specified at cc21/mdx.jj:1408:4
                consumeToken(NON);
                // Code for RegexpRef specified at cc21/mdx.jj:1408:12
                consumeToken(EMPTY);
                // Code for CodeBlock specified at cc21/mdx.jj:1409:3
                nonEmpty= true;
            }
            // Code for NonTerminal specified at cc21/mdx.jj:1413:3
            pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1413, 3);
            try {
                expression= parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:1414:3
            if (nextTokenType()== DIMENSION||nextTokenType== PROPERTIES) {
                // Code for NonTerminal specified at cc21/mdx.jj:1415:5
                pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1415, 5);
                try {
                    selectDimensionPropertyListClause= parseSelectDimensionPropertyListClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at cc21/mdx.jj:1417:3
            consumeToken(ON);
            if (nextTokenType()== AXIS||nextTokenType== UNSIGNED_INTEGER_LITERAL) {
                if (nextTokenType()== UNSIGNED_INTEGER_LITERAL) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1420:7
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at cc21/mdx.jj:1421:7
                    n= Integer.valueOf(getToken(0).getImage()).intValue();
                }
                else if (nextTokenType()== AXIS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1424:7
                    consumeToken(AXIS);
                    // Code for RegexpRef specified at cc21/mdx.jj:1424:16
                    consumeToken(LPAREN);
                    // Code for RegexpRef specified at cc21/mdx.jj:1424:27
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at cc21/mdx.jj:1425:7
                    n= Integer.valueOf(getToken(0).getImage()).intValue();
                    // Code for RegexpRef specified at cc21/mdx.jj:1428:7
                    consumeToken(RPAREN);
                }
                else  {
                    pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1420, 7);
                    throw new ParseException(this, first_set$mdx_jj$1420$7, parsingStack);
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1430:5
                if (n<0) {
                    throw new IllegalArgumentException("Only axis numbers >= 0 allowed.");
                }
                else  {
                    axis= Axis.create(n);
                }
            }
            else if (first_set$mdx_jj$1441$5.contains(nextTokenType())) {
                if (nextTokenType()== COLUMNS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1442:7
                    consumeToken(COLUMNS);
                    // Code for CodeBlock specified at cc21/mdx.jj:1443:7
                    axis= Axis.COLUMNS;
                }
                else if (nextTokenType()== ROWS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1446:7
                    consumeToken(ROWS);
                    // Code for CodeBlock specified at cc21/mdx.jj:1447:7
                    axis= Axis.ROWS;
                }
                else if (nextTokenType()== PAGES) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1450:7
                    consumeToken(PAGES);
                    // Code for CodeBlock specified at cc21/mdx.jj:1451:7
                    axis= Axis.PAGES;
                }
                else if (nextTokenType()== SECTIONS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1454:7
                    consumeToken(SECTIONS);
                    // Code for CodeBlock specified at cc21/mdx.jj:1455:7
                    axis= Axis.SECTIONS;
                }
                else if (nextTokenType()== CHAPTERS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1458:7
                    consumeToken(CHAPTERS);
                    // Code for CodeBlock specified at cc21/mdx.jj:1459:7
                    axis= Axis.CHAPTERS;
                }
                else  {
                    pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1442, 7);
                    throw new ParseException(this, first_set$mdx_jj$1442$7, parsingStack);
                }
            }
            else  {
                pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1419, 5);
                throw new ParseException(this, first_set$mdx_jj$1419$5, parsingStack);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1464:3
            return new SelectQueryAxisClause(nonEmpty, expression, axis, selectDimensionPropertyListClause);
        }
        catch(ParseException e) {
            parseException1388= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1389);
            if (parseSelectQueryAxisClause40!=null) {
                if (parseException1388== null) {
                    closeNodeScope(parseSelectQueryAxisClause40, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1469:1
    final public SelectSubcubeClause parseSelectSubcubeClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectSubcubeClause";
        ASTparseSelectSubcubeClause parseSelectSubcubeClause41= null;
        if (buildTree) {
            parseSelectSubcubeClause41= new ASTparseSelectSubcubeClause();
            openNodeScope(parseSelectSubcubeClause41);
        }
        ParseException parseException1517= null;
        int callStackSize1518= parsingStack.size();
        try {
            if (first_set$mdx_jj$1474$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:1474:5
                pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1474, 5);
                try {
                    parseIdentifier();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpRef specified at cc21/mdx.jj:1475:5
                consumeToken(LPAREN);
                // Code for RegexpRef specified at cc21/mdx.jj:1475:16
                consumeToken(SELECT);
                // Code for ZeroOrOne specified at cc21/mdx.jj:1476:5
                if (first_set$mdx_jj$1477$7.contains(nextTokenType())) {
                    // Code for NonTerminal specified at cc21/mdx.jj:1477:7
                    pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1477, 7);
                    try {
                        parseSelectQueryAxisClause();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for ZeroOrMore specified at cc21/mdx.jj:1478:7
                    while (true) {
                        if (!(nextTokenType()== COMMA)) break;
                        // Code for RegexpRef specified at cc21/mdx.jj:1479:9
                        consumeToken(COMMA);
                        // Code for NonTerminal specified at cc21/mdx.jj:1479:19
                        pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1479, 19);
                        try {
                            parseSelectQueryAxisClause();
                        }
                        finally {
                            popCallStack();
                        }
                    }
                }
            }
            else if (nextTokenType()== FROM||nextTokenType== ASTERISK) {
                // Code for ZeroOrOne specified at cc21/mdx.jj:1482:5
                if (nextTokenType()== ASTERISK) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1482:6
                    consumeToken(ASTERISK);
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1483:5
                consumeToken(FROM);
                // Code for NonTerminal specified at cc21/mdx.jj:1483:14
                pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1483, 14);
                try {
                    parseSelectSubcubeClause();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at cc21/mdx.jj:1484:5
                if (nextTokenType()== WHERE) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1485:7
                    consumeToken(WHERE);
                    // Code for NonTerminal specified at cc21/mdx.jj:1485:17
                    pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1485, 17);
                    try {
                        parseExpression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1487:5
                consumeToken(RPAREN);
            }
            else  {
                pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1474, 5);
                throw new ParseException(this, first_set$mdx_jj$1474$5$, parsingStack);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1489:3
            return new SelectSubcubeClause();
        }
        catch(ParseException e) {
            parseException1517= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1518);
            if (parseSelectSubcubeClause41!=null) {
                if (parseException1517== null) {
                    closeNodeScope(parseSelectSubcubeClause41, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$544$5= tokenTypeSet(MEMBER, SET, CALCULATED);
    static private final EnumSet<TokenType> first_set$mdx_jj$572$5= first_set$mdx_jj$572$5_init();
    static private EnumSet<TokenType> first_set$mdx_jj$572$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$703$3= first_set$mdx_jj$703$3_init();
    static private EnumSet<TokenType> first_set$mdx_jj$703$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$783$5$= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$783$5= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$797$3= tokenTypeSet(DIMENSION, PROPERTIES);
    static private final EnumSet<TokenType> first_set$mdx_jj$827$5= tokenTypeSet(AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$958$3= first_set$mdx_jj$958$3_init();
    static private EnumSet<TokenType> first_set$mdx_jj$958$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$980$5= tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_jj$981$7= tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_jj$1150$3= first_set$mdx_jj$1150$3_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1150$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1245$3= tokenTypeSet(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_jj$1274$5= first_set$mdx_jj$1274$5_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1274$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, RBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1279$5= first_set$mdx_jj$1279$5_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1279$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1293$3= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$1333$5= first_set$mdx_jj$1333$5_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1333$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1419$5= tokenTypeSet(AXIS, CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_jj$1420$7= tokenTypeSet(AXIS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_jj$1441$5= tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);
    static private final EnumSet<TokenType> first_set$mdx_jj$1442$7= tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);
    static private final EnumSet<TokenType> first_set$mdx_jj$1474$5$= first_set$mdx_jj$1474$5$_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1474$5$_init() {
        return tokenTypeSet(DIMENSION, FROM, PROPERTIES, LPAREN, ASTERISK, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1474$5= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$1477$7= first_set$mdx_jj$1477$7_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1477$7_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    private final boolean scanToken(TokenType expectedType) {
        Token peekedToken= nextToken(currentLookaheadToken);
        TokenType type= peekedToken.getType();
        if (type!=expectedType) return false;
        if (remainingLookahead!=UNLIMITED) remainingLookahead--;
        currentLookaheadToken= peekedToken;
        return true;
    }

    private final boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken= nextToken(currentLookaheadToken);
        TokenType type= peekedToken.getType();
        if (!types.contains(type)) return false;
        if (remainingLookahead!=UNLIMITED) remainingLookahead--;
        //     if (type == upToTokenType) remainingLookahead = 0;
        currentLookaheadToken= peekedToken;
        return true;
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:684:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$684$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:684:5
            if (!scanToken(AS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:684:12
            // NonTerminal parseIdentifier at cc21/mdx.jj:684:12
            pushOntoLookaheadStack("parseExpression", "cc21/mdx.jj", 684, 12);
            boolean prevScanToEnd1611= scanToEnd;
            currentLookaheadProduction= "parseIdentifier";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseIdentifier()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1611;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:685:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:703:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$703$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:703:3
            // NonTerminal parseExpression at cc21/mdx.jj:703:3
            pushOntoLookaheadStack("expressionOrEmpty", "cc21/mdx.jj", 703, 3);
            boolean prevScanToEnd1612= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1612;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:704:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:708:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$708$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:708:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:727:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$727$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:727:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:728:5
            // NonTerminal expressionOrEmpty at cc21/mdx.jj:728:5
            pushOntoLookaheadStack("expOrEmptyList", "cc21/mdx.jj", 728, 5);
            boolean prevScanToEnd1613= scanToEnd;
            currentLookaheadProduction= "expressionOrEmpty";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$expressionOrEmpty()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1613;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:729:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:750:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$750$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:750:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:751:5
            // NonTerminal parseExpression at cc21/mdx.jj:751:5
            pushOntoLookaheadStack("expList", "cc21/mdx.jj", 751, 5);
            boolean prevScanToEnd1614= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1614;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:752:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:783:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$783$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:783:5
            // NonTerminal parseNameSegment at cc21/mdx.jj:783:5
            pushOntoLookaheadStack("parseIdentifier", "cc21/mdx.jj", 783, 5);
            boolean prevScanToEnd1616= scanToEnd;
            currentLookaheadProduction= "parseNameSegment";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseNameSegment()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1616;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:785:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$785$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:785:5
            // NonTerminal parseKeyIdentifier at cc21/mdx.jj:785:5
            pushOntoLookaheadStack("parseIdentifier", "cc21/mdx.jj", 785, 5);
            boolean prevScanToEnd1617= scanToEnd;
            currentLookaheadProduction= "parseKeyIdentifier";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseKeyIdentifier()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1617;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:807:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$807$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:807:3
            if (!scanToken(ATSIGN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:807:14
            if (!scanToken(ID)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:808:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:904:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$904$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:904:5
            Token token1619= currentLookaheadToken;
            int remainingLookahead1619= remainingLookahead;
            boolean hitFailure1619= hitFailure;
            if (!check$mdx_jj$904$5$()) {
                currentLookaheadToken= token1619;
                remainingLookahead= remainingLookahead1619;
                hitFailure= hitFailure1619;
                if (!check$mdx_jj$911$5()) {
                    currentLookaheadToken= token1619;
                    remainingLookahead= remainingLookahead1619;
                    hitFailure= hitFailure1619;
                    if (!check$mdx_jj$920$5()) {
                        currentLookaheadToken= token1619;
                        remainingLookahead= remainingLookahead1619;
                        hitFailure= hitFailure1619;
                        return false;
                    }
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:904:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$904$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:904:5
            if (!scanToken(OR)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:904:12
            // NonTerminal term5 at cc21/mdx.jj:904:12
            pushOntoLookaheadStack("unaliasedExpression", "cc21/mdx.jj", 904, 12);
            boolean prevScanToEnd1620= scanToEnd;
            currentLookaheadProduction= "term5";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term5()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1620;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:905:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:911:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$911$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:911:5
            if (!scanToken(XOR)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:911:13
            // NonTerminal term5 at cc21/mdx.jj:911:13
            pushOntoLookaheadStack("unaliasedExpression", "cc21/mdx.jj", 911, 13);
            boolean prevScanToEnd1621= scanToEnd;
            currentLookaheadProduction= "term5";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term5()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1621;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:912:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:920:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$920$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:920:5
            if (!scanToken(COLON)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:920:15
            // NonTerminal term5 at cc21/mdx.jj:920:15
            pushOntoLookaheadStack("unaliasedExpression", "cc21/mdx.jj", 920, 15);
            boolean prevScanToEnd1622= scanToEnd;
            currentLookaheadProduction= "term5";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term5()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1622;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:921:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:940:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$940$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:940:5
            if (!scanToken(AND)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:940:13
            // NonTerminal term4 at cc21/mdx.jj:940:13
            pushOntoLookaheadStack("term5", "cc21/mdx.jj", 940, 13);
            boolean prevScanToEnd1623= scanToEnd;
            currentLookaheadProduction= "term4";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term4()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1623;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:941:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:958:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$958$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:958:3
            // NonTerminal term3 at cc21/mdx.jj:958:3
            pushOntoLookaheadStack("term4", "cc21/mdx.jj", 958, 3);
            boolean prevScanToEnd1624= scanToEnd;
            currentLookaheadProduction= "term3";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$term3()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1624;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:959:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:962:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$962$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:962:3
            if (!scanToken(NOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:962:11
            // NonTerminal term4 at cc21/mdx.jj:962:11
            pushOntoLookaheadStack("term4", "cc21/mdx.jj", 962, 11);
            boolean prevScanToEnd1625= scanToEnd;
            currentLookaheadProduction= "term4";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term4()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1625;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:963:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:980:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$980$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:980:5
            Token token1626= currentLookaheadToken;
            int remainingLookahead1626= remainingLookahead;
            boolean hitFailure1626= hitFailure;
            if (!check$mdx_jj$980$5$()) {
                currentLookaheadToken= token1626;
                remainingLookahead= remainingLookahead1626;
                hitFailure= hitFailure1626;
                if (!check$mdx_jj$1016$5()) {
                    currentLookaheadToken= token1626;
                    remainingLookahead= remainingLookahead1626;
                    hitFailure= hitFailure1626;
                    if (!check$mdx_jj$1026$5()) {
                        currentLookaheadToken= token1626;
                        remainingLookahead= remainingLookahead1626;
                        hitFailure= hitFailure1626;
                        if (!check$mdx_jj$1034$5()) {
                            currentLookaheadToken= token1626;
                            remainingLookahead= remainingLookahead1626;
                            hitFailure= hitFailure1626;
                            if (!check$mdx_jj$1039$5()) {
                                currentLookaheadToken= token1626;
                                remainingLookahead= remainingLookahead1626;
                                hitFailure= hitFailure1626;
                                if (!check$mdx_jj$1046$5()) {
                                    currentLookaheadToken= token1626;
                                    remainingLookahead= remainingLookahead1626;
                                    hitFailure= hitFailure1626;
                                    if (!check$mdx_jj$1059$5()) {
                                        currentLookaheadToken= token1626;
                                        remainingLookahead= remainingLookahead1626;
                                        hitFailure= hitFailure1626;
                                        if (!check$mdx_jj$1066$5()) {
                                            currentLookaheadToken= token1626;
                                            remainingLookahead= remainingLookahead1626;
                                            hitFailure= hitFailure1626;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:980:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$980$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:981:7
            // Applying single-token optimization for expansion of type ExpansionChoice
            // cc21/mdx.jj:981:7
            if (!scanToken(first_set$mdx_jj$981$7)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1006:5
            // NonTerminal term2 at cc21/mdx.jj:1006:5
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1006, 5);
            boolean prevScanToEnd1627= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1627;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1007:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1016:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1016$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1017:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1017:12
            if (!scanToken(NULL)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1018:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1026:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1026$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1027:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1027:12
            // NonTerminal term2 at cc21/mdx.jj:1027:12
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1027, 12);
            boolean prevScanToEnd1628= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1628;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1028:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1034:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1034$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1034:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1034:12
            if (!scanToken(EMPTY)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1035:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1039:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1039$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1039:5
            if (!scanToken(MATCHES)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1039:17
            // NonTerminal term2 at cc21/mdx.jj:1039:17
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1039, 17);
            boolean prevScanToEnd1629= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1629;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1040:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1046:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1046$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1047:5
            if (!scanToken(NOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1047:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1047:25
            // NonTerminal term2 at cc21/mdx.jj:1047:25
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1047, 25);
            boolean prevScanToEnd1630= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1630;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1048:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1059:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1059$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1059:5
            if (!scanToken(IN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1059:12
            // NonTerminal term2 at cc21/mdx.jj:1059:12
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1059, 12);
            boolean prevScanToEnd1631= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1631;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1060:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1066:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1066$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1066:5
            if (!scanToken(NOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1066:13
            if (!scanToken(IN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1066:20
            // NonTerminal term2 at cc21/mdx.jj:1066:20
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1066, 20);
            boolean prevScanToEnd1632= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1632;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1067:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1091:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1091$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1091:5
            Token token1633= currentLookaheadToken;
            int remainingLookahead1633= remainingLookahead;
            boolean hitFailure1633= hitFailure;
            if (!check$mdx_jj$1091$5$()) {
                currentLookaheadToken= token1633;
                remainingLookahead= remainingLookahead1633;
                hitFailure= hitFailure1633;
                if (!check$mdx_jj$1098$5()) {
                    currentLookaheadToken= token1633;
                    remainingLookahead= remainingLookahead1633;
                    hitFailure= hitFailure1633;
                    if (!check$mdx_jj$1105$5()) {
                        currentLookaheadToken= token1633;
                        remainingLookahead= remainingLookahead1633;
                        hitFailure= hitFailure1633;
                        return false;
                    }
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1091:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1091$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1091:5
            if (!scanToken(PLUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1091:14
            // NonTerminal term at cc21/mdx.jj:1091:14
            pushOntoLookaheadStack("term2", "cc21/mdx.jj", 1091, 14);
            boolean prevScanToEnd1634= scanToEnd;
            currentLookaheadProduction= "term";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1634;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1092:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1098:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1098$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1098:5
            if (!scanToken(MINUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1098:15
            // NonTerminal term at cc21/mdx.jj:1098:15
            pushOntoLookaheadStack("term2", "cc21/mdx.jj", 1098, 15);
            boolean prevScanToEnd1635= scanToEnd;
            currentLookaheadProduction= "term";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1635;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1099:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1105:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1105$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1105:5
            if (!scanToken(CONCAT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1105:16
            // NonTerminal term at cc21/mdx.jj:1105:16
            pushOntoLookaheadStack("term2", "cc21/mdx.jj", 1105, 16);
            boolean prevScanToEnd1636= scanToEnd;
            currentLookaheadProduction= "term";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1636;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1106:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1125:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1125$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1125:5
            Token token1637= currentLookaheadToken;
            int remainingLookahead1637= remainingLookahead;
            boolean hitFailure1637= hitFailure;
            if (!check$mdx_jj$1125$5$()) {
                currentLookaheadToken= token1637;
                remainingLookahead= remainingLookahead1637;
                hitFailure= hitFailure1637;
                if (!check$mdx_jj$1132$5()) {
                    currentLookaheadToken= token1637;
                    remainingLookahead= remainingLookahead1637;
                    hitFailure= hitFailure1637;
                    return false;
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1125:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1125$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1125:5
            if (!scanToken(ASTERISK)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1125:18
            // NonTerminal factor at cc21/mdx.jj:1125:18
            pushOntoLookaheadStack("term", "cc21/mdx.jj", 1125, 18);
            boolean prevScanToEnd1638= scanToEnd;
            currentLookaheadProduction= "factor";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$factor()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1638;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1126:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1132:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1132$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1132:5
            if (!scanToken(SOLIDUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1132:17
            // NonTerminal factor at cc21/mdx.jj:1132:17
            pushOntoLookaheadStack("term", "cc21/mdx.jj", 1132, 17);
            boolean prevScanToEnd1639= scanToEnd;
            currentLookaheadProduction= "factor";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$factor()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1639;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1133:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1150:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1150$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1150:3
            // NonTerminal primary at cc21/mdx.jj:1150:3
            pushOntoLookaheadStack("factor", "cc21/mdx.jj", 1150, 3);
            boolean prevScanToEnd1640= scanToEnd;
            currentLookaheadProduction= "primary";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$primary()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1640;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1151:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1154:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1154$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1154:3
            if (!scanToken(PLUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1154:12
            // NonTerminal primary at cc21/mdx.jj:1154:12
            pushOntoLookaheadStack("factor", "cc21/mdx.jj", 1154, 12);
            boolean prevScanToEnd1641= scanToEnd;
            currentLookaheadProduction= "primary";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$primary()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1641;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1155:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1158:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1158$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1158:3
            if (!scanToken(MINUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1158:13
            // NonTerminal primary at cc21/mdx.jj:1158:13
            pushOntoLookaheadStack("factor", "cc21/mdx.jj", 1158, 13);
            boolean prevScanToEnd1642= scanToEnd;
            currentLookaheadProduction= "primary";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$primary()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1642;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1159:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1165:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1165$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1165:3
            if (!scanToken(EXISTING)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1165:16
            // NonTerminal primary at cc21/mdx.jj:1165:16
            pushOntoLookaheadStack("factor", "cc21/mdx.jj", 1165, 16);
            boolean prevScanToEnd1643= scanToEnd;
            currentLookaheadProduction= "primary";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$primary()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1643;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1166:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1181:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1181$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1181:5
            if (!scanToken(DOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1181:13
            // NonTerminal segmentOrFuncall at cc21/mdx.jj:1181:13
            pushOntoLookaheadStack("primary", "cc21/mdx.jj", 1181, 13);
            boolean prevScanToEnd1644= scanToEnd;
            currentLookaheadProduction= "segmentOrFuncall";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$segmentOrFuncall()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1644;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1196:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1196$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1196:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1198:7
            Token token1645= currentLookaheadToken;
            int remainingLookahead1645= remainingLookahead;
            boolean hitFailure1645= hitFailure;
            if (!check$mdx_jj$1198$7()) {
                currentLookaheadToken= token1645;
                remainingLookahead= remainingLookahead1645;
                hitFailure= hitFailure1645;
                if (!check$mdx_jj$1203$7()) {
                    currentLookaheadToken= token1645;
                    remainingLookahead= remainingLookahead1645;
                    hitFailure= hitFailure1645;
                    return false;
                }
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1205:5
            if (!scanToken(RPAREN)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1198:7
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1198$7() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1198$17()) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1199:7
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1203:7
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1203$7() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1203:7
            // NonTerminal expOrEmptyList at cc21/mdx.jj:1203:7
            pushOntoLookaheadStack("segmentOrFuncall", "cc21/mdx.jj", 1203, 7);
            boolean prevScanToEnd1646= scanToEnd;
            currentLookaheadProduction= "expOrEmptyList";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$expOrEmptyList()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1646;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1253:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1253$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1253:3
            if (!scanToken(CAST)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1253:12
            if (!scanToken(LPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1253:23
            // NonTerminal unaliasedExpression at cc21/mdx.jj:1253:23
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1253, 23);
            boolean prevScanToEnd1647= scanToEnd;
            currentLookaheadProduction= "unaliasedExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$unaliasedExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1647;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1254:3
            if (!scanToken(AS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1254:10
            // NonTerminal parseNameSegment at cc21/mdx.jj:1254:10
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1254, 10);
            boolean prevScanToEnd1648= scanToEnd;
            currentLookaheadProduction= "parseNameSegment";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseNameSegment()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1648;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1254:39
            if (!scanToken(RPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1255:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1263:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1263$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1263:3
            if (!scanToken(LPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1263:14
            // NonTerminal expList at cc21/mdx.jj:1263:14
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1263, 14);
            boolean prevScanToEnd1649= scanToEnd;
            currentLookaheadProduction= "expList";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$expList()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1649;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1263:38
            if (!scanToken(RPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1264:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1272:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1272$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1272:3
            if (!scanToken(LBRACE)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1274:5
            Token token1650= currentLookaheadToken;
            int remainingLookahead1650= remainingLookahead;
            boolean hitFailure1650= hitFailure;
            if (!check$mdx_jj$1274$5()) {
                currentLookaheadToken= token1650;
                remainingLookahead= remainingLookahead1650;
                hitFailure= hitFailure1650;
                if (!check$mdx_jj$1279$5()) {
                    currentLookaheadToken= token1650;
                    remainingLookahead= remainingLookahead1650;
                    hitFailure= hitFailure1650;
                    return false;
                }
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1281:3
            if (!scanToken(RBRACE)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1282:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1274:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1274$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1274$15()) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1275:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1279:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1279$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1279:5
            // NonTerminal expList at cc21/mdx.jj:1279:5
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1279, 5);
            boolean prevScanToEnd1651= scanToEnd;
            currentLookaheadProduction= "expList";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$expList()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1651;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1286:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1286$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1286:3
            // NonTerminal caseExpression at cc21/mdx.jj:1286:3
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1286, 3);
            boolean prevScanToEnd1652= scanToEnd;
            currentLookaheadProduction= "caseExpression";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$caseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1652;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1287:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1293:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1293$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1293:3
            // NonTerminal parseNameSegment at cc21/mdx.jj:1293:3
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1293, 3);
            boolean prevScanToEnd1653= scanToEnd;
            currentLookaheadProduction= "parseNameSegment";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseNameSegment()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1653;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1294:3
            while (remainingLookahead> 0&&!hitFailure) {
                Token token1654= currentLookaheadToken;
                if (!check$mdx_jj$1295$5()) {
                    currentLookaheadToken= token1654;
                    break;
                }
            }
            hitFailure= false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1304:5
            Token token1655= currentLookaheadToken;
            int remainingLookahead1655= remainingLookahead;
            boolean hitFailure1655= hitFailure;
            if (!check$mdx_jj$1304$5()) {
                currentLookaheadToken= token1655;
                remainingLookahead= remainingLookahead1655;
                hitFailure= hitFailure1655;
                if (!check$mdx_jj$1315$16()) {
                    currentLookaheadToken= token1655;
                    remainingLookahead= remainingLookahead1655;
                    hitFailure= hitFailure1655;
                    return false;
                }
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1319:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1295:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1295$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1295:5
            if (!scanToken(BANG)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1295:14
            // NonTerminal parseNameSegment at cc21/mdx.jj:1295:14
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1295, 14);
            boolean prevScanToEnd1656= scanToEnd;
            currentLookaheadProduction= "parseNameSegment";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseNameSegment()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1656;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1296:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1304:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1304$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1304:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1306:7
            Token token1657= currentLookaheadToken;
            int remainingLookahead1657= remainingLookahead;
            boolean hitFailure1657= hitFailure;
            if (!check$mdx_jj$1306$7()) {
                currentLookaheadToken= token1657;
                remainingLookahead= remainingLookahead1657;
                hitFailure= hitFailure1657;
                if (!check$mdx_jj$1311$7()) {
                    currentLookaheadToken= token1657;
                    remainingLookahead= remainingLookahead1657;
                    hitFailure= hitFailure1657;
                    return false;
                }
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1313:5
            if (!scanToken(RPAREN)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1306:7
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1306$7() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1306$17()) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1307:7
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1311:7
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1311$7() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1311:7
            // NonTerminal expOrEmptyList at cc21/mdx.jj:1311:7
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1311, 7);
            boolean prevScanToEnd1658= scanToEnd;
            currentLookaheadProduction= "expOrEmptyList";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$expOrEmptyList()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1658;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1315:16
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1315$16() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1315:16
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1333:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1333$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1333:5
            // NonTerminal parseExpression at cc21/mdx.jj:1333:5
            pushOntoLookaheadStack("caseExpression", "cc21/mdx.jj", 1333, 5);
            boolean prevScanToEnd1659= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1659;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1334:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1340:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1340$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1340:5
            if (!scanToken(WHEN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1340:14
            // NonTerminal parseExpression at cc21/mdx.jj:1340:14
            pushOntoLookaheadStack("caseExpression", "cc21/mdx.jj", 1340, 14);
            boolean prevScanToEnd1660= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1660;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1340:45
            if (!scanToken(THEN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1340:54
            // NonTerminal parseExpression at cc21/mdx.jj:1340:54
            pushOntoLookaheadStack("caseExpression", "cc21/mdx.jj", 1340, 54);
            boolean prevScanToEnd1661= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1661;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1341:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1347:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1347$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1347:5
            if (!scanToken(ELSE)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1347:14
            // NonTerminal parseExpression at cc21/mdx.jj:1347:14
            pushOntoLookaheadStack("caseExpression", "cc21/mdx.jj", 1347, 14);
            boolean prevScanToEnd1662= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1662;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1348:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:884:5
    private final boolean scan$mdx_jj$884$5() {
        int nonTerminalNesting1677= nonTerminalNesting;
        int lookaheadRoutineNesting1679= lookaheadRoutineNesting;
        Token currentLookaheadToken1678= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= UNLIMITED;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$884$15()) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1679;
            currentLookaheadToken= currentLookaheadToken1678;
            nonTerminalNesting= nonTerminalNesting1677;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1016:5
    private final boolean scan$mdx_jj$1016$5() {
        int nonTerminalNesting1680= nonTerminalNesting;
        int lookaheadRoutineNesting1682= lookaheadRoutineNesting;
        Token currentLookaheadToken1681= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= 2;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1017:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1017:12
            if (!scanToken(NULL)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1018:5
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1682;
            currentLookaheadToken= currentLookaheadToken1681;
            nonTerminalNesting= nonTerminalNesting1680;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1026:5
    private final boolean scan$mdx_jj$1026$5() {
        int nonTerminalNesting1683= nonTerminalNesting;
        int lookaheadRoutineNesting1685= lookaheadRoutineNesting;
        Token currentLookaheadToken1684= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= 2;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1027:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1027:12
            // NonTerminal term2 at cc21/mdx.jj:1027:12
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1027, 12);
            boolean prevScanToEnd1686= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1686;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1028:5
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1685;
            currentLookaheadToken= currentLookaheadToken1684;
            nonTerminalNesting= nonTerminalNesting1683;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1046:5
    private final boolean scan$mdx_jj$1046$5() {
        int nonTerminalNesting1687= nonTerminalNesting;
        int lookaheadRoutineNesting1689= lookaheadRoutineNesting;
        Token currentLookaheadToken1688= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= 2;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1047:5
            if (!scanToken(NOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1047:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1047:25
            // NonTerminal term2 at cc21/mdx.jj:1047:25
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1047, 25);
            boolean prevScanToEnd1690= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1690;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1048:5
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1689;
            currentLookaheadToken= currentLookaheadToken1688;
            nonTerminalNesting= nonTerminalNesting1687;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1198:7
    private final boolean scan$mdx_jj$1198$7() {
        int nonTerminalNesting1691= nonTerminalNesting;
        int lookaheadRoutineNesting1693= lookaheadRoutineNesting;
        Token currentLookaheadToken1692= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= UNLIMITED;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1198$17()) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1693;
            currentLookaheadToken= currentLookaheadToken1692;
            nonTerminalNesting= nonTerminalNesting1691;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1274:5
    private final boolean scan$mdx_jj$1274$5() {
        int nonTerminalNesting1694= nonTerminalNesting;
        int lookaheadRoutineNesting1696= lookaheadRoutineNesting;
        Token currentLookaheadToken1695= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= UNLIMITED;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1274$15()) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1696;
            currentLookaheadToken= currentLookaheadToken1695;
            nonTerminalNesting= nonTerminalNesting1694;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1306:7
    private final boolean scan$mdx_jj$1306$7() {
        int nonTerminalNesting1697= nonTerminalNesting;
        int lookaheadRoutineNesting1699= lookaheadRoutineNesting;
        Token currentLookaheadToken1698= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= UNLIMITED;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1306$17()) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1699;
            currentLookaheadToken= currentLookaheadToken1698;
            nonTerminalNesting= nonTerminalNesting1697;
        }
    }

    // lookahead routine for lookahead at: 
    // cc21/mdx.jj:884:5
    private final boolean check$mdx_jj$884$15() {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // Applying single-token optimization for expansion of type ExpansionSequence
            // cc21/mdx.jj:884:15
            if (!scanToken(DOT)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // cc21/mdx.jj:1198:7
    private final boolean check$mdx_jj$1198$17() {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // Applying single-token optimization for expansion of type ExpansionSequence
            // cc21/mdx.jj:1198:17
            if (!scanToken(RPAREN)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // cc21/mdx.jj:1274:5
    private final boolean check$mdx_jj$1274$15() {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // Applying single-token optimization for expansion of type ExpansionSequence
            // cc21/mdx.jj:1274:15
            if (!scanToken(RBRACE)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // cc21/mdx.jj:1306:7
    private final boolean check$mdx_jj$1306$17() {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // Applying single-token optimization for expansion of type ExpansionSequence
            // cc21/mdx.jj:1306:17
            if (!scanToken(RPAREN)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseExpression() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:682:3
        // NonTerminal unaliasedExpression at cc21/mdx.jj:682:3
        pushOntoLookaheadStack("parseExpression", "cc21/mdx.jj", 682, 3);
        boolean prevScanToEnd1727= scanToEnd;
        currentLookaheadProduction= "unaliasedExpression";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$unaliasedExpression()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1727;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:683:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1728= currentLookaheadToken;
            if (!check$mdx_jj$684$5()) {
                currentLookaheadToken= token1728;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:693:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expressionOrEmpty() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:703:3
        Token token1729= currentLookaheadToken;
        int remainingLookahead1729= remainingLookahead;
        boolean hitFailure1729= hitFailure;
        if (!check$mdx_jj$703$3()) {
            currentLookaheadToken= token1729;
            remainingLookahead= remainingLookahead1729;
            hitFailure= hitFailure1729;
            if (!check$mdx_jj$708$3()) {
                currentLookaheadToken= token1729;
                remainingLookahead= remainingLookahead1729;
                hitFailure= hitFailure1729;
                return false;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expOrEmptyList() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:722:3
        // NonTerminal expressionOrEmpty at cc21/mdx.jj:722:3
        pushOntoLookaheadStack("expOrEmptyList", "cc21/mdx.jj", 722, 3);
        boolean prevScanToEnd1730= scanToEnd;
        currentLookaheadProduction= "expressionOrEmpty";
        scanToEnd= true;
        ++nonTerminalNesting;
        try {
            if (!check$expressionOrEmpty()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1730;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:723:3
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:726:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1731= currentLookaheadToken;
            if (!check$mdx_jj$727$5()) {
                currentLookaheadToken= token1731;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:733:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expList() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:745:3
        // NonTerminal parseExpression at cc21/mdx.jj:745:3
        pushOntoLookaheadStack("expList", "cc21/mdx.jj", 745, 3);
        boolean prevScanToEnd1732= scanToEnd;
        currentLookaheadProduction= "parseExpression";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$parseExpression()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1732;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:746:3
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:749:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1733= currentLookaheadToken;
            if (!check$mdx_jj$750$5()) {
                currentLookaheadToken= token1733;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:756:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseIdentifier() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:783:5
        Token token1735= currentLookaheadToken;
        int remainingLookahead1735= remainingLookahead;
        boolean hitFailure1735= hitFailure;
        if (!check$mdx_jj$783$5$()) {
            currentLookaheadToken= token1735;
            remainingLookahead= remainingLookahead1735;
            hitFailure= hitFailure1735;
            if (!check$mdx_jj$785$5()) {
                currentLookaheadToken= token1735;
                remainingLookahead= remainingLookahead1735;
                hitFailure= hitFailure1735;
                return false;
            }
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:787:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseNameSegment() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:797:3
        Token token1736= currentLookaheadToken;
        int remainingLookahead1736= remainingLookahead;
        boolean hitFailure1736= hitFailure;
        if (!scanToken(first_set$mdx_jj$797$3)) {
            currentLookaheadToken= token1736;
            remainingLookahead= remainingLookahead1736;
            hitFailure= hitFailure1736;
            if (!scanToken(ID)) {
                currentLookaheadToken= token1736;
                remainingLookahead= remainingLookahead1736;
                hitFailure= hitFailure1736;
                if (!check$mdx_jj$807$3()) {
                    currentLookaheadToken= token1736;
                    remainingLookahead= remainingLookahead1736;
                    hitFailure= hitFailure1736;
                    if (!scanToken(QUOTED_ID)) {
                        currentLookaheadToken= token1736;
                        remainingLookahead= remainingLookahead1736;
                        hitFailure= hitFailure1736;
                        return false;
                    }
                }
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseKeyIdentifier() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for OneOrMore specified at cc21/mdx.jj:826:3
        if (!scanToken(first_set$mdx_jj$827$5)) {
            return false;
        }
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1737= currentLookaheadToken;
            if (!scanToken(first_set$mdx_jj$827$5)) {
                currentLookaheadToken= token1737;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:832:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$unaliasedExpression() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:902:3
        // NonTerminal term5 at cc21/mdx.jj:902:3
        pushOntoLookaheadStack("unaliasedExpression", "cc21/mdx.jj", 902, 3);
        boolean prevScanToEnd1740= scanToEnd;
        currentLookaheadProduction= "term5";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$term5()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1740;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:903:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1741= currentLookaheadToken;
            if (!check$mdx_jj$904$5()) {
                currentLookaheadToken= token1741;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:928:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term5() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:938:3
        // NonTerminal term4 at cc21/mdx.jj:938:3
        pushOntoLookaheadStack("term5", "cc21/mdx.jj", 938, 3);
        boolean prevScanToEnd1742= scanToEnd;
        currentLookaheadProduction= "term4";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$term4()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1742;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:939:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1743= currentLookaheadToken;
            if (!check$mdx_jj$940$5()) {
                currentLookaheadToken= token1743;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:948:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term4() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:958:3
        Token token1744= currentLookaheadToken;
        int remainingLookahead1744= remainingLookahead;
        boolean hitFailure1744= hitFailure;
        if (!check$mdx_jj$958$3()) {
            currentLookaheadToken= token1744;
            remainingLookahead= remainingLookahead1744;
            hitFailure= hitFailure1744;
            if (!check$mdx_jj$962$3()) {
                currentLookaheadToken= token1744;
                remainingLookahead= remainingLookahead1744;
                hitFailure= hitFailure1744;
                return false;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term3() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:977:3
        // NonTerminal term2 at cc21/mdx.jj:977:3
        pushOntoLookaheadStack("term3", "cc21/mdx.jj", 977, 3);
        boolean prevScanToEnd1745= scanToEnd;
        currentLookaheadProduction= "term2";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$term2()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1745;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:978:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1746= currentLookaheadToken;
            if (!check$mdx_jj$980$5()) {
                currentLookaheadToken= token1746;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1079:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term2() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1089:3
        // NonTerminal term at cc21/mdx.jj:1089:3
        pushOntoLookaheadStack("term2", "cc21/mdx.jj", 1089, 3);
        boolean prevScanToEnd1747= scanToEnd;
        currentLookaheadProduction= "term";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$term()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1747;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1090:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1748= currentLookaheadToken;
            if (!check$mdx_jj$1091$5()) {
                currentLookaheadToken= token1748;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1113:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1123:3
        // NonTerminal factor at cc21/mdx.jj:1123:3
        pushOntoLookaheadStack("term", "cc21/mdx.jj", 1123, 3);
        boolean prevScanToEnd1749= scanToEnd;
        currentLookaheadProduction= "factor";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$factor()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1749;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1124:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1750= currentLookaheadToken;
            if (!check$mdx_jj$1125$5()) {
                currentLookaheadToken= token1750;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1140:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$factor() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1150:3
        Token token1751= currentLookaheadToken;
        int remainingLookahead1751= remainingLookahead;
        boolean hitFailure1751= hitFailure;
        if (!check$mdx_jj$1150$3()) {
            currentLookaheadToken= token1751;
            remainingLookahead= remainingLookahead1751;
            hitFailure= hitFailure1751;
            if (!check$mdx_jj$1154$3()) {
                currentLookaheadToken= token1751;
                remainingLookahead= remainingLookahead1751;
                hitFailure= hitFailure1751;
                if (!check$mdx_jj$1158$3()) {
                    currentLookaheadToken= token1751;
                    remainingLookahead= remainingLookahead1751;
                    hitFailure= hitFailure1751;
                    if (!check$mdx_jj$1165$3()) {
                        currentLookaheadToken= token1751;
                        remainingLookahead= remainingLookahead1751;
                        hitFailure= hitFailure1751;
                        return false;
                    }
                }
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$primary() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1179:3
        // NonTerminal atom at cc21/mdx.jj:1179:3
        pushOntoLookaheadStack("primary", "cc21/mdx.jj", 1179, 3);
        boolean prevScanToEnd1752= scanToEnd;
        currentLookaheadProduction= "atom";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$atom()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1752;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1180:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1753= currentLookaheadToken;
            if (!check$mdx_jj$1181$5()) {
                currentLookaheadToken= token1753;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1183:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$segmentOrFuncall() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1194:3
        // NonTerminal parseIdentifier at cc21/mdx.jj:1194:3
        pushOntoLookaheadStack("segmentOrFuncall", "cc21/mdx.jj", 1194, 3);
        boolean prevScanToEnd1754= scanToEnd;
        currentLookaheadProduction= "parseIdentifier";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$parseIdentifier()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1754;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrOne specified at cc21/mdx.jj:1195:3
        Token token1755= currentLookaheadToken;
        if (!check$mdx_jj$1196$5()) {
            currentLookaheadToken= token1755;
            hitFailure= false;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1207:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$atom() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1237:3
        Token token1756= currentLookaheadToken;
        int remainingLookahead1756= remainingLookahead;
        boolean hitFailure1756= hitFailure;
        if (!scanToken(SINGLE_QUOTED_STRING)) {
            currentLookaheadToken= token1756;
            remainingLookahead= remainingLookahead1756;
            hitFailure= hitFailure1756;
            if (!scanToken(DOUBLE_QUOTED_STRING)) {
                currentLookaheadToken= token1756;
                remainingLookahead= remainingLookahead1756;
                hitFailure= hitFailure1756;
                if (!scanToken(first_set$mdx_jj$1245$3)) {
                    currentLookaheadToken= token1756;
                    remainingLookahead= remainingLookahead1756;
                    hitFailure= hitFailure1756;
                    if (!scanToken(NULL)) {
                        currentLookaheadToken= token1756;
                        remainingLookahead= remainingLookahead1756;
                        hitFailure= hitFailure1756;
                        if (!check$mdx_jj$1253$3()) {
                            currentLookaheadToken= token1756;
                            remainingLookahead= remainingLookahead1756;
                            hitFailure= hitFailure1756;
                            if (!check$mdx_jj$1263$3()) {
                                currentLookaheadToken= token1756;
                                remainingLookahead= remainingLookahead1756;
                                hitFailure= hitFailure1756;
                                if (!check$mdx_jj$1272$3()) {
                                    currentLookaheadToken= token1756;
                                    remainingLookahead= remainingLookahead1756;
                                    hitFailure= hitFailure1756;
                                    if (!check$mdx_jj$1286$3()) {
                                        currentLookaheadToken= token1756;
                                        remainingLookahead= remainingLookahead1756;
                                        hitFailure= hitFailure1756;
                                        if (!check$mdx_jj$1293$3()) {
                                            currentLookaheadToken= token1756;
                                            remainingLookahead= remainingLookahead1756;
                                            hitFailure= hitFailure1756;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$caseExpression() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1331:3
        if (!scanToken(CASE)) return false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrOne specified at cc21/mdx.jj:1332:3
        Token token1757= currentLookaheadToken;
        if (!check$mdx_jj$1333$5()) {
            currentLookaheadToken= token1757;
            hitFailure= false;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1339:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1758= currentLookaheadToken;
            if (!check$mdx_jj$1340$5()) {
                currentLookaheadToken= token1758;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrOne specified at cc21/mdx.jj:1346:3
        Token token1759= currentLookaheadToken;
        if (!check$mdx_jj$1347$5()) {
            currentLookaheadToken= token1759;
            hitFailure= false;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1352:3
        if (!scanToken(END)) return false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1353:3
        return true;
    }

    ArrayList<NonTerminalCall> parsingStack= new ArrayList<> ();
    private ArrayList<NonTerminalCall> lookaheadStack= new ArrayList<> ();
    /**
 * Inner class that represents entering a grammar production
 */
    class NonTerminalCall {
        final String sourceFile;
        final String productionName;
        final int line, column;
        NonTerminalCall(String sourceFile, String productionName, int line, int column) {
            this.sourceFile= sourceFile;
            this.productionName= productionName;
            this.line= line;
            this.column= column;
        }

        final mdxLexer getTokenSource() {
            return MDXParser.this.token_source;
        }

        StackTraceElement createStackTraceElement() {
            return new StackTraceElement("MDXParser", productionName, sourceFile, line);
        }

        void dump(PrintStream ps) {
            ps.println(productionName+":"+line+":"+column);
        }

    }
    private final void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popCallStack() {
        NonTerminalCall ntc= parsingStack.remove(parsingStack.size()-1);
        this.currentlyParsedProduction= ntc.productionName;
    }

    private final void restoreCallStack(int prevSize) {
        while (parsingStack.size()> prevSize) {
            popCallStack();
        }
    }

    private final void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popLookaheadStack() {
        NonTerminalCall ntc= lookaheadStack.remove(lookaheadStack.size()-1);
        this.currentLookaheadProduction= ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: "+currentlyParsedProduction);
        ps.println("Current Lookahead Production is: "+currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token oldToken= lastConsumedToken;
        Token nextToken= nextToken(lastConsumedToken);
        if (nextToken.getType()!=expectedType) {
            nextToken= handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken= nextToken;
        this.nextTokenType= null;
        if (buildTree&&tokensAreNodes) {
            pushNode(lastConsumedToken);
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(this, nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private class ParseState {
        Token lastConsumed;
        ArrayList<NonTerminalCall> parsingStack;
        LexicalState lexicalState;
        NodeScope nodeScope;
        ParseState() {
            this.lastConsumed= MDXParser.this.lastConsumedToken;
            @SuppressWarnings("unchecked")
            ArrayList<NonTerminalCall> parsingStack= (ArrayList<NonTerminalCall> ) MDXParser.this.parsingStack.clone();
            this.parsingStack= parsingStack;
            this.lexicalState= token_source.lexicalState;
            this.nodeScope= (NodeScope) currentNodeScope.clone();
        }

    }
    private boolean buildTree= true;
    private boolean tokensAreNodes= true;
    private boolean unparsedTokensAreNodes= false;
    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes= unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes= tokensAreNodes;
    }

    NodeScope currentNodeScope= new NodeScope();
    /** 
         * @return the root node of the AST. It only makes sense to call
         * this after a successful parse. 
         */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
     * push a node onto the top of the node stack
     * @param n the node to push
     */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /** 
     * @return the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /** 
     * @return the node currently on the top of the tree-building stack. 
     */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     * @param n the node to poke
     */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /** 
     * @return the number of Nodes on the tree-building stack in the current node
         * scope. 
         */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n!=null) {
            Token next= nextToken(lastConsumedToken);
            n.setTokenSource(lastConsumedToken.getTokenSource());
            n.setBeginOffset(next.getBeginOffset());
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
         * children.  That number of nodes are popped from the stack and
         * made the children of the definite node.  Then the definite node
         * is pushed on to the stack.
         */
    private void closeNodeScope(Node n, int num) {
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes= new ArrayList<Node> ();
        for (int i= 0; i<num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            // FIXME deal with the UNPARSED_TOKENS_ARE_NODES case
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
         * A conditional node is constructed if the condition is true.  All
         * the nodes that have been pushed since the node was opened are
         * made children of the conditional node, which is then pushed
         * on to the stack.  If the condition is false the node is not
         * constructed and they are left on the stack. 
         */
    private void closeNodeScope(Node n, boolean condition) {
        if (n!=null&&condition) {
            n.setEndOffset(lastConsumedToken.getEndOffset());
            int a= nodeArity();
            currentNodeScope.close();
            ArrayList<Node> nodes= new ArrayList<Node> ();
            while (a--> 0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (unparsedTokensAreNodes&&child instanceof Token) {
                    Token tok= (Token) child;
                    while (tok.previousCachedToken()!=null&&tok.previousCachedToken().isUnparsed()) {
                        tok= tok.previousCachedToken();
                    }
                    while (tok.isUnparsed()) {
                        n.addChild(tok);
                        tok= tok.nextCachedToken();
                    }
                }
                n.addChild(child);
            }
            n.close();
            pushNode(n);
        }
        else  {
            currentNodeScope.close();
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree= buildTree;
    }

    /**
     * Just a kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    MDXParser jjtree= this;
    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node>  {
        NodeScope parentScope;
        NodeScope() {
            this.parentScope= MDXParser.this.currentNodeScope;
            MDXParser.this.currentNodeScope= this;
        }

        boolean isRootScope() {
            return parentScope== null;
        }

        Node rootNode() {
            NodeScope ns= this;
            while (ns.parentScope!=null) {
                ns= ns.parentScope;
            }
            return ns.isEmpty()?null:
            ns.get(0);
        }

        Node peek() {
            return isEmpty()?parentScope.peek():
            get(size()-1);
        }

        Node pop() {
            return isEmpty()?parentScope.pop():
            remove(size()-1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            }
            else  {
                set(size()-1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            MDXParser.this.currentNodeScope= parentScope;
        }

        int nestingLevel() {
            int result= 0;
            NodeScope parent= this;
            while (parent.parentScope!=null) {
                result++;
                parent= parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone= (NodeScope) super.clone();
            if (parentScope!=null) {
                clone.parentScope= (NodeScope) parentScope.clone();
            }
            return clone;
        }

    }
}
