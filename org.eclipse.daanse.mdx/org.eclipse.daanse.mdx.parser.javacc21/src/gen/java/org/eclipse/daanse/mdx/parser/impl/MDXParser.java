/* Generated by: JavaCC 21 Parser Generator. MDXParser.java */
package org.eclipse.daanse.mdx.parser.impl;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Map;
import java.util.concurrent.CancellationException;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTDrillthroughStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTReturnItems;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTReturnItem;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTIdentifier;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTNumericLiteral;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTSelectWithClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTSelectStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTSelectSlicerAxisClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTSelectCellPropertyListClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTCreateMemberBodyClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTMemberPropertyDefinition;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTFormulaExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTValueExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTValueExpressionXOR;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTValueExpressionOR;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTTerm5;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTTerm4;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTTerm3;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTCompOperator;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTTerm2;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTTerm;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTFactor;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTFunction;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTValueExpressionPrimary;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTValueExpressionPrimary0;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTExpressions;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTCaseExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTWhenClauses;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTWhenClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTCellProperty;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTCreateSetBodyClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTSelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTIntegerExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTSelectQueryAxisClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTSelectSubcubeClause;
import static org.eclipse.daanse.mdx.parser.impl.mdxConstants.TokenType.*;
@SuppressWarnings("unused")
public class MDXParser implements mdxConstants {
    static final int UNLIMITED= Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private String currentlyParsedProduction, currentLookaheadProduction;
    private boolean cancelled;
    public void cancel() {
        cancelled= true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public mdxLexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public MDXParser(String inputSource, CharSequence content) {
        this(new mdxLexer(inputSource, content));
    }

    public MDXParser(CharSequence content) {
        this("input", content);
    }

    /**
   * @param inputSource just the name of the input source (typically the filename) that 
   * will be used in error messages and so on.
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public MDXParser(String inputSource, Path path) throws IOException {
        this(inputSource, mdxLexer.stringFromBytes(Files.readAllBytes(path)));
    }

    public MDXParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, mdxLexer.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public MDXParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public MDXParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public MDXParser(Reader reader) {
        this(new mdxLexer("input", reader));
    }

    /** Constructor with user supplied Lexer. */
    public MDXParser(mdxLexer lexer) {
        token_source= lexer;
        lastConsumedToken= lexer.DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    final private Token nextToken(final Token tok) {
        Token result= token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result= token_source.getNextToken(result);
        }
        nextTokenType= null;
        return result;
    }

    /**
   * @return the next Token off the stream. This is the same as #getToken(1)
   */
    final public Token getNextToken() {
        return getToken(1);
    }

    /**
 * @param index how many tokens to look ahead
 * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream. 
 * If we are in a lookahead, it looks ahead from the currentLookaheadToken
 * Otherwise, it is the lastConsumedToken. If you pass in a negative
 * number it goes backward.
 */
    final public Token getToken(final int index) {
        Token t= currentLookaheadToken== null?lastConsumedToken:
        currentLookaheadToken;
        for (int i= 0; i<index; i++) {
            t= nextToken(t);
        }
        for (int i= 0; i> index; i--) {
            t= t.getPrevious();
            if (t== null) break;
        }
        return t;
    }

    private final TokenType nextTokenType() {
        if (nextTokenType== null) {
            nextTokenType= nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.add(tt);
        }
        token_source.reset(getToken(0));
        nextTokenType= null;
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.remove(tt);
        }
        token_source.reset(getToken(0));
        nextTokenType= null;
        return result;
    }

    private static HashMap<TokenType[], EnumSet<TokenType> > enumSetCache= new HashMap<> ();
    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key= new TokenType[1+rest.length];
        key[0]= first;
        if (rest.length> 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result= (rest.length== 0)?EnumSet.of(first):
        EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    //=================================
    // Start of methods for BNF Productions
    //This code is generated by the ParserProductions.java.ftl template. 
    //=================================
    static private final EnumSet<TokenType> Statement_FIRST_SET= tokenTypeSet(DRILLTHROUGH, SELECT, WITH);
    // cc21/mdx.javacc:278:1
    final public void Statement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Statement";
        // Code for ExpansionChoice specified at cc21/mdx.javacc:279:9
        ASTStatement Statement1= null;
        if (buildTree) {
            Statement1= new ASTStatement();
            openNodeScope(Statement1);
        }
        ParseException parseException1= null;
        int callStackSize2= parsingStack.size();
        try {
            if (nextTokenType()== SELECT||nextTokenType== WITH) {
                // Code for NonTerminal specified at cc21/mdx.javacc:279:9
                pushOntoCallStack("Statement", "cc21/mdx.javacc", 279, 9);
                try {
                    SelectStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== DRILLTHROUGH) {
                // Code for NonTerminal specified at cc21/mdx.javacc:281:9
                pushOntoCallStack("Statement", "cc21/mdx.javacc", 281, 9);
                try {
                    DrillthroughStatement();
                }
                finally {
                    popCallStack();
                }
                // Code for EndOfFile specified at cc21/mdx.javacc:292:9
                consumeToken(EOF);
            }
            else  {
                pushOntoCallStack("Statement", "cc21/mdx.javacc", 279, 9);
                throw new ParseException(this, Statement_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2);
            if (Statement1!=null) {
                if (parseException1== null) {
                    closeNodeScope(Statement1, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:295:1
    final public void DrillthroughStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "DrillthroughStatement";
        ASTDrillthroughStatement DrillthroughStatement2= null;
        if (buildTree) {
            DrillthroughStatement2= new ASTDrillthroughStatement();
            openNodeScope(DrillthroughStatement2);
        }
        ParseException parseException19= null;
        int callStackSize20= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.javacc:296:3
            consumeToken(DRILLTHROUGH);
            // Code for ZeroOrOne specified at cc21/mdx.javacc:297:3
            if (nextTokenType()== MAXROWS) {
                // Code for RegexpRef specified at cc21/mdx.javacc:297:5
                consumeToken(MAXROWS);
                // Code for RegexpRef specified at cc21/mdx.javacc:297:15
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for ZeroOrOne specified at cc21/mdx.javacc:298:3
            if (nextTokenType()== FIRSTROWSET) {
                // Code for RegexpRef specified at cc21/mdx.javacc:298:5
                consumeToken(FIRSTROWSET);
                // Code for RegexpRef specified at cc21/mdx.javacc:298:19
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for NonTerminal specified at cc21/mdx.javacc:299:3
            pushOntoCallStack("DrillthroughStatement", "cc21/mdx.javacc", 299, 3);
            try {
                SelectStatement();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.javacc:300:3
            if (nextTokenType()== RETURN) {
                // Code for RegexpRef specified at cc21/mdx.javacc:300:5
                consumeToken(RETURN);
                // Code for NonTerminal specified at cc21/mdx.javacc:300:14
                pushOntoCallStack("DrillthroughStatement", "cc21/mdx.javacc", 300, 14);
                try {
                    ReturnItems();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException19= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize20);
            if (DrillthroughStatement2!=null) {
                if (parseException19== null) {
                    closeNodeScope(DrillthroughStatement2, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:303:1
    final public void ReturnItems() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ReturnItems";
        ASTReturnItems ReturnItems3= null;
        if (buildTree) {
            ReturnItems3= new ASTReturnItems();
            openNodeScope(ReturnItems3);
        }
        ParseException parseException64= null;
        int callStackSize65= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:304:9
            pushOntoCallStack("ReturnItems", "cc21/mdx.javacc", 304, 9);
            try {
                ReturnItem();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:304:20
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.javacc:304:21
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.javacc:304:29
                pushOntoCallStack("ReturnItems", "cc21/mdx.javacc", 304, 29);
                try {
                    ReturnItem();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException64= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize65);
            if (ReturnItems3!=null) {
                if (parseException64== null) {
                    closeNodeScope(ReturnItems3, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:306:1
    final public void ReturnItem() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ReturnItem";
        ASTReturnItem ReturnItem4= null;
        if (buildTree) {
            ReturnItem4= new ASTReturnItem();
            openNodeScope(ReturnItem4);
        }
        ParseException parseException82= null;
        int callStackSize83= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:307:4
            pushOntoCallStack("ReturnItem", "cc21/mdx.javacc", 307, 4);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException82= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize83);
            if (ReturnItem4!=null) {
                if (parseException82== null) {
                    closeNodeScope(ReturnItem4, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:309:1
    final public void Identifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Identifier";
        ASTIdentifier Identifier5= null;
        if (buildTree) {
            Identifier5= new ASTIdentifier();
            openNodeScope(Identifier5);
        }
        ParseException parseException88= null;
        int callStackSize89= parsingStack.size();
        try {
            if (nextTokenType()== AMP_UNQUOTED_ID) {
                // Code for RegexpRef specified at cc21/mdx.javacc:310:3
                consumeToken(AMP_UNQUOTED_ID);
            }
            else if (nextTokenType()== QUOTED_ID) {
                // Code for RegexpRef specified at cc21/mdx.javacc:310:23
                consumeToken(QUOTED_ID);
            }
            else  {
                pushOntoCallStack("Identifier", "cc21/mdx.javacc", 310, 3);
                throw new ParseException(this, first_set$mdx_javacc$310$3, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException88= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize89);
            if (Identifier5!=null) {
                if (parseException88== null) {
                    closeNodeScope(Identifier5, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> NumericLiteral_FIRST_SET= tokenTypeSet(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);
    // cc21/mdx.javacc:312:1
    final public void NumericLiteral() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "NumericLiteral";
        // Code for ExpansionChoice specified at cc21/mdx.javacc:313:3
        ASTNumericLiteral NumericLiteral6= null;
        if (buildTree) {
            NumericLiteral6= new ASTNumericLiteral();
            openNodeScope(NumericLiteral6);
        }
        ParseException parseException107= null;
        int callStackSize108= parsingStack.size();
        try {
            if (nextTokenType()== DECIMAL_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.javacc:313:3
                consumeToken(DECIMAL_NUMERIC_LITERAL);
            }
            else if (nextTokenType()== UNSIGNED_INTEGER_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.javacc:314:5
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            else if (nextTokenType()== APPROX_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.javacc:315:5
                consumeToken(APPROX_NUMERIC_LITERAL);
            }
            else  {
                pushOntoCallStack("NumericLiteral", "cc21/mdx.javacc", 313, 3);
                throw new ParseException(this, NumericLiteral_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException107= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize108);
            if (NumericLiteral6!=null) {
                if (parseException107== null) {
                    closeNodeScope(NumericLiteral6, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> SelectWithClause_FIRST_SET= tokenTypeSet(MEMBER, SET, CALCULATED);
    // cc21/mdx.javacc:325:1
    final public void SelectWithClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SelectWithClause";
        // Code for ExpansionChoice specified at cc21/mdx.javacc:327:3
        ASTSelectWithClause SelectWithClause7= null;
        if (buildTree) {
            SelectWithClause7= new ASTSelectWithClause();
            openNodeScope(SelectWithClause7);
        }
        ParseException parseException128= null;
        int callStackSize129= parsingStack.size();
        try {
            if (nextTokenType()== MEMBER||nextTokenType== CALCULATED) {
                // Code for ZeroOrOne specified at cc21/mdx.javacc:327:3
                if (nextTokenType()== CALCULATED) {
                    // Code for RegexpStringLiteral specified at cc21/mdx.javacc:327:4
                    consumeToken(CALCULATED);
                }
                // Code for RegexpRef specified at cc21/mdx.javacc:327:19
                consumeToken(MEMBER);
                // Code for NonTerminal specified at cc21/mdx.javacc:327:28
                pushOntoCallStack("SelectWithClause", "cc21/mdx.javacc", 327, 28);
                try {
                    CreateMemberBodyClause();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== SET) {
                // Code for RegexpRef specified at cc21/mdx.javacc:328:5
                consumeToken(SET);
                // Code for NonTerminal specified at cc21/mdx.javacc:328:11
                pushOntoCallStack("SelectWithClause", "cc21/mdx.javacc", 328, 11);
                try {
                    CreateSetBodyClause();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("SelectWithClause", "cc21/mdx.javacc", 327, 3);
                throw new ParseException(this, SelectWithClause_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException128= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize129);
            if (SelectWithClause7!=null) {
                if (parseException128== null) {
                    closeNodeScope(SelectWithClause7, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:333:1
    final public void SelectStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SelectStatement";
        ASTSelectStatement SelectStatement8= null;
        if (buildTree) {
            SelectStatement8= new ASTSelectStatement();
            openNodeScope(SelectStatement8);
        }
        ParseException parseException158= null;
        int callStackSize159= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.javacc:334:3
            if (nextTokenType()== WITH) {
                // Code for RegexpRef specified at cc21/mdx.javacc:334:5
                consumeToken(WITH);
                // Code for OneOrMore specified at cc21/mdx.javacc:334:12
                while (true) {
                    // Code for NonTerminal specified at cc21/mdx.javacc:334:14
                    pushOntoCallStack("SelectStatement", "cc21/mdx.javacc", 334, 14);
                    try {
                        SelectWithClause();
                    }
                    finally {
                        popCallStack();
                    }
                    if (!(nextTokenType()== MEMBER||nextTokenType== SET||nextTokenType== CALCULATED)) break;
                }
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:335:3
            consumeToken(SELECT);
            if (nextTokenType()== ASTERISK) {
                // Code for RegexpRef specified at cc21/mdx.javacc:337:7
                consumeToken(ASTERISK);
            }
            else if (first_set$mdx_javacc$339$7.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.javacc:339:7
                pushOntoCallStack("SelectStatement", "cc21/mdx.javacc", 339, 7);
                try {
                    SelectQueryAxisClause();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at cc21/mdx.javacc:339:29
                while (true) {
                    if (!(nextTokenType()== COMMA)) break;
                    // Code for RegexpRef specified at cc21/mdx.javacc:339:30
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at cc21/mdx.javacc:339:38
                    pushOntoCallStack("SelectStatement", "cc21/mdx.javacc", 339, 38);
                    try {
                        SelectQueryAxisClause();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            else  {
                pushOntoCallStack("SelectStatement", "cc21/mdx.javacc", 337, 7);
                throw new ParseException(this, first_set$mdx_javacc$337$7, parsingStack);
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:341:3
            consumeToken(FROM);
            // Code for NonTerminal specified at cc21/mdx.javacc:341:10
            pushOntoCallStack("SelectStatement", "cc21/mdx.javacc", 341, 10);
            try {
                SelectSubcubeClause();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.javacc:342:5
            if (nextTokenType()== WHERE) {
                // Code for NonTerminal specified at cc21/mdx.javacc:343:7
                pushOntoCallStack("SelectStatement", "cc21/mdx.javacc", 343, 7);
                try {
                    SelectSlicerAxisClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at cc21/mdx.javacc:345:5
            if (nextTokenType()== CELL||nextTokenType== PROPERTIES) {
                // Code for NonTerminal specified at cc21/mdx.javacc:346:7
                pushOntoCallStack("SelectStatement", "cc21/mdx.javacc", 346, 7);
                try {
                    SelectCellPropertyListClause();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException158= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize159);
            if (SelectStatement8!=null) {
                if (parseException158== null) {
                    closeNodeScope(SelectStatement8, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:350:1
    final public void SelectSlicerAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SelectSlicerAxisClause";
        ASTSelectSlicerAxisClause SelectSlicerAxisClause9= null;
        if (buildTree) {
            SelectSlicerAxisClause9= new ASTSelectSlicerAxisClause();
            openNodeScope(SelectSlicerAxisClause9);
        }
        ParseException parseException234= null;
        int callStackSize235= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.javacc:351:3
            consumeToken(WHERE);
            // Code for NonTerminal specified at cc21/mdx.javacc:351:11
            pushOntoCallStack("SelectSlicerAxisClause", "cc21/mdx.javacc", 351, 11);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException234= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize235);
            if (SelectSlicerAxisClause9!=null) {
                if (parseException234== null) {
                    closeNodeScope(SelectSlicerAxisClause9, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:354:1
    final public void SelectCellPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SelectCellPropertyListClause";
        ASTSelectCellPropertyListClause SelectCellPropertyListClause10= null;
        if (buildTree) {
            SelectCellPropertyListClause10= new ASTSelectCellPropertyListClause();
            openNodeScope(SelectCellPropertyListClause10);
        }
        ParseException parseException243= null;
        int callStackSize244= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.javacc:355:3
            if (nextTokenType()== CELL) {
                // Code for RegexpRef specified at cc21/mdx.javacc:355:4
                consumeToken(CELL);
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:355:13
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at cc21/mdx.javacc:355:26
            pushOntoCallStack("SelectCellPropertyListClause", "cc21/mdx.javacc", 355, 26);
            try {
                CellProperty();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:355:39
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.javacc:355:41
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.javacc:355:49
                pushOntoCallStack("SelectCellPropertyListClause", "cc21/mdx.javacc", 355, 49);
                try {
                    CellProperty();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException243= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize244);
            if (SelectCellPropertyListClause10!=null) {
                if (parseException243== null) {
                    closeNodeScope(SelectCellPropertyListClause10, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:359:1
    final public void CreateMemberBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "CreateMemberBodyClause";
        ASTCreateMemberBodyClause CreateMemberBodyClause11= null;
        if (buildTree) {
            CreateMemberBodyClause11= new ASTCreateMemberBodyClause();
            openNodeScope(CreateMemberBodyClause11);
        }
        ParseException parseException273= null;
        int callStackSize274= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:360:3
            pushOntoCallStack("CreateMemberBodyClause", "cc21/mdx.javacc", 360, 3);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:360:14
            consumeToken(AS);
            // Code for NonTerminal specified at cc21/mdx.javacc:360:19
            pushOntoCallStack("CreateMemberBodyClause", "cc21/mdx.javacc", 360, 19);
            try {
                FormulaExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:360:37
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.javacc:360:38
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.javacc:360:46
                pushOntoCallStack("CreateMemberBodyClause", "cc21/mdx.javacc", 360, 46);
                try {
                    MemberPropertyDefinition();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException273= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize274);
            if (CreateMemberBodyClause11!=null) {
                if (parseException273== null) {
                    closeNodeScope(CreateMemberBodyClause11, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:362:1
    final public void MemberPropertyDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MemberPropertyDefinition";
        ASTMemberPropertyDefinition MemberPropertyDefinition12= null;
        if (buildTree) {
            MemberPropertyDefinition12= new ASTMemberPropertyDefinition();
            openNodeScope(MemberPropertyDefinition12);
        }
        ParseException parseException297= null;
        int callStackSize298= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:363:3
            pushOntoCallStack("MemberPropertyDefinition", "cc21/mdx.javacc", 363, 3);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:363:14
            consumeToken(EQ);
            // Code for NonTerminal specified at cc21/mdx.javacc:363:19
            pushOntoCallStack("MemberPropertyDefinition", "cc21/mdx.javacc", 363, 19);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException297= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize298);
            if (MemberPropertyDefinition12!=null) {
                if (parseException297== null) {
                    closeNodeScope(MemberPropertyDefinition12, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:365:1
    final public void FormulaExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "FormulaExpression";
        ASTFormulaExpression FormulaExpression13= null;
        if (buildTree) {
            FormulaExpression13= new ASTFormulaExpression();
            openNodeScope(FormulaExpression13);
        }
        ParseException parseException309= null;
        int callStackSize310= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:366:4
            pushOntoCallStack("FormulaExpression", "cc21/mdx.javacc", 366, 4);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:366:15
            consumeToken(EQ);
            // Code for NonTerminal specified at cc21/mdx.javacc:366:20
            pushOntoCallStack("FormulaExpression", "cc21/mdx.javacc", 366, 20);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException309= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize310);
            if (FormulaExpression13!=null) {
                if (parseException309== null) {
                    closeNodeScope(FormulaExpression13, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:368:1
    final public void Expression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Expression";
        ASTExpression Expression14= null;
        if (buildTree) {
            Expression14= new ASTExpression();
            openNodeScope(Expression14);
        }
        ParseException parseException321= null;
        int callStackSize322= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:369:3
            pushOntoCallStack("Expression", "cc21/mdx.javacc", 369, 3);
            try {
                ValueExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:369:19
            while (true) {
                if (!(nextTokenType()== COLON)) break;
                // Code for RegexpRef specified at cc21/mdx.javacc:369:20
                consumeToken(COLON);
                // Code for NonTerminal specified at cc21/mdx.javacc:369:28
                pushOntoCallStack("Expression", "cc21/mdx.javacc", 369, 28);
                try {
                    ValueExpression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException321= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize322);
            if (Expression14!=null) {
                if (parseException321== null) {
                    closeNodeScope(Expression14, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:371:1
    final public void ValueExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ValueExpression";
        ASTValueExpression ValueExpression15= null;
        if (buildTree) {
            ValueExpression15= new ASTValueExpression();
            openNodeScope(ValueExpression15);
        }
        ParseException parseException339= null;
        int callStackSize340= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:372:3
            pushOntoCallStack("ValueExpression", "cc21/mdx.javacc", 372, 3);
            try {
                Term5();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:372:9
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.javacc:372:10
                if (nextTokenType()== XOR) {
                    // Code for NonTerminal specified at cc21/mdx.javacc:372:10
                    pushOntoCallStack("ValueExpression", "cc21/mdx.javacc", 372, 10);
                    try {
                        ValueExpressionXOR();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else if (nextTokenType()== OR) {
                    // Code for NonTerminal specified at cc21/mdx.javacc:372:31
                    pushOntoCallStack("ValueExpression", "cc21/mdx.javacc", 372, 31);
                    try {
                        ValueExpressionOR();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else  {
                    break;
                }
            }
        }
        catch(ParseException e) {
            parseException339= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize340);
            if (ValueExpression15!=null) {
                if (parseException339== null) {
                    closeNodeScope(ValueExpression15, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:375:1
    final public void ValueExpressionXOR() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ValueExpressionXOR";
        ASTValueExpressionXOR ValueExpressionXOR16= null;
        if (buildTree) {
            ValueExpressionXOR16= new ASTValueExpressionXOR();
            openNodeScope(ValueExpressionXOR16);
        }
        ParseException parseException363= null;
        int callStackSize364= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.javacc:376:3
            consumeToken(XOR);
            // Code for NonTerminal specified at cc21/mdx.javacc:376:9
            pushOntoCallStack("ValueExpressionXOR", "cc21/mdx.javacc", 376, 9);
            try {
                Term5();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException363= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize364);
            if (ValueExpressionXOR16!=null) {
                if (parseException363== null) {
                    closeNodeScope(ValueExpressionXOR16, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:379:1
    final public void ValueExpressionOR() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ValueExpressionOR";
        ASTValueExpressionOR ValueExpressionOR17= null;
        if (buildTree) {
            ValueExpressionOR17= new ASTValueExpressionOR();
            openNodeScope(ValueExpressionOR17);
        }
        ParseException parseException372= null;
        int callStackSize373= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.javacc:380:3
            consumeToken(OR);
            // Code for NonTerminal specified at cc21/mdx.javacc:380:8
            pushOntoCallStack("ValueExpressionOR", "cc21/mdx.javacc", 380, 8);
            try {
                Term5();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException372= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize373);
            if (ValueExpressionOR17!=null) {
                if (parseException372== null) {
                    closeNodeScope(ValueExpressionOR17, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:383:1
    final public void Term5() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Term5";
        ASTTerm5 Term518= null;
        if (buildTree) {
            Term518= new ASTTerm5();
            openNodeScope(Term518);
        }
        ParseException parseException381= null;
        int callStackSize382= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:384:3
            pushOntoCallStack("Term5", "cc21/mdx.javacc", 384, 3);
            try {
                Term4();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:384:9
            while (true) {
                if (!(nextTokenType()== AND)) break;
                // Code for RegexpRef specified at cc21/mdx.javacc:384:10
                consumeToken(AND);
                // Code for NonTerminal specified at cc21/mdx.javacc:384:16
                pushOntoCallStack("Term5", "cc21/mdx.javacc", 384, 16);
                try {
                    Term4();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException381= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize382);
            if (Term518!=null) {
                if (parseException381== null) {
                    closeNodeScope(Term518, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> Term4_FIRST_SET= Term4_FIRST_SET_init();
    static private EnumSet<TokenType> Term4_FIRST_SET_init() {
        return tokenTypeSet(CASE, NOT, LPAREN, LBRACE, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    // cc21/mdx.javacc:387:1
    final public void Term4() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Term4";
        // Code for ExpansionChoice specified at cc21/mdx.javacc:388:3
        ASTTerm4 Term419= null;
        if (buildTree) {
            Term419= new ASTTerm4();
            openNodeScope(Term419);
        }
        ParseException parseException399= null;
        int callStackSize400= parsingStack.size();
        try {
            if (nextTokenType()== NOT) {
                // Code for RegexpRef specified at cc21/mdx.javacc:388:3
                consumeToken(NOT);
                // Code for NonTerminal specified at cc21/mdx.javacc:388:9
                pushOntoCallStack("Term4", "cc21/mdx.javacc", 388, 9);
                try {
                    Term4();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$mdx_javacc$388$17.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.javacc:388:17
                pushOntoCallStack("Term4", "cc21/mdx.javacc", 388, 17);
                try {
                    Term3();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("Term4", "cc21/mdx.javacc", 388, 3);
                throw new ParseException(this, Term4_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException399= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize400);
            if (Term419!=null) {
                if (parseException399== null) {
                    closeNodeScope(Term419, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:391:1
    final public void Term3() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Term3";
        ASTTerm3 Term320= null;
        if (buildTree) {
            Term320= new ASTTerm3();
            openNodeScope(Term320);
        }
        ParseException parseException417= null;
        int callStackSize418= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:392:3
            pushOntoCallStack("Term3", "cc21/mdx.javacc", 392, 3);
            try {
                Term2();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:392:9
            while (true) {
                if (!(first_set$mdx_javacc$392$10.contains(nextTokenType()))) break;
                // Code for NonTerminal specified at cc21/mdx.javacc:392:10
                pushOntoCallStack("Term3", "cc21/mdx.javacc", 392, 10);
                try {
                    CompOperator();
                }
                finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at cc21/mdx.javacc:392:23
                pushOntoCallStack("Term3", "cc21/mdx.javacc", 392, 23);
                try {
                    Term2();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException417= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize418);
            if (Term320!=null) {
                if (parseException417== null) {
                    closeNodeScope(Term320, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> CompOperator_FIRST_SET= tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    // cc21/mdx.javacc:396:1
    final public void CompOperator() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "CompOperator";
        // Code for ExpansionChoice specified at cc21/mdx.javacc:397:3
        ASTCompOperator CompOperator21= null;
        if (buildTree) {
            CompOperator21= new ASTCompOperator();
            openNodeScope(CompOperator21);
        }
        ParseException parseException435= null;
        int callStackSize436= parsingStack.size();
        try {
            if (nextTokenType()== EQ) {
                // Code for RegexpRef specified at cc21/mdx.javacc:397:3
                consumeToken(EQ);
            }
            else if (nextTokenType()== NE) {
                // Code for RegexpRef specified at cc21/mdx.javacc:398:5
                consumeToken(NE);
            }
            else if (nextTokenType()== LT) {
                // Code for RegexpRef specified at cc21/mdx.javacc:399:5
                consumeToken(LT);
            }
            else if (nextTokenType()== GT) {
                // Code for RegexpRef specified at cc21/mdx.javacc:400:5
                consumeToken(GT);
            }
            else if (nextTokenType()== LE) {
                // Code for RegexpRef specified at cc21/mdx.javacc:401:5
                consumeToken(LE);
            }
            else if (nextTokenType()== GE) {
                // Code for RegexpRef specified at cc21/mdx.javacc:402:5
                consumeToken(GE);
            }
            else  {
                pushOntoCallStack("CompOperator", "cc21/mdx.javacc", 397, 3);
                throw new ParseException(this, CompOperator_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException435= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize436);
            if (CompOperator21!=null) {
                if (parseException435== null) {
                    closeNodeScope(CompOperator21, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:406:1
    final public void Term2() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Term2";
        ASTTerm2 Term222= null;
        if (buildTree) {
            Term222= new ASTTerm2();
            openNodeScope(Term222);
        }
        ParseException parseException474= null;
        int callStackSize475= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:407:3
            pushOntoCallStack("Term2", "cc21/mdx.javacc", 407, 3);
            try {
                Term();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:407:8
            while (true) {
                if (!(nextTokenType()== CONCAT||nextTokenType== MINUS||nextTokenType== PLUS)) break;
                if (nextTokenType()== CONCAT) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:407:10
                    consumeToken(CONCAT);
                }
                else if (nextTokenType()== PLUS) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:407:21
                    consumeToken(PLUS);
                }
                else if (nextTokenType()== MINUS) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:407:30
                    consumeToken(MINUS);
                }
                else  {
                    pushOntoCallStack("Term2", "cc21/mdx.javacc", 407, 10);
                    throw new ParseException(this, first_set$mdx_javacc$407$10, parsingStack);
                }
                // Code for NonTerminal specified at cc21/mdx.javacc:407:39
                pushOntoCallStack("Term2", "cc21/mdx.javacc", 407, 39);
                try {
                    Term();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException474= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize475);
            if (Term222!=null) {
                if (parseException474== null) {
                    closeNodeScope(Term222, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:410:1
    final public void Term() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Term";
        ASTTerm Term23= null;
        if (buildTree) {
            Term23= new ASTTerm();
            openNodeScope(Term23);
        }
        ParseException parseException511= null;
        int callStackSize512= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:411:3
            pushOntoCallStack("Term", "cc21/mdx.javacc", 411, 3);
            try {
                Factor();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:411:10
            while (true) {
                if (!(nextTokenType()== ASTERISK||nextTokenType== SOLIDUS)) break;
                if (nextTokenType()== SOLIDUS) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:411:12
                    consumeToken(SOLIDUS);
                }
                else if (nextTokenType()== ASTERISK) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:411:24
                    consumeToken(ASTERISK);
                }
                else  {
                    pushOntoCallStack("Term", "cc21/mdx.javacc", 411, 12);
                    throw new ParseException(this, first_set$mdx_javacc$411$12, parsingStack);
                }
                // Code for NonTerminal specified at cc21/mdx.javacc:411:36
                pushOntoCallStack("Term", "cc21/mdx.javacc", 411, 36);
                try {
                    Factor();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException511= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize512);
            if (Term23!=null) {
                if (parseException511== null) {
                    closeNodeScope(Term23, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> Factor_FIRST_SET= Factor_FIRST_SET_init();
    static private EnumSet<TokenType> Factor_FIRST_SET_init() {
        return tokenTypeSet(CASE, LPAREN, LBRACE, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    // cc21/mdx.javacc:414:1
    final public void Factor() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Factor";
        // Code for ExpansionChoice specified at cc21/mdx.javacc:415:3
        ASTFactor Factor24= null;
        if (buildTree) {
            Factor24= new ASTFactor();
            openNodeScope(Factor24);
        }
        ParseException parseException542= null;
        int callStackSize543= parsingStack.size();
        try {
            if (nextTokenType()== MINUS) {
                // Code for RegexpRef specified at cc21/mdx.javacc:415:3
                consumeToken(MINUS);
                // Code for NonTerminal specified at cc21/mdx.javacc:415:11
                pushOntoCallStack("Factor", "cc21/mdx.javacc", 415, 11);
                try {
                    ValueExpressionPrimary();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== PLUS) {
                // Code for RegexpRef specified at cc21/mdx.javacc:416:5
                consumeToken(PLUS);
                // Code for NonTerminal specified at cc21/mdx.javacc:416:12
                pushOntoCallStack("Factor", "cc21/mdx.javacc", 416, 12);
                try {
                    ValueExpressionPrimary();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$mdx_javacc$417$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.javacc:417:5
                pushOntoCallStack("Factor", "cc21/mdx.javacc", 417, 5);
                try {
                    ValueExpressionPrimary();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("Factor", "cc21/mdx.javacc", 415, 3);
                throw new ParseException(this, Factor_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException542= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize543);
            if (Factor24!=null) {
                if (parseException542== null) {
                    closeNodeScope(Factor24, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:420:1
    final public void Function() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Function";
        ASTFunction Function25= null;
        if (buildTree) {
            Function25= new ASTFunction();
            openNodeScope(Function25);
        }
        ParseException parseException569= null;
        int callStackSize570= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.javacc:421:3
            consumeToken(ID);
            // Code for RegexpRef specified at cc21/mdx.javacc:421:8
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at cc21/mdx.javacc:421:17
            if (first_set$mdx_javacc$421$18.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.javacc:421:18
                pushOntoCallStack("Function", "cc21/mdx.javacc", 421, 18);
                try {
                    Expressions();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:421:32
            consumeToken(RPAREN);
        }
        catch(ParseException e) {
            parseException569= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize570);
            if (Function25!=null) {
                if (parseException569== null) {
                    closeNodeScope(Function25, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:424:1
    final public void ValueExpressionPrimary() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ValueExpressionPrimary";
        ASTValueExpressionPrimary ValueExpressionPrimary26= null;
        if (buildTree) {
            ValueExpressionPrimary26= new ASTValueExpressionPrimary();
            openNodeScope(ValueExpressionPrimary26);
        }
        ParseException parseException590= null;
        int callStackSize591= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:425:3
            pushOntoCallStack("ValueExpressionPrimary", "cc21/mdx.javacc", 425, 3);
            try {
                ValueExpressionPrimary0();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:425:27
            while (true) {
                if (!(nextTokenType()== DOT)) break;
                // Code for RegexpRef specified at cc21/mdx.javacc:425:28
                consumeToken(DOT);
                if (nextTokenType()== AMP_UNQUOTED_ID) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:425:35
                    consumeToken(AMP_UNQUOTED_ID);
                }
                else if (nextTokenType()== AMP_QUOTED_ID) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:425:54
                    consumeToken(AMP_QUOTED_ID);
                }
                else if (nextTokenType()== QUOTED_ID) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:425:72
                    consumeToken(QUOTED_ID);
                }
                else if (nextTokenType()== ID) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:425:86
                    consumeToken(ID);
                }
                else  {
                    pushOntoCallStack("ValueExpressionPrimary", "cc21/mdx.javacc", 425, 35);
                    throw new ParseException(this, first_set$mdx_javacc$425$35, parsingStack);
                }
            }
        }
        catch(ParseException e) {
            parseException590= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize591);
            if (ValueExpressionPrimary26!=null) {
                if (parseException590== null) {
                    closeNodeScope(ValueExpressionPrimary26, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> ValueExpressionPrimary0_FIRST_SET= ValueExpressionPrimary0_FIRST_SET_init();
    static private EnumSet<TokenType> ValueExpressionPrimary0_FIRST_SET_init() {
        return tokenTypeSet(CASE, LPAREN, LBRACE, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    // cc21/mdx.javacc:428:1
    final public void ValueExpressionPrimary0() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ValueExpressionPrimary0";
        // Code for ExpansionChoice specified at cc21/mdx.javacc:429:3
        ASTValueExpressionPrimary0 ValueExpressionPrimary027= null;
        if (buildTree) {
            ValueExpressionPrimary027= new ASTValueExpressionPrimary0();
            openNodeScope(ValueExpressionPrimary027);
        }
        ParseException parseException633= null;
        int callStackSize634= parsingStack.size();
        try {
            if (nextTokenType()== ID) {
                // Code for NonTerminal specified at cc21/mdx.javacc:429:3
                pushOntoCallStack("ValueExpressionPrimary0", "cc21/mdx.javacc", 429, 3);
                try {
                    Function();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpRef specified at cc21/mdx.javacc:430:6
                consumeToken(LPAREN);
                // Code for NonTerminal specified at cc21/mdx.javacc:430:15
                pushOntoCallStack("ValueExpressionPrimary0", "cc21/mdx.javacc", 430, 15);
                try {
                    Expressions();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.javacc:430:27
                consumeToken(RPAREN);
            }
            else if (nextTokenType()== LBRACE) {
                // Code for RegexpRef specified at cc21/mdx.javacc:431:6
                consumeToken(LBRACE);
                // Code for ZeroOrOne specified at cc21/mdx.javacc:431:15
                if (first_set$mdx_javacc$431$16.contains(nextTokenType())) {
                    // Code for NonTerminal specified at cc21/mdx.javacc:431:16
                    pushOntoCallStack("ValueExpressionPrimary0", "cc21/mdx.javacc", 431, 16);
                    try {
                        Expressions();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpRef specified at cc21/mdx.javacc:431:30
                consumeToken(RBRACE);
            }
            else if (nextTokenType()== CASE) {
                // Code for NonTerminal specified at cc21/mdx.javacc:432:5
                pushOntoCallStack("ValueExpressionPrimary0", "cc21/mdx.javacc", 432, 5);
                try {
                    CaseExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== STRING) {
                // Code for RegexpRef specified at cc21/mdx.javacc:433:5
                consumeToken(STRING);
            }
            else if (nextTokenType()== UNSIGNED_INTEGER_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.javacc:434:5
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            else if (nextTokenType()== QUOTED_ID||nextTokenType== AMP_UNQUOTED_ID) {
                // Code for NonTerminal specified at cc21/mdx.javacc:435:5
                pushOntoCallStack("ValueExpressionPrimary0", "cc21/mdx.javacc", 435, 5);
                try {
                    Identifier();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("ValueExpressionPrimary0", "cc21/mdx.javacc", 429, 3);
                throw new ParseException(this, ValueExpressionPrimary0_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException633= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize634);
            if (ValueExpressionPrimary027!=null) {
                if (parseException633== null) {
                    closeNodeScope(ValueExpressionPrimary027, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:438:1
    final public void Expressions() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Expressions";
        ASTExpressions Expressions28= null;
        if (buildTree) {
            Expressions28= new ASTExpressions();
            openNodeScope(Expressions28);
        }
        ParseException parseException704= null;
        int callStackSize705= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:439:3
            pushOntoCallStack("Expressions", "cc21/mdx.javacc", 439, 3);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:439:14
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.javacc:439:15
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.javacc:439:23
                pushOntoCallStack("Expressions", "cc21/mdx.javacc", 439, 23);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException704= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize705);
            if (Expressions28!=null) {
                if (parseException704== null) {
                    closeNodeScope(Expressions28, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:442:1
    final public void CaseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "CaseExpression";
        ASTCaseExpression CaseExpression29= null;
        if (buildTree) {
            CaseExpression29= new ASTCaseExpression();
            openNodeScope(CaseExpression29);
        }
        ParseException parseException722= null;
        int callStackSize723= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.javacc:443:3
            consumeToken(CASE);
            // Code for ZeroOrOne specified at cc21/mdx.javacc:443:10
            if (first_set$mdx_javacc$443$11.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.javacc:443:11
                pushOntoCallStack("CaseExpression", "cc21/mdx.javacc", 443, 11);
                try {
                    ValueExpression();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at cc21/mdx.javacc:443:29
            if (nextTokenType()== WHEN) {
                // Code for NonTerminal specified at cc21/mdx.javacc:443:30
                pushOntoCallStack("CaseExpression", "cc21/mdx.javacc", 443, 30);
                try {
                    WhenClauses();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at cc21/mdx.javacc:443:44
            if (nextTokenType()== ELSE) {
                // Code for RegexpRef specified at cc21/mdx.javacc:443:45
                consumeToken(ELSE);
                // Code for NonTerminal specified at cc21/mdx.javacc:443:52
                pushOntoCallStack("CaseExpression", "cc21/mdx.javacc", 443, 52);
                try {
                    ValueExpression();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:443:70
            consumeToken(END);
        }
        catch(ParseException e) {
            parseException722= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize723);
            if (CaseExpression29!=null) {
                if (parseException722== null) {
                    closeNodeScope(CaseExpression29, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:446:1
    final public void WhenClauses() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "WhenClauses";
        ASTWhenClauses WhenClauses30= null;
        if (buildTree) {
            WhenClauses30= new ASTWhenClauses();
            openNodeScope(WhenClauses30);
        }
        ParseException parseException761= null;
        int callStackSize762= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:447:3
            pushOntoCallStack("WhenClauses", "cc21/mdx.javacc", 447, 3);
            try {
                WhenClause();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:447:14
            while (true) {
                if (!(nextTokenType()== WHEN)) break;
                // Code for NonTerminal specified at cc21/mdx.javacc:447:15
                pushOntoCallStack("WhenClauses", "cc21/mdx.javacc", 447, 15);
                try {
                    WhenClause();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException761= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize762);
            if (WhenClauses30!=null) {
                if (parseException761== null) {
                    closeNodeScope(WhenClauses30, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:450:1
    final public void WhenClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "WhenClause";
        ASTWhenClause WhenClause31= null;
        if (buildTree) {
            WhenClause31= new ASTWhenClause();
            openNodeScope(WhenClause31);
        }
        ParseException parseException776= null;
        int callStackSize777= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.javacc:451:3
            consumeToken(WHEN);
            // Code for NonTerminal specified at cc21/mdx.javacc:451:10
            pushOntoCallStack("WhenClause", "cc21/mdx.javacc", 451, 10);
            try {
                ValueExpression();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:451:26
            consumeToken(THEN);
            // Code for NonTerminal specified at cc21/mdx.javacc:451:33
            pushOntoCallStack("WhenClause", "cc21/mdx.javacc", 451, 33);
            try {
                ValueExpression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException776= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize777);
            if (WhenClause31!=null) {
                if (parseException776== null) {
                    closeNodeScope(WhenClause31, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:455:1
    final public void CellProperty() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "CellProperty";
        ASTCellProperty CellProperty32= null;
        if (buildTree) {
            CellProperty32= new ASTCellProperty();
            openNodeScope(CellProperty32);
        }
        ParseException parseException791= null;
        int callStackSize792= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:456:3
            pushOntoCallStack("CellProperty", "cc21/mdx.javacc", 456, 3);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException791= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize792);
            if (CellProperty32!=null) {
                if (parseException791== null) {
                    closeNodeScope(CellProperty32, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:458:1
    final public void CreateSetBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "CreateSetBodyClause";
        ASTCreateSetBodyClause CreateSetBodyClause33= null;
        if (buildTree) {
            CreateSetBodyClause33= new ASTCreateSetBodyClause();
            openNodeScope(CreateSetBodyClause33);
        }
        ParseException parseException797= null;
        int callStackSize798= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:459:3
            pushOntoCallStack("CreateSetBodyClause", "cc21/mdx.javacc", 459, 3);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:459:14
            consumeToken(AS);
            // Code for NonTerminal specified at cc21/mdx.javacc:459:19
            pushOntoCallStack("CreateSetBodyClause", "cc21/mdx.javacc", 459, 19);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException797= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize798);
            if (CreateSetBodyClause33!=null) {
                if (parseException797== null) {
                    closeNodeScope(CreateSetBodyClause33, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:462:1
    final public void SelectDimensionPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SelectDimensionPropertyListClause";
        ASTSelectDimensionPropertyListClause SelectDimensionPropertyListClause34= null;
        if (buildTree) {
            SelectDimensionPropertyListClause34= new ASTSelectDimensionPropertyListClause();
            openNodeScope(SelectDimensionPropertyListClause34);
        }
        ParseException parseException809= null;
        int callStackSize810= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.javacc:463:5
            if (nextTokenType()== DIMENSION) {
                // Code for RegexpRef specified at cc21/mdx.javacc:463:6
                consumeToken(DIMENSION);
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:463:20
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at cc21/mdx.javacc:464:9
            pushOntoCallStack("SelectDimensionPropertyListClause", "cc21/mdx.javacc", 464, 9);
            try {
                Identifier();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.javacc:464:20
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.javacc:464:22
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.javacc:464:30
                pushOntoCallStack("SelectDimensionPropertyListClause", "cc21/mdx.javacc", 464, 30);
                try {
                    Identifier();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException809= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize810);
            if (SelectDimensionPropertyListClause34!=null) {
                if (parseException809== null) {
                    closeNodeScope(SelectDimensionPropertyListClause34, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:469:1
    final public void IntegerExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "IntegerExpression";
        ASTIntegerExpression IntegerExpression35= null;
        if (buildTree) {
            IntegerExpression35= new ASTIntegerExpression();
            openNodeScope(IntegerExpression35);
        }
        ParseException parseException839= null;
        int callStackSize840= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.javacc:470:2
            pushOntoCallStack("IntegerExpression", "cc21/mdx.javacc", 470, 2);
            try {
                NumericLiteral();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException839= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize840);
            if (IntegerExpression35!=null) {
                if (parseException839== null) {
                    closeNodeScope(IntegerExpression35, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:474:1
    final public void SelectQueryAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SelectQueryAxisClause";
        ASTSelectQueryAxisClause SelectQueryAxisClause36= null;
        if (buildTree) {
            SelectQueryAxisClause36= new ASTSelectQueryAxisClause();
            openNodeScope(SelectQueryAxisClause36);
        }
        ParseException parseException845= null;
        int callStackSize846= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.javacc:475:3
            if (nextTokenType()== NON) {
                // Code for RegexpRef specified at cc21/mdx.javacc:475:5
                consumeToken(NON);
                // Code for RegexpRef specified at cc21/mdx.javacc:475:11
                consumeToken(EMPTY);
            }
            // Code for NonTerminal specified at cc21/mdx.javacc:476:3
            pushOntoCallStack("SelectQueryAxisClause", "cc21/mdx.javacc", 476, 3);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.javacc:477:3
            if (nextTokenType()== DIMENSION||nextTokenType== PROPERTIES) {
                // Code for NonTerminal specified at cc21/mdx.javacc:478:3
                pushOntoCallStack("SelectQueryAxisClause", "cc21/mdx.javacc", 478, 3);
                try {
                    SelectDimensionPropertyListClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at cc21/mdx.javacc:480:3
            consumeToken(ON);
            if (nextTokenType()== UNSIGNED_INTEGER_LITERAL||nextTokenType== APPROX_NUMERIC_LITERAL||nextTokenType== DECIMAL_NUMERIC_LITERAL) {
                // Code for NonTerminal specified at cc21/mdx.javacc:482:8
                pushOntoCallStack("SelectQueryAxisClause", "cc21/mdx.javacc", 482, 8);
                try {
                    IntegerExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== AXIS) {
                // Code for RegexpRef specified at cc21/mdx.javacc:483:8
                consumeToken(AXIS);
                // Code for RegexpRef specified at cc21/mdx.javacc:483:15
                consumeToken(LPAREN);
                // Code for NonTerminal specified at cc21/mdx.javacc:483:24
                pushOntoCallStack("SelectQueryAxisClause", "cc21/mdx.javacc", 483, 24);
                try {
                    NumericLiteral();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.javacc:483:39
                consumeToken(RPAREN);
            }
            else if (nextTokenType()== COLUMNS) {
                // Code for RegexpRef specified at cc21/mdx.javacc:484:8
                consumeToken(COLUMNS);
            }
            else if (nextTokenType()== ROWS) {
                // Code for RegexpRef specified at cc21/mdx.javacc:485:8
                consumeToken(ROWS);
            }
            else if (nextTokenType()== PAGES) {
                // Code for RegexpRef specified at cc21/mdx.javacc:486:8
                consumeToken(PAGES);
            }
            else if (nextTokenType()== SECTIONS) {
                // Code for RegexpRef specified at cc21/mdx.javacc:487:8
                consumeToken(SECTIONS);
            }
            else if (nextTokenType()== CHAPTERS) {
                // Code for RegexpRef specified at cc21/mdx.javacc:488:8
                consumeToken(CHAPTERS);
            }
            else  {
                pushOntoCallStack("SelectQueryAxisClause", "cc21/mdx.javacc", 482, 8);
                throw new ParseException(this, first_set$mdx_javacc$482$8, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException845= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize846);
            if (SelectQueryAxisClause36!=null) {
                if (parseException845== null) {
                    closeNodeScope(SelectQueryAxisClause36, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.javacc:491:1
    final public void SelectSubcubeClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SelectSubcubeClause";
        ASTSelectSubcubeClause SelectSubcubeClause37= null;
        if (buildTree) {
            SelectSubcubeClause37= new ASTSelectSubcubeClause();
            openNodeScope(SelectSubcubeClause37);
        }
        ParseException parseException930= null;
        int callStackSize931= parsingStack.size();
        try {
            if (nextTokenType()== QUOTED_ID||nextTokenType== AMP_UNQUOTED_ID) {
                // Code for NonTerminal specified at cc21/mdx.javacc:493:5
                pushOntoCallStack("SelectSubcubeClause", "cc21/mdx.javacc", 493, 5);
                try {
                    Identifier();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpRef specified at cc21/mdx.javacc:494:8
                consumeToken(LPAREN);
                // Code for RegexpRef specified at cc21/mdx.javacc:494:17
                consumeToken(SELECT);
                // Code for ZeroOrOne specified at cc21/mdx.javacc:495:10
                if (first_set$mdx_javacc$495$12.contains(nextTokenType())) {
                    // Code for NonTerminal specified at cc21/mdx.javacc:495:12
                    pushOntoCallStack("SelectSubcubeClause", "cc21/mdx.javacc", 495, 12);
                    try {
                        SelectQueryAxisClause();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for ZeroOrMore specified at cc21/mdx.javacc:495:34
                    while (true) {
                        if (!(nextTokenType()== COMMA)) break;
                        // Code for RegexpRef specified at cc21/mdx.javacc:495:35
                        consumeToken(COMMA);
                        // Code for NonTerminal specified at cc21/mdx.javacc:495:43
                        pushOntoCallStack("SelectSubcubeClause", "cc21/mdx.javacc", 495, 43);
                        try {
                            SelectQueryAxisClause();
                        }
                        finally {
                            popCallStack();
                        }
                    }
                }
            }
            else if (nextTokenType()== FROM||nextTokenType== ASTERISK) {
                // Code for ZeroOrOne specified at cc21/mdx.javacc:496:13
                if (nextTokenType()== ASTERISK) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:496:15
                    consumeToken(ASTERISK);
                }
                // Code for RegexpRef specified at cc21/mdx.javacc:497:8
                consumeToken(FROM);
                // Code for NonTerminal specified at cc21/mdx.javacc:497:15
                pushOntoCallStack("SelectSubcubeClause", "cc21/mdx.javacc", 497, 15);
                try {
                    SelectSubcubeClause();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at cc21/mdx.javacc:498:8
                if (nextTokenType()== WHERE) {
                    // Code for RegexpRef specified at cc21/mdx.javacc:498:10
                    consumeToken(WHERE);
                    // Code for NonTerminal specified at cc21/mdx.javacc:498:18
                    pushOntoCallStack("SelectSubcubeClause", "cc21/mdx.javacc", 498, 18);
                    try {
                        Expression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpRef specified at cc21/mdx.javacc:499:8
                consumeToken(RPAREN);
            }
            else  {
                pushOntoCallStack("SelectSubcubeClause", "cc21/mdx.javacc", 493, 5);
                throw new ParseException(this, first_set$mdx_javacc$493$5, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException930= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize931);
            if (SelectSubcubeClause37!=null) {
                if (parseException930== null) {
                    closeNodeScope(SelectSubcubeClause37, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$310$3= tokenTypeSet(QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_javacc$337$7= first_set$mdx_javacc$337$7_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$337$7_init() {
        return tokenTypeSet(CASE, NON, NOT, LPAREN, LBRACE, ASTERISK, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$339$7= first_set$mdx_javacc$339$7_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$339$7_init() {
        return tokenTypeSet(CASE, NON, NOT, LPAREN, LBRACE, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$388$17= first_set$mdx_javacc$388$17_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$388$17_init() {
        return tokenTypeSet(CASE, LPAREN, LBRACE, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$392$10= tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_javacc$407$10= tokenTypeSet(CONCAT, MINUS, PLUS);
    static private final EnumSet<TokenType> first_set$mdx_javacc$411$12= tokenTypeSet(ASTERISK, SOLIDUS);
    static private final EnumSet<TokenType> first_set$mdx_javacc$417$5= first_set$mdx_javacc$417$5_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$417$5_init() {
        return tokenTypeSet(CASE, LPAREN, LBRACE, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$421$18= first_set$mdx_javacc$421$18_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$421$18_init() {
        return tokenTypeSet(CASE, NOT, LPAREN, LBRACE, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$425$35= tokenTypeSet(ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_javacc$431$16= first_set$mdx_javacc$431$16_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$431$16_init() {
        return tokenTypeSet(CASE, NOT, LPAREN, LBRACE, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$443$11= first_set$mdx_javacc$443$11_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$443$11_init() {
        return tokenTypeSet(CASE, NOT, LPAREN, LBRACE, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$482$8= first_set$mdx_javacc$482$8_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$482$8_init() {
        return tokenTypeSet(AXIS, CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);
    }

    static private final EnumSet<TokenType> first_set$mdx_javacc$493$5= tokenTypeSet(FROM, LPAREN, ASTERISK, QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_javacc$495$12= first_set$mdx_javacc$495$12_init();
    static private EnumSet<TokenType> first_set$mdx_javacc$495$12_init() {
        return tokenTypeSet(CASE, NON, NOT, LPAREN, LBRACE, MINUS, PLUS, ID, QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, STRING);
    }

    ArrayList<NonTerminalCall> parsingStack= new ArrayList<> ();
    private ArrayList<NonTerminalCall> lookaheadStack= new ArrayList<> ();
    /**
 * Inner class that represents entering a grammar production
 */
    class NonTerminalCall {
        final String sourceFile;
        final String productionName;
        final int line, column;
        NonTerminalCall(String sourceFile, String productionName, int line, int column) {
            this.sourceFile= sourceFile;
            this.productionName= productionName;
            this.line= line;
            this.column= column;
        }

        final mdxLexer getTokenSource() {
            return MDXParser.this.token_source;
        }

        StackTraceElement createStackTraceElement() {
            return new StackTraceElement("MDXParser", productionName, sourceFile, line);
        }

        void dump(PrintStream ps) {
            ps.println(productionName+":"+line+":"+column);
        }

    }
    private final void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popCallStack() {
        NonTerminalCall ntc= parsingStack.remove(parsingStack.size()-1);
        this.currentlyParsedProduction= ntc.productionName;
    }

    private final void restoreCallStack(int prevSize) {
        while (parsingStack.size()> prevSize) {
            popCallStack();
        }
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: "+currentlyParsedProduction);
        ps.println("Current Lookahead Production is: "+currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token oldToken= lastConsumedToken;
        Token nextToken= nextToken(lastConsumedToken);
        if (nextToken.getType()!=expectedType) {
            nextToken= handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken= nextToken;
        this.nextTokenType= null;
        if (buildTree&&tokensAreNodes) {
            pushNode(lastConsumedToken);
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(this, nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private class ParseState {
        Token lastConsumed;
        ArrayList<NonTerminalCall> parsingStack;
        LexicalState lexicalState;
        NodeScope nodeScope;
        ParseState() {
            this.lastConsumed= MDXParser.this.lastConsumedToken;
            @SuppressWarnings("unchecked")
            ArrayList<NonTerminalCall> parsingStack= (ArrayList<NonTerminalCall> ) MDXParser.this.parsingStack.clone();
            this.parsingStack= parsingStack;
            this.lexicalState= token_source.lexicalState;
            this.nodeScope= (NodeScope) currentNodeScope.clone();
        }

    }
    private boolean buildTree= true;
    private boolean tokensAreNodes= true;
    private boolean unparsedTokensAreNodes= false;
    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes= unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes= tokensAreNodes;
    }

    NodeScope currentNodeScope= new NodeScope();
    /** 
         * @return the root node of the AST. It only makes sense to call
         * this after a successful parse. 
         */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
     * push a node onto the top of the node stack
     * @param n the node to push
     */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /** 
     * @return the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /** 
     * @return the node currently on the top of the tree-building stack. 
     */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     * @param n the node to poke
     */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /** 
     * @return the number of Nodes on the tree-building stack in the current node
         * scope. 
         */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n!=null) {
            Token next= nextToken(lastConsumedToken);
            n.setTokenSource(lastConsumedToken.getTokenSource());
            n.setBeginOffset(next.getBeginOffset());
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
         * children.  That number of nodes are popped from the stack and
         * made the children of the definite node.  Then the definite node
         * is pushed on to the stack.
         */
    private void closeNodeScope(Node n, int num) {
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes= new ArrayList<Node> ();
        for (int i= 0; i<num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            // FIXME deal with the UNPARSED_TOKENS_ARE_NODES case
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
         * A conditional node is constructed if the condition is true.  All
         * the nodes that have been pushed since the node was opened are
         * made children of the conditional node, which is then pushed
         * on to the stack.  If the condition is false the node is not
         * constructed and they are left on the stack. 
         */
    private void closeNodeScope(Node n, boolean condition) {
        if (n!=null&&condition) {
            n.setEndOffset(lastConsumedToken.getEndOffset());
            int a= nodeArity();
            currentNodeScope.close();
            ArrayList<Node> nodes= new ArrayList<Node> ();
            while (a--> 0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (unparsedTokensAreNodes&&child instanceof Token) {
                    Token tok= (Token) child;
                    while (tok.previousCachedToken()!=null&&tok.previousCachedToken().isUnparsed()) {
                        tok= tok.previousCachedToken();
                    }
                    while (tok.isUnparsed()) {
                        n.addChild(tok);
                        tok= tok.nextCachedToken();
                    }
                }
                n.addChild(child);
            }
            n.close();
            pushNode(n);
        }
        else  {
            currentNodeScope.close();
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree= buildTree;
    }

    /**
     * Just a kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    MDXParser jjtree= this;
    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node>  {
        NodeScope parentScope;
        NodeScope() {
            this.parentScope= MDXParser.this.currentNodeScope;
            MDXParser.this.currentNodeScope= this;
        }

        boolean isRootScope() {
            return parentScope== null;
        }

        Node rootNode() {
            NodeScope ns= this;
            while (ns.parentScope!=null) {
                ns= ns.parentScope;
            }
            return ns.isEmpty()?null:
            ns.get(0);
        }

        Node peek() {
            return isEmpty()?parentScope.peek():
            get(size()-1);
        }

        Node pop() {
            return isEmpty()?parentScope.pop():
            remove(size()-1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            }
            else  {
                set(size()-1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            MDXParser.this.currentNodeScope= parentScope;
        }

        int nestingLevel() {
            int result= 0;
            NodeScope parent= this;
            while (parent.parentScope!=null) {
                result++;
                parent= parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone= (NodeScope) super.clone();
            if (parentScope!=null) {
                clone.parentScope= (NodeScope) parentScope.clone();
            }
            return clone;
        }

    }
}
