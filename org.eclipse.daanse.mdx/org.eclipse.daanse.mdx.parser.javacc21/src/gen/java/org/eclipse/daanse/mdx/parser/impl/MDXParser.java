/* Generated by: JavaCC 21 Parser Generator. MDXParser.java */
package org.eclipse.daanse.mdx.parser.impl;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Map;
import java.util.concurrent.CancellationException;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseMdxStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseDrillthroughStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseReturnItems;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseReturnItem;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectWithClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectStatement;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectQueryAxesClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectSlicerAxisClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectCellPropertyListClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseCreateMemberBodyClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseMemberPropertyDefinition;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseFormulaExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTexpressionOrEmpty;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTexpOrEmptyList;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTexpList;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTexpressionEof;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseIdentifier;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseNameSegment;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseKeyIdentifier;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseAmpId;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseKeyword;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseCompoundId;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTunaliasedExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm5;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm4;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm3;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm2;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTterm;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTfactor;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTprimary;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTsegmentOrFuncall;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseNumericLiteral;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTatom;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTcaseExpression;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseCellProperty;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseCreateSetBodyClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectQueryAxisClause;
import org.eclipse.daanse.mdx.parser.impl.tree.ASTparseSelectSubcubeClause;
import static org.eclipse.daanse.mdx.parser.impl.mdxConstants.TokenType.*;
import java.util.EnumSet;
import java.util.LinkedList;
import org.eclipse.daanse.mdx.parser.api.model.CompoundId;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectQueryClause;
import org.eclipse.daanse.mdx.parser.api.model.DrillthroughStatement;
import java.io.IOException;
import java.util.concurrent.CancellationException;
import java.math.BigDecimal;
import java.util.List;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectQueryAxesClause;
import org.eclipse.daanse.mdx.parser.api.model.SelectStatement;
import org.eclipse.daanse.mdx.parser.api.model.select.CreateMemberBodyClause;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectQueryAsteriskClause;
import java.nio.file.Path;
import java.util.ArrayList;
import org.eclipse.daanse.mdx.parser.api.model.CellProperty;
import org.eclipse.daanse.mdx.parser.api.model.FormulaExpression;
import org.eclipse.daanse.mdx.parser.api.model.Segment;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectSlicerAxisClause;
import java.io.PrintStream;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectCellPropertyListClause;
import org.eclipse.daanse.mdx.parser.api.model.Literal;
import java.nio.charset.Charset;
import org.eclipse.daanse.mdx.parser.api.model.NumericLiteral;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectWithClause;
import org.eclipse.daanse.mdx.parser.api.model.MemberPropertyDefinition;
import java.util.Collections;
import java.nio.file.Files;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectSubcubeClause;
import java.io.Reader;
import java.io.InputStreamReader;
import org.eclipse.daanse.mdx.parser.api.model.SymbolLiteral;
import org.eclipse.daanse.mdx.parser.api.model.select.CreateSetBodyClause;
import org.eclipse.daanse.mdx.parser.api.model.CallExpression;
import org.eclipse.daanse.mdx.parser.api.model.select.SelectQueryAxisClause;
import org.eclipse.daanse.mdx.parser.api.model.KeySegment;
import org.eclipse.daanse.mdx.parser.api.model.MdxStatement;
import org.eclipse.daanse.mdx.parser.api.model.NameSegment;
import org.eclipse.daanse.mdx.parser.api.model.StringLiteral;
import org.eclipse.daanse.mdx.parser.api.model.ReturnItem;
import org.eclipse.daanse.mdx.parser.api.model.Axis;
import java.util.Arrays;
import java.util.HashMap;
import org.eclipse.daanse.mdx.parser.api.model.NullLiteral;
import java.util.ListIterator;
import org.eclipse.daanse.mdx.parser.api.model.Expression;
@SuppressWarnings("unused")
public class MDXParser implements mdxConstants {
    private static String stripQuotes(String s, String prefix, String suffix, String quoted) {
        assert s.startsWith(prefix)&&s.endsWith(suffix);
        s= s.substring(prefix.length(), s.length()-suffix.length());
        s= s.replace(quoted, suffix);
        return s;
    }

    private Expression createCall(Expression left, Segment segment, List<Expression> expressions) {
        final String name= segment instanceof NameSegment?((NameSegment) segment).name():
        null;
        if (expressions!=null) {
            if (left!=null) {
                // Method syntax: "x.foo(arg1, arg2)" or "x.foo()"
                expressions.add(0, left);
                return new CallExpression(name, CallExpression.Type.Method, expressions);
            }
            else  {
                // Function syntax: "foo(arg1, arg2)" or "foo()"
                return new CallExpression(name, CallExpression.Type.Function, expressions);
            }
        }
        else  {
            // Member syntax: "foo.bar"
            // or property syntax: "foo.RESERVED_WORD"
            CallExpression.Type type;
            boolean call= false;
            switch(segment.quoting()) {
                case UNQUOTED:
                type= CallExpression.Type.Property;
                call= true;
                //funTable.isProperty(name); TODO: all is call
                break;
                case QUOTED:
                type= CallExpression.Type.PropertyQuoted;
                break;
                default:
                type= CallExpression.Type.PropertyAmpersAndQuoted;
                break;
            }
            if (left instanceof CompoundId&&!call) {
                List<Segment> newSegments= new ArrayList<Segment> (((CompoundId) left).segments());
                newSegments.add(segment);
                return new CompoundId(newSegments);
            }
            else if (left== null) {
                return new CompoundId(List.of(segment));
            }
            else  {
                return new CallExpression(name, type, List.of(left));
            }
        }
    }

    static final int UNLIMITED= Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean scanToEnd, hitFailure;
    private String currentlyParsedProduction, currentLookaheadProduction;
    private int lookaheadRoutineNesting, nonTerminalNesting;
    private boolean cancelled;
    public void cancel() {
        cancelled= true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public mdxLexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public MDXParser(String inputSource, CharSequence content) {
        this(new mdxLexer(inputSource, content));
    }

    public MDXParser(CharSequence content) {
        this("input", content);
    }

    /**
   * @param inputSource just the name of the input source (typically the filename) that 
   * will be used in error messages and so on.
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public MDXParser(String inputSource, Path path) throws IOException {
        this(inputSource, mdxLexer.stringFromBytes(Files.readAllBytes(path)));
    }

    public MDXParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, mdxLexer.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public MDXParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public MDXParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public MDXParser(Reader reader) {
        this(new mdxLexer("input", reader));
    }

    /** Constructor with user supplied Lexer. */
    public MDXParser(mdxLexer lexer) {
        token_source= lexer;
        lastConsumedToken= lexer.DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    final private Token nextToken(final Token tok) {
        Token result= token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result= token_source.getNextToken(result);
        }
        nextTokenType= null;
        return result;
    }

    /**
   * @return the next Token off the stream. This is the same as #getToken(1)
   */
    final public Token getNextToken() {
        return getToken(1);
    }

    /**
 * @param index how many tokens to look ahead
 * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream. 
 * If we are in a lookahead, it looks ahead from the currentLookaheadToken
 * Otherwise, it is the lastConsumedToken. If you pass in a negative
 * number it goes backward.
 */
    final public Token getToken(final int index) {
        Token t= currentLookaheadToken== null?lastConsumedToken:
        currentLookaheadToken;
        for (int i= 0; i<index; i++) {
            t= nextToken(t);
        }
        for (int i= 0; i> index; i--) {
            t= t.getPrevious();
            if (t== null) break;
        }
        return t;
    }

    private final TokenType nextTokenType() {
        if (nextTokenType== null) {
            nextTokenType= nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.add(tt);
        }
        token_source.reset(getToken(0));
        nextTokenType= null;
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.remove(tt);
        }
        token_source.reset(getToken(0));
        nextTokenType= null;
        return result;
    }

    private static HashMap<TokenType[], EnumSet<TokenType> > enumSetCache= new HashMap<> ();
    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key= new TokenType[1+rest.length];
        key[0]= first;
        if (rest.length> 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result= (rest.length== 0)?EnumSet.of(first):
        EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    // cc21/mdx.jj:458:1
    final public// ----------------------------------------------------------------------------
    // MDX Statement
    //
    // <statement> ::= <selectStatement>
    //                   | <drillthroughStatement>
    //                   | <explainStatement>
    //
    // <selectStatement> ::= [WITH <formulaSpecification>]
    //                         SELECT [<SelectQueryAxisClause>
    //                                [, <SelectQueryAxisClause>...]]
    //                         FROM [<cubeSpecification>]
    //                         [WHERE <slicerSpecification>]
    //                         [<cellProps>]
    //
    // <drillthroughStatment> ::=
    //     DRILLTHROUGH
    //     [ MAXROWS <count> ]
    //     [ FIRSTROWSET <count> ]
    //     <selectStatement>
    //     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
    //
    // <explainStatement> ::=
    //     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
    //
    MdxStatement parseMdxStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseMdxStatement";
        ASTparseMdxStatement parseMdxStatement1= null;
        if (buildTree) {
            parseMdxStatement1= new ASTparseMdxStatement();
            openNodeScope(parseMdxStatement1);
        }
        MdxStatement mdxStatement= null;
        ParseException parseException1= null;
        int callStackSize2= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:463:3
            pushOntoCallStack("parseMdxStatement", "cc21/mdx.jj", 463, 3);
            try {
                mdxStatement= parseSelectStatement();
            }
            finally {
                popCallStack();
            }
            // Code for EndOfFile specified at cc21/mdx.jj:476:3
            consumeToken(EOF);
            // Code for CodeBlock specified at cc21/mdx.jj:477:3
            return mdxStatement;
        }
        catch(ParseException e) {
            parseException1= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2);
            if (parseMdxStatement1!=null) {
                if (parseException1== null) {
                    closeNodeScope(parseMdxStatement1, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:482:1
    final public DrillthroughStatement parseDrillthroughStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseDrillthroughStatement";
        ASTparseDrillthroughStatement parseDrillthroughStatement2= null;
        if (buildTree) {
            parseDrillthroughStatement2= new ASTparseDrillthroughStatement();
            openNodeScope(parseDrillthroughStatement2);
        }
        SelectStatement selectStatement= null;
        List<ReturnItem> returnItems= null;
        ParseException parseException13= null;
        int callStackSize14= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.jj:488:3
            consumeToken(DRILLTHROUGH);
            // Code for ZeroOrOne specified at cc21/mdx.jj:489:3
            if (nextTokenType()== MAXROWS) {
                // Code for RegexpRef specified at cc21/mdx.jj:489:4
                consumeToken(MAXROWS);
                // Code for RegexpRef specified at cc21/mdx.jj:489:16
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:490:3
            if (nextTokenType()== FIRSTROWSET) {
                // Code for RegexpRef specified at cc21/mdx.jj:490:4
                consumeToken(FIRSTROWSET);
                // Code for RegexpRef specified at cc21/mdx.jj:490:20
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for NonTerminal specified at cc21/mdx.jj:491:3
            pushOntoCallStack("parseDrillthroughStatement", "cc21/mdx.jj", 491, 3);
            try {
                selectStatement= parseSelectStatement();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:492:3
            if (nextTokenType()== RETURN) {
                // Code for RegexpRef specified at cc21/mdx.jj:493:5
                consumeToken(RETURN);
                // Code for NonTerminal specified at cc21/mdx.jj:493:16
                pushOntoCallStack("parseDrillthroughStatement", "cc21/mdx.jj", 493, 16);
                try {
                    returnItems= parseReturnItems();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:495:3
            return new DrillthroughStatement();
        }
        catch(ParseException e) {
            parseException13= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize14);
            if (parseDrillthroughStatement2!=null) {
                if (parseException13== null) {
                    closeNodeScope(parseDrillthroughStatement2, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:500:1
    final public List<ReturnItem> parseReturnItems() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseReturnItems";
        ASTparseReturnItems parseReturnItems3= null;
        if (buildTree) {
            parseReturnItems3= new ASTparseReturnItems();
            openNodeScope(parseReturnItems3);
        }
        List<ReturnItem> returnItems= new LinkedList<ReturnItem> ();
        ReturnItem item;
        ParseException parseException61= null;
        int callStackSize62= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:506:3
            pushOntoCallStack("parseReturnItems", "cc21/mdx.jj", 506, 3);
            try {
                item= parseReturnItem();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:507:3
            returnItems.add(item);
            // Code for ZeroOrMore specified at cc21/mdx.jj:510:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:511:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:511:15
                pushOntoCallStack("parseReturnItems", "cc21/mdx.jj", 511, 15);
                try {
                    item= parseReturnItem();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:512:5
                returnItems.add(item);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:516:3
            return returnItems;
        }
        catch(ParseException e) {
            parseException61= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize62);
            if (parseReturnItems3!=null) {
                if (parseException61== null) {
                    closeNodeScope(parseReturnItems3, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:521:1
    final public ReturnItem parseReturnItem() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseReturnItem";
        ASTparseReturnItem parseReturnItem4= null;
        if (buildTree) {
            parseReturnItem4= new ASTparseReturnItem();
            openNodeScope(parseReturnItem4);
        }
        CompoundId compoundId;
        ParseException parseException88= null;
        int callStackSize89= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:526:3
            pushOntoCallStack("parseReturnItem", "cc21/mdx.jj", 526, 3);
            try {
                compoundId= parseCompoundId();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:527:3
            return new ReturnItem(compoundId);
        }
        catch(ParseException e) {
            parseException88= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize89);
            if (parseReturnItem4!=null) {
                if (parseException88== null) {
                    closeNodeScope(parseReturnItem4, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:537:1
    final public//CreateCellCalculationBodyClause:
    //;
    //MeasureBodyClause:
    //  <APPROX_NUMERIC_LITERAL>
    //;
    SelectWithClause parseSelectWithClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectWithClause";
        ASTparseSelectWithClause parseSelectWithClause5= null;
        if (buildTree) {
            parseSelectWithClause5= new ASTparseSelectWithClause();
            openNodeScope(parseSelectWithClause5);
        }
        CreateMemberBodyClause createMemberBodyClause= null;
        CreateSetBodyClause createSetBodyClause= null;
        ParseException parseException97= null;
        int callStackSize98= parsingStack.size();
        try {
            if (nextTokenType()== MEMBER||nextTokenType== CALCULATED) {
                // Code for ZeroOrOne specified at cc21/mdx.jj:544:5
                if (nextTokenType()== CALCULATED) {
                    // Code for RegexpStringLiteral specified at cc21/mdx.jj:544:6
                    consumeToken(CALCULATED);
                }
                // Code for RegexpRef specified at cc21/mdx.jj:544:21
                consumeToken(MEMBER);
                // Code for NonTerminal specified at cc21/mdx.jj:544:32
                pushOntoCallStack("parseSelectWithClause", "cc21/mdx.jj", 544, 32);
                try {
                    createMemberBodyClause= parseCreateMemberBodyClause();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== SET) {
                // Code for RegexpRef specified at cc21/mdx.jj:545:5
                consumeToken(SET);
                // Code for NonTerminal specified at cc21/mdx.jj:545:13
                pushOntoCallStack("parseSelectWithClause", "cc21/mdx.jj", 545, 13);
                try {
                    createSetBodyClause= parseCreateSetBodyClause();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("parseSelectWithClause", "cc21/mdx.jj", 544, 5);
                throw new ParseException(this, first_set$mdx_jj$544$5, parsingStack);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:548:3
            return new SelectWithClause();
        }
        catch(ParseException e) {
            parseException97= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize98);
            if (parseSelectWithClause5!=null) {
                if (parseException97== null) {
                    closeNodeScope(parseSelectWithClause5, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:553:1
    final public SelectStatement parseSelectStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectStatement";
        ASTparseSelectStatement parseSelectStatement6= null;
        if (buildTree) {
            parseSelectStatement6= new ASTparseSelectStatement();
            openNodeScope(parseSelectStatement6);
        }
        SelectWithClause selectWithClause= null;
        SelectSlicerAxisClause selectSlicerAxisClause= null;
        SelectQueryClause selectQueryClause= null;
        SelectSubcubeClause selectSubcubeClause= null;
        SelectCellPropertyListClause selectCellPropertyListClause= null;
        ParseException parseException134= null;
        int callStackSize135= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.jj:562:3
            if (nextTokenType()== WITH) {
                // Code for RegexpRef specified at cc21/mdx.jj:563:5
                consumeToken(WITH);
                // Code for OneOrMore specified at cc21/mdx.jj:564:5
                while (true) {
                    // Code for NonTerminal specified at cc21/mdx.jj:565:7
                    pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 565, 7);
                    try {
                        selectWithClause= parseSelectWithClause();
                    }
                    finally {
                        popCallStack();
                    }
                    if (!(nextTokenType()== MEMBER||nextTokenType== SET||nextTokenType== CALCULATED)) break;
                }
            }
            // Code for RegexpRef specified at cc21/mdx.jj:568:3
            consumeToken(SELECT);
            // Code for ZeroOrOne specified at cc21/mdx.jj:569:3
            // Code for ExpansionChoice specified at cc21/mdx.jj:570:5
            if (nextTokenType()== ASTERISK) {
                // Code for NonTerminal specified at cc21/mdx.jj:570:5
                pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 570, 5);
                try {
                    selectQueryClause= parseSelectQueryAsteriskClause();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$mdx_jj$572$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:572:5
                pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 572, 5);
                try {
                    selectQueryClause= parseSelectQueryAxesClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at cc21/mdx.jj:574:3
            consumeToken(FROM);
            // Code for NonTerminal specified at cc21/mdx.jj:574:12
            pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 574, 12);
            try {
                selectSubcubeClause= parseSelectSubcubeClause();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:575:3
            if (nextTokenType()== WHERE) {
                // Code for NonTerminal specified at cc21/mdx.jj:576:5
                pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 576, 5);
                try {
                    selectSlicerAxisClause= parseSelectSlicerAxisClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:578:3
            if (nextTokenType()== CELL||nextTokenType== PROPERTIES) {
                // Code for NonTerminal specified at cc21/mdx.jj:579:5
                pushOntoCallStack("parseSelectStatement", "cc21/mdx.jj", 579, 5);
                try {
                    selectCellPropertyListClause= parseSelectCellPropertyListClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:581:3
            return new SelectStatement(null, selectQueryClause, null, null);
            //    return new SelectStatement(selectWithClause, selectQueryClause, selectSubcubeClause, selectCellPropertyListClause);
        }
        catch(ParseException e) {
            parseException134= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize135);
            if (parseSelectStatement6!=null) {
                if (parseException134== null) {
                    closeNodeScope(parseSelectStatement6, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:587:1
    final public SelectQueryClause parseSelectQueryAsteriskClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectQueryAsteriskClause";
        ASTparseSelectQueryAsteriskClause parseSelectQueryAsteriskClause7= null;
        if (buildTree) {
            parseSelectQueryAsteriskClause7= new ASTparseSelectQueryAsteriskClause();
            openNodeScope(parseSelectQueryAsteriskClause7);
        }
        ParseException parseException203= null;
        int callStackSize204= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.jj:591:3
            consumeToken(ASTERISK);
            // Code for CodeBlock specified at cc21/mdx.jj:592:3
            return new SelectQueryAsteriskClause();
        }
        catch(ParseException e) {
            parseException203= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize204);
            if (parseSelectQueryAsteriskClause7!=null) {
                if (parseException203== null) {
                    closeNodeScope(parseSelectQueryAsteriskClause7, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:597:1
    final public SelectQueryClause parseSelectQueryAxesClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectQueryAxesClause";
        ASTparseSelectQueryAxesClause parseSelectQueryAxesClause8= null;
        if (buildTree) {
            parseSelectQueryAxesClause8= new ASTparseSelectQueryAxesClause();
            openNodeScope(parseSelectQueryAxesClause8);
        }
        List<SelectQueryAxisClause> selectQueryAxisClauses= new LinkedList<SelectQueryAxisClause> ();
        ParseException parseException212= null;
        int callStackSize213= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:602:3
            pushOntoCallStack("parseSelectQueryAxesClause", "cc21/mdx.jj", 602, 3);
            try {
                parseSelectQueryAxisClause();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:603:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:604:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:604:15
                pushOntoCallStack("parseSelectQueryAxesClause", "cc21/mdx.jj", 604, 15);
                try {
                    parseSelectQueryAxisClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:606:3
            return new SelectQueryAxesClause();
        }
        catch(ParseException e) {
            parseException212= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize213);
            if (parseSelectQueryAxesClause8!=null) {
                if (parseException212== null) {
                    closeNodeScope(parseSelectQueryAxesClause8, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:611:1
    final public SelectSlicerAxisClause parseSelectSlicerAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectSlicerAxisClause";
        ASTparseSelectSlicerAxisClause parseSelectSlicerAxisClause9= null;
        if (buildTree) {
            parseSelectSlicerAxisClause9= new ASTparseSelectSlicerAxisClause();
            openNodeScope(parseSelectSlicerAxisClause9);
        }
        Expression expression= null;
        ParseException parseException233= null;
        int callStackSize234= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.jj:616:3
            consumeToken(WHERE);
            // Code for NonTerminal specified at cc21/mdx.jj:616:13
            pushOntoCallStack("parseSelectSlicerAxisClause", "cc21/mdx.jj", 616, 13);
            try {
                expression= parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:617:3
            return new SelectSlicerAxisClause();
        }
        catch(ParseException e) {
            parseException233= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize234);
            if (parseSelectSlicerAxisClause9!=null) {
                if (parseException233== null) {
                    closeNodeScope(parseSelectSlicerAxisClause9, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:622:1
    final public SelectCellPropertyListClause parseSelectCellPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectCellPropertyListClause";
        ASTparseSelectCellPropertyListClause parseSelectCellPropertyListClause10= null;
        if (buildTree) {
            parseSelectCellPropertyListClause10= new ASTparseSelectCellPropertyListClause();
            openNodeScope(parseSelectCellPropertyListClause10);
        }
        List<CellProperty> cellPropertys= new LinkedList<CellProperty> ();
        ParseException parseException245= null;
        int callStackSize246= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.jj:627:3
            if (nextTokenType()== CELL) {
                // Code for RegexpRef specified at cc21/mdx.jj:627:4
                consumeToken(CELL);
            }
            // Code for RegexpRef specified at cc21/mdx.jj:627:15
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at cc21/mdx.jj:627:30
            pushOntoCallStack("parseSelectCellPropertyListClause", "cc21/mdx.jj", 627, 30);
            try {
                parseCellProperty();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:628:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:629:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:629:15
                pushOntoCallStack("parseSelectCellPropertyListClause", "cc21/mdx.jj", 629, 15);
                try {
                    parseCellProperty();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:631:3
            return new SelectCellPropertyListClause();
        }
        catch(ParseException e) {
            parseException245= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize246);
            if (parseSelectCellPropertyListClause10!=null) {
                if (parseException245== null) {
                    closeNodeScope(parseSelectCellPropertyListClause10, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:636:1
    final public CreateMemberBodyClause parseCreateMemberBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseCreateMemberBodyClause";
        ASTparseCreateMemberBodyClause parseCreateMemberBodyClause11= null;
        if (buildTree) {
            parseCreateMemberBodyClause11= new ASTparseCreateMemberBodyClause();
            openNodeScope(parseCreateMemberBodyClause11);
        }
        ParseException parseException278= null;
        int callStackSize279= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:640:3
            pushOntoCallStack("parseCreateMemberBodyClause", "cc21/mdx.jj", 640, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.jj:640:21
            consumeToken(AS);
            // Code for NonTerminal specified at cc21/mdx.jj:640:28
            pushOntoCallStack("parseCreateMemberBodyClause", "cc21/mdx.jj", 640, 28);
            try {
                parseFormulaExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:641:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:642:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:642:15
                pushOntoCallStack("parseCreateMemberBodyClause", "cc21/mdx.jj", 642, 15);
                try {
                    parseMemberPropertyDefinition();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:644:3
            return new CreateMemberBodyClause();
        }
        catch(ParseException e) {
            parseException278= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize279);
            if (parseCreateMemberBodyClause11!=null) {
                if (parseException278== null) {
                    closeNodeScope(parseCreateMemberBodyClause11, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:649:1
    final public MemberPropertyDefinition parseMemberPropertyDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseMemberPropertyDefinition";
        ASTparseMemberPropertyDefinition parseMemberPropertyDefinition12= null;
        if (buildTree) {
            parseMemberPropertyDefinition12= new ASTparseMemberPropertyDefinition();
            openNodeScope(parseMemberPropertyDefinition12);
        }
        ParseException parseException305= null;
        int callStackSize306= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:653:3
            pushOntoCallStack("parseMemberPropertyDefinition", "cc21/mdx.jj", 653, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.jj:653:21
            consumeToken(EQ);
            // Code for NonTerminal specified at cc21/mdx.jj:653:28
            pushOntoCallStack("parseMemberPropertyDefinition", "cc21/mdx.jj", 653, 28);
            try {
                parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:654:3
            return new MemberPropertyDefinition();
        }
        catch(ParseException e) {
            parseException305= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize306);
            if (parseMemberPropertyDefinition12!=null) {
                if (parseException305== null) {
                    closeNodeScope(parseMemberPropertyDefinition12, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:659:1
    final public FormulaExpression parseFormulaExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseFormulaExpression";
        ASTparseFormulaExpression parseFormulaExpression13= null;
        if (buildTree) {
            parseFormulaExpression13= new ASTparseFormulaExpression();
            openNodeScope(parseFormulaExpression13);
        }
        ParseException parseException320= null;
        int callStackSize321= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:663:3
            pushOntoCallStack("parseFormulaExpression", "cc21/mdx.jj", 663, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.jj:663:21
            consumeToken(EQ);
            // Code for NonTerminal specified at cc21/mdx.jj:663:28
            pushOntoCallStack("parseFormulaExpression", "cc21/mdx.jj", 663, 28);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:664:3
            return new FormulaExpression();
        }
        catch(ParseException e) {
            parseException320= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize321);
            if (parseFormulaExpression13!=null) {
                if (parseException320== null) {
                    closeNodeScope(parseFormulaExpression13, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:669:1
    final public Expression parseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseExpression";
        ASTparseExpression parseExpression14= null;
        if (buildTree) {
            parseExpression14= new ASTparseExpression();
            openNodeScope(parseExpression14);
        }
        Expression expression;
        Segment segment;
        ParseException parseException335= null;
        int callStackSize336= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:675:3
            pushOntoCallStack("parseExpression", "cc21/mdx.jj", 675, 3);
            try {
                expression= unaliasedExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:676:3
            while (true) {
                if (!(nextTokenType()== AS)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:677:5
                consumeToken(AS);
                // Code for NonTerminal specified at cc21/mdx.jj:677:12
                pushOntoCallStack("parseExpression", "cc21/mdx.jj", 677, 12);
                try {
                    segment= parseIdentifier();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:678:5
                CompoundId compundId= new CompoundId(List.of(segment));
                expression= new CallExpression("AS", CallExpression.Type.Term_Infix, List.of(expression, compundId));
            }
            // Code for CodeBlock specified at cc21/mdx.jj:686:3
            return expression;
        }
        catch(ParseException e) {
            parseException335= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize336);
            if (parseExpression14!=null) {
                if (parseException335== null) {
                    closeNodeScope(parseExpression14, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:691:1
    final public Expression expressionOrEmpty() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "expressionOrEmpty";
        // Code for ExpansionChoice specified at cc21/mdx.jj:696:3
        ASTexpressionOrEmpty expressionOrEmpty15= null;
        if (buildTree) {
            expressionOrEmpty15= new ASTexpressionOrEmpty();
            openNodeScope(expressionOrEmpty15);
        }
        Expression expression;
        ParseException parseException359= null;
        int callStackSize360= parsingStack.size();
        try {
            if (first_set$mdx_jj$696$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:696:3
                pushOntoCallStack("expressionOrEmpty", "cc21/mdx.jj", 696, 3);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:697:3
                return expression;
            }
            else  {
                // Code for CodeBlock specified at cc21/mdx.jj:701:3
                return new CallExpression("", CallExpression.Type.Empty, List.of());
            }
        }
        catch(ParseException e) {
            parseException359= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize360);
            if (expressionOrEmpty15!=null) {
                if (parseException359== null) {
                    closeNodeScope(expressionOrEmpty15, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:709:1
    final public// Comma-separated list of expressions, some of which may be empty. Used
    // for functions.
    List<Expression> expOrEmptyList() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "expOrEmptyList";
        ASTexpOrEmptyList expOrEmptyList16= null;
        if (buildTree) {
            expOrEmptyList16= new ASTexpOrEmptyList();
            openNodeScope(expOrEmptyList16);
        }
        Expression expression;
        List<Expression> list= new LinkedList<Expression> ();
        ParseException parseException377= null;
        int callStackSize378= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:715:3
            pushOntoCallStack("expOrEmptyList", "cc21/mdx.jj", 715, 3);
            try {
                expression= expressionOrEmpty();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:716:3
            list.add(expression);
            // Code for ZeroOrMore specified at cc21/mdx.jj:719:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:720:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:721:5
                pushOntoCallStack("expOrEmptyList", "cc21/mdx.jj", 721, 5);
                try {
                    expression= expressionOrEmpty();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:722:5
                list.add(expression);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:726:3
            return list;
        }
        catch(ParseException e) {
            parseException377= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize378);
            if (expOrEmptyList16!=null) {
                if (parseException377== null) {
                    closeNodeScope(expOrEmptyList16, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:732:1
    final public// List of expressions, none of which may be empty.
    List<Expression> expList() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "expList";
        ASTexpList expList17= null;
        if (buildTree) {
            expList17= new ASTexpList();
            openNodeScope(expList17);
        }
        Expression expression;
        List<Expression> list= new LinkedList<Expression> ();
        ParseException parseException404= null;
        int callStackSize405= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:738:3
            pushOntoCallStack("expList", "cc21/mdx.jj", 738, 3);
            try {
                expression= parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:739:3
            list.add(expression);
            // Code for ZeroOrMore specified at cc21/mdx.jj:742:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:743:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:744:5
                pushOntoCallStack("expList", "cc21/mdx.jj", 744, 5);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:745:5
                list.add(expression);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:749:3
            return list;
        }
        catch(ParseException e) {
            parseException404= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize405);
            if (expList17!=null) {
                if (parseException404== null) {
                    closeNodeScope(expList17, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:754:1
    final public Expression expressionEof() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "expressionEof";
        ASTexpressionEof expressionEof18= null;
        if (buildTree) {
            expressionEof18= new ASTexpressionEof();
            openNodeScope(expressionEof18);
        }
        Expression expression;
        ParseException parseException431= null;
        int callStackSize432= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:759:3
            pushOntoCallStack("expressionEof", "cc21/mdx.jj", 759, 3);
            try {
                expression= parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for EndOfFile specified at cc21/mdx.jj:759:34
            consumeToken(EOF);
            // Code for CodeBlock specified at cc21/mdx.jj:760:3
            return expression;
        }
        catch(ParseException e) {
            parseException431= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize432);
            if (expressionEof18!=null) {
                if (parseException431== null) {
                    closeNodeScope(expressionEof18, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:770:1
    final public// ----------------------------------------------------------------------------
    // Elements
    //
    //
    // <identifier> ::= <regularIdentifier> | <delimitedIdentifier>
    Segment parseIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseIdentifier";
        ASTparseIdentifier parseIdentifier19= null;
        if (buildTree) {
            parseIdentifier19= new ASTparseIdentifier();
            openNodeScope(parseIdentifier19);
        }
        Segment segment;
        ParseException parseException443= null;
        int callStackSize444= parsingStack.size();
        try {
            if (first_set$mdx_jj$776$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:776:5
                pushOntoCallStack("parseIdentifier", "cc21/mdx.jj", 776, 5);
                try {
                    segment= parseNameSegment();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== AMP_QUOTED_ID||nextTokenType== AMP_UNQUOTED_ID) {
                // Code for NonTerminal specified at cc21/mdx.jj:778:5
                pushOntoCallStack("parseIdentifier", "cc21/mdx.jj", 778, 5);
                try {
                    segment= parseKeyIdentifier();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("parseIdentifier", "cc21/mdx.jj", 776, 5);
                throw new ParseException(this, first_set$mdx_jj$776$5$, parsingStack);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:780:3
            return segment;
        }
        catch(ParseException e) {
            parseException443= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize444);
            if (parseIdentifier19!=null) {
                if (parseException443== null) {
                    closeNodeScope(parseIdentifier19, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNameSegment_FIRST_SET= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    // cc21/mdx.jj:785:1
    final public NameSegment parseNameSegment() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseNameSegment";
        // Code for ExpansionChoice specified at cc21/mdx.jj:790:3
        ASTparseNameSegment parseNameSegment20= null;
        if (buildTree) {
            parseNameSegment20= new ASTparseNameSegment();
            openNodeScope(parseNameSegment20);
        }
        String id;
        ParseException parseException465= null;
        int callStackSize466= parsingStack.size();
        try {
            if (nextTokenType()== DIMENSION||nextTokenType== PROPERTIES) {
                // Code for NonTerminal specified at cc21/mdx.jj:790:3
                pushOntoCallStack("parseNameSegment", "cc21/mdx.jj", 790, 3);
                try {
                    id= parseKeyword();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:791:3
                // Allow a non-reserved keyword to be converted back into an identifier
                // if it is not in a context where it is meaningful.
                return new NameSegment(id, Segment.Quoting.UNQUOTED);
            }
            else if (nextTokenType()== ID) {
                // Code for RegexpRef specified at cc21/mdx.jj:796:3
                consumeToken(ID);
                // Code for CodeBlock specified at cc21/mdx.jj:797:3
                return new NameSegment(getToken(0).getImage(), Segment.Quoting.UNQUOTED);
            }
            else if (nextTokenType()== ATSIGN) {
                // Code for RegexpRef specified at cc21/mdx.jj:800:3
                consumeToken(ATSIGN);
                // Code for RegexpRef specified at cc21/mdx.jj:800:14
                consumeToken(ID);
                // Code for CodeBlock specified at cc21/mdx.jj:801:3
                return new NameSegment("@"+getToken(0).getImage(), Segment.Quoting.UNQUOTED);
            }
            else if (nextTokenType()== QUOTED_ID) {
                // Code for RegexpRef specified at cc21/mdx.jj:804:3
                consumeToken(QUOTED_ID);
                // Code for CodeBlock specified at cc21/mdx.jj:805:3
                return new NameSegment(stripQuotes(getToken(0).getImage(), "[", "]", "]]"), Segment.Quoting.QUOTED);
            }
            else  {
                pushOntoCallStack("parseNameSegment", "cc21/mdx.jj", 790, 3);
                throw new ParseException(this, parseNameSegment_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException465= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize466);
            if (parseNameSegment20!=null) {
                if (parseException465== null) {
                    closeNodeScope(parseNameSegment20, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:813:1
    final public// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
    KeySegment parseKeyIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseKeyIdentifier";
        ASTparseKeyIdentifier parseKeyIdentifier21= null;
        if (buildTree) {
            parseKeyIdentifier21= new ASTparseKeyIdentifier();
            openNodeScope(parseKeyIdentifier21);
        }
        List<NameSegment> list= new ArrayList<NameSegment> ();
        NameSegment key;
        ParseException parseException507= null;
        int callStackSize508= parsingStack.size();
        try {
            // Code for OneOrMore specified at cc21/mdx.jj:819:3
            while (true) {
                // Code for NonTerminal specified at cc21/mdx.jj:820:5
                pushOntoCallStack("parseKeyIdentifier", "cc21/mdx.jj", 820, 5);
                try {
                    key= parseAmpId();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:821:5
                list.add(key);
                if (!(nextTokenType()== AMP_QUOTED_ID||nextTokenType== AMP_UNQUOTED_ID)) break;
            }
            // Code for CodeBlock specified at cc21/mdx.jj:825:3
            return new KeySegment(list);
        }
        catch(ParseException e) {
            parseException507= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize508);
            if (parseKeyIdentifier21!=null) {
                if (parseException507== null) {
                    closeNodeScope(parseKeyIdentifier21, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseAmpId_FIRST_SET= tokenTypeSet(AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    // cc21/mdx.jj:830:1
    final public NameSegment parseAmpId() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseAmpId";
        // Code for ExpansionChoice specified at cc21/mdx.jj:834:3
        ASTparseAmpId parseAmpId22= null;
        if (buildTree) {
            parseAmpId22= new ASTparseAmpId();
            openNodeScope(parseAmpId22);
        }
        ParseException parseException525= null;
        int callStackSize526= parsingStack.size();
        try {
            if (nextTokenType()== AMP_QUOTED_ID) {
                // Code for RegexpRef specified at cc21/mdx.jj:834:3
                consumeToken(AMP_QUOTED_ID);
                // Code for CodeBlock specified at cc21/mdx.jj:835:3
                return new NameSegment(stripQuotes(getToken(0).getImage(), "&[", "]", "]]"), Segment.Quoting.QUOTED);
            }
            else if (nextTokenType()== AMP_UNQUOTED_ID) {
                // Code for RegexpRef specified at cc21/mdx.jj:841:3
                consumeToken(AMP_UNQUOTED_ID);
                // Code for CodeBlock specified at cc21/mdx.jj:842:3
                return new NameSegment(getToken(0).getImage().substring(1), Segment.Quoting.UNQUOTED);
            }
            else  {
                pushOntoCallStack("parseAmpId", "cc21/mdx.jj", 834, 3);
                throw new ParseException(this, parseAmpId_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException525= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize526);
            if (parseAmpId22!=null) {
                if (parseException525== null) {
                    closeNodeScope(parseAmpId22, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseKeyword_FIRST_SET= tokenTypeSet(DIMENSION, PROPERTIES);
    // cc21/mdx.jj:851:1
    final public// a keyword (unlike a reserved word) can be converted back into an
    // identifier in some contexts
    String parseKeyword() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseKeyword";
        // Code for ExpansionChoice specified at cc21/mdx.jj:855:3
        ASTparseKeyword parseKeyword23= null;
        if (buildTree) {
            parseKeyword23= new ASTparseKeyword();
            openNodeScope(parseKeyword23);
        }
        ParseException parseException546= null;
        int callStackSize547= parsingStack.size();
        try {
            if (nextTokenType()== DIMENSION) {
                // Code for RegexpRef specified at cc21/mdx.jj:855:3
                consumeToken(DIMENSION);
                // Code for CodeBlock specified at cc21/mdx.jj:856:3
                return"Dimension";
            }
            else if (nextTokenType()== PROPERTIES) {
                // Code for RegexpRef specified at cc21/mdx.jj:859:3
                consumeToken(PROPERTIES);
                // Code for CodeBlock specified at cc21/mdx.jj:860:3
                return"Properties";
            }
            else  {
                pushOntoCallStack("parseKeyword", "cc21/mdx.jj", 855, 3);
                throw new ParseException(this, parseKeyword_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException546= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize547);
            if (parseKeyword23!=null) {
                if (parseException546== null) {
                    closeNodeScope(parseKeyword23, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:865:1
    final public CompoundId parseCompoundId() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseCompoundId";
        ASTparseCompoundId parseCompoundId24= null;
        if (buildTree) {
            parseCompoundId24= new ASTparseCompoundId();
            openNodeScope(parseCompoundId24);
        }
        CompoundId compoundId;
        List<Segment> list= new ArrayList<Segment> ();
        Segment s;
        ParseException parseException567= null;
        int callStackSize568= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:872:3
            pushOntoCallStack("parseCompoundId", "cc21/mdx.jj", 872, 3);
            try {
                s= parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:873:3
            list.add(s);
            // Code for ZeroOrMore specified at cc21/mdx.jj:876:3
            while (true) {
                if (!(scan$mdx_jj$877$5())) break;
                // Code for RegexpRef specified at cc21/mdx.jj:878:5
                consumeToken(DOT);
                // Code for NonTerminal specified at cc21/mdx.jj:878:13
                pushOntoCallStack("parseCompoundId", "cc21/mdx.jj", 878, 13);
                try {
                    s= parseIdentifier();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:879:5
                list.add(s);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:883:3
            return new CompoundId(list);
        }
        catch(ParseException e) {
            parseException567= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize568);
            if (parseCompoundId24!=null) {
                if (parseException567== null) {
                    closeNodeScope(parseCompoundId24, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:890:1
    final public// ----------------------------------------------------------------------------
    // Expressions
    Expression unaliasedExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "unaliasedExpression";
        ASTunaliasedExpression unaliasedExpression25= null;
        if (buildTree) {
            unaliasedExpression25= new ASTunaliasedExpression();
            openNodeScope(unaliasedExpression25);
        }
        Expression x, y;
        ParseException parseException594= null;
        int callStackSize595= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:895:3
            pushOntoCallStack("unaliasedExpression", "cc21/mdx.jj", 895, 3);
            try {
                x= term5();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:896:3
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.jj:897:5
                if (nextTokenType()== OR) {
                    // Code for RegexpRef specified at cc21/mdx.jj:897:5
                    consumeToken(OR);
                    // Code for NonTerminal specified at cc21/mdx.jj:897:12
                    pushOntoCallStack("unaliasedExpression", "cc21/mdx.jj", 897, 12);
                    try {
                        y= term5();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:898:5
                    x= new CallExpression("OR", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== XOR) {
                    // Code for RegexpRef specified at cc21/mdx.jj:904:5
                    consumeToken(XOR);
                    // Code for NonTerminal specified at cc21/mdx.jj:904:13
                    pushOntoCallStack("unaliasedExpression", "cc21/mdx.jj", 904, 13);
                    try {
                        y= term5();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:905:5
                    x= new CallExpression("XOR", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== COLON) {
                    // Code for RegexpRef specified at cc21/mdx.jj:913:5
                    consumeToken(COLON);
                    // Code for NonTerminal specified at cc21/mdx.jj:913:15
                    pushOntoCallStack("unaliasedExpression", "cc21/mdx.jj", 913, 15);
                    try {
                        y= term5();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:914:5
                    x= new CallExpression(":", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else  {
                    break;
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:921:3
            return x;
        }
        catch(ParseException e) {
            parseException594= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize595);
            if (unaliasedExpression25!=null) {
                if (parseException594== null) {
                    closeNodeScope(unaliasedExpression25, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:926:1
    final public Expression term5() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term5";
        ASTterm5 term526= null;
        if (buildTree) {
            term526= new ASTterm5();
            openNodeScope(term526);
        }
        Expression x, y;
        ParseException parseException645= null;
        int callStackSize646= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:931:3
            pushOntoCallStack("term5", "cc21/mdx.jj", 931, 3);
            try {
                x= term4();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:932:3
            while (true) {
                if (!(nextTokenType()== AND)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:933:5
                consumeToken(AND);
                // Code for NonTerminal specified at cc21/mdx.jj:933:13
                pushOntoCallStack("term5", "cc21/mdx.jj", 933, 13);
                try {
                    y= term4();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:934:5
                x= new CallExpression("AND", CallExpression.Type.Term_Infix, List.of(x, y));
            }
            // Code for CodeBlock specified at cc21/mdx.jj:941:3
            return x;
        }
        catch(ParseException e) {
            parseException645= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize646);
            if (term526!=null) {
                if (parseException645== null) {
                    closeNodeScope(term526, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> term4_FIRST_SET= term4_FIRST_SET_init();
    static private EnumSet<TokenType> term4_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // cc21/mdx.jj:946:1
    final public Expression term4() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term4";
        // Code for ExpansionChoice specified at cc21/mdx.jj:951:3
        ASTterm4 term427= null;
        if (buildTree) {
            term427= new ASTterm4();
            openNodeScope(term427);
        }
        Expression x;
        ParseException parseException669= null;
        int callStackSize670= parsingStack.size();
        try {
            if (first_set$mdx_jj$951$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:951:3
                pushOntoCallStack("term4", "cc21/mdx.jj", 951, 3);
                try {
                    x= term3();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:952:3
                return x;
            }
            else if (nextTokenType()== NOT) {
                // Code for RegexpRef specified at cc21/mdx.jj:955:3
                consumeToken(NOT);
                // Code for NonTerminal specified at cc21/mdx.jj:955:11
                pushOntoCallStack("term4", "cc21/mdx.jj", 955, 11);
                try {
                    x= term4();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:956:3
                return new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(x));
            }
            else  {
                pushOntoCallStack("term4", "cc21/mdx.jj", 951, 3);
                throw new ParseException(this, term4_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException669= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize670);
            if (term427!=null) {
                if (parseException669== null) {
                    closeNodeScope(term427, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:964:1
    final public Expression term3() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term3";
        ASTterm3 term328= null;
        if (buildTree) {
            term328= new ASTterm3();
            openNodeScope(term328);
        }
        Expression x, y;
        Token op;
        ParseException parseException693= null;
        int callStackSize694= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:970:3
            pushOntoCallStack("term3", "cc21/mdx.jj", 970, 3);
            try {
                x= term2();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:971:3
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.jj:973:5
                if (first_set$mdx_jj$973$5.contains(nextTokenType())) {
                    if (nextTokenType()== EQ) {
                        // Code for RegexpRef specified at cc21/mdx.jj:974:7
                        consumeToken(EQ);
                        // Code for CodeBlock specified at cc21/mdx.jj:975:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== NE) {
                        // Code for RegexpRef specified at cc21/mdx.jj:978:7
                        consumeToken(NE);
                        // Code for CodeBlock specified at cc21/mdx.jj:979:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== LT) {
                        // Code for RegexpRef specified at cc21/mdx.jj:982:7
                        consumeToken(LT);
                        // Code for CodeBlock specified at cc21/mdx.jj:983:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== GT) {
                        // Code for RegexpRef specified at cc21/mdx.jj:986:7
                        consumeToken(GT);
                        // Code for CodeBlock specified at cc21/mdx.jj:987:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== LE) {
                        // Code for RegexpRef specified at cc21/mdx.jj:990:7
                        consumeToken(LE);
                        // Code for CodeBlock specified at cc21/mdx.jj:991:7
                        op= getToken(0);
                    }
                    else if (nextTokenType()== GE) {
                        // Code for RegexpRef specified at cc21/mdx.jj:994:7
                        consumeToken(GE);
                        // Code for CodeBlock specified at cc21/mdx.jj:995:7
                        op= getToken(0);
                    }
                    else  {
                        pushOntoCallStack("term3", "cc21/mdx.jj", 974, 7);
                        throw new ParseException(this, first_set$mdx_jj$974$7, parsingStack);
                    }
                    // Code for NonTerminal specified at cc21/mdx.jj:999:5
                    pushOntoCallStack("term3", "cc21/mdx.jj", 999, 5);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1000:5
                    x= new CallExpression(op.getImage(), CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (scan$mdx_jj$1009$5()) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1010:5
                    consumeToken(IS);
                    // Code for RegexpRef specified at cc21/mdx.jj:1010:12
                    consumeToken(NULL);
                    // Code for CodeBlock specified at cc21/mdx.jj:1011:5
                    x= new CallExpression("IS NULL", CallExpression.Type.Term_Postfix, List.of(x));
                }
                else if (scan$mdx_jj$1019$5()) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1020:5
                    consumeToken(IS);
                    // Code for NonTerminal specified at cc21/mdx.jj:1020:12
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1020, 12);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1021:5
                    x= new CallExpression("IS", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== IS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1027:5
                    consumeToken(IS);
                    // Code for RegexpRef specified at cc21/mdx.jj:1027:12
                    consumeToken(EMPTY);
                    // Code for CodeBlock specified at cc21/mdx.jj:1028:5
                    x= new CallExpression("IS EMPTY", CallExpression.Type.Term_Postfix, List.of(x));
                }
                else if (nextTokenType()== MATCHES) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1032:5
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at cc21/mdx.jj:1032:17
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1032, 17);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1033:5
                    x= new CallExpression("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (scan$mdx_jj$1039$5()) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1040:5
                    consumeToken(NOT);
                    // Code for RegexpRef specified at cc21/mdx.jj:1040:13
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at cc21/mdx.jj:1040:25
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1040, 25);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1041:5
                    x= new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpression("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y))));
                }
                else if (nextTokenType()== IN) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1052:5
                    consumeToken(IN);
                    // Code for NonTerminal specified at cc21/mdx.jj:1052:12
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1052, 12);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1053:5
                    x= new CallExpression("IN", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== NOT) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1059:5
                    consumeToken(NOT);
                    // Code for RegexpRef specified at cc21/mdx.jj:1059:13
                    consumeToken(IN);
                    // Code for NonTerminal specified at cc21/mdx.jj:1059:20
                    pushOntoCallStack("term3", "cc21/mdx.jj", 1059, 20);
                    try {
                        y= term2();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1060:5
                    x= new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpression("IN", CallExpression.Type.Term_Infix, List.of(x, y))));
                }
                else  {
                    break;
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1072:3
            return x;
        }
        catch(ParseException e) {
            parseException693= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize694);
            if (term328!=null) {
                if (parseException693== null) {
                    closeNodeScope(term328, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1077:1
    final public Expression term2() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term2";
        ASTterm2 term229= null;
        if (buildTree) {
            term229= new ASTterm2();
            openNodeScope(term229);
        }
        Expression x, y;
        ParseException parseException865= null;
        int callStackSize866= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1082:3
            pushOntoCallStack("term2", "cc21/mdx.jj", 1082, 3);
            try {
                x= term();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1083:3
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.jj:1084:5
                if (nextTokenType()== PLUS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1084:5
                    consumeToken(PLUS);
                    // Code for NonTerminal specified at cc21/mdx.jj:1084:14
                    pushOntoCallStack("term2", "cc21/mdx.jj", 1084, 14);
                    try {
                        y= term();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1085:5
                    x= new CallExpression("+", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== MINUS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1091:5
                    consumeToken(MINUS);
                    // Code for NonTerminal specified at cc21/mdx.jj:1091:15
                    pushOntoCallStack("term2", "cc21/mdx.jj", 1091, 15);
                    try {
                        y= term();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1092:5
                    x= new CallExpression("-", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== CONCAT) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1098:5
                    consumeToken(CONCAT);
                    // Code for NonTerminal specified at cc21/mdx.jj:1098:16
                    pushOntoCallStack("term2", "cc21/mdx.jj", 1098, 16);
                    try {
                        y= term();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1099:5
                    x= new CallExpression("||", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else  {
                    break;
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1106:3
            return x;
        }
        catch(ParseException e) {
            parseException865= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize866);
            if (term229!=null) {
                if (parseException865== null) {
                    closeNodeScope(term229, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1111:1
    final public Expression term() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "term";
        ASTterm term30= null;
        if (buildTree) {
            term30= new ASTterm();
            openNodeScope(term30);
        }
        Expression x, y;
        ParseException parseException916= null;
        int callStackSize917= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1116:3
            pushOntoCallStack("term", "cc21/mdx.jj", 1116, 3);
            try {
                x= factor();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1117:3
            while (true) {
                // Code for ExpansionChoice specified at cc21/mdx.jj:1118:5
                if (nextTokenType()== ASTERISK) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1118:5
                    consumeToken(ASTERISK);
                    // Code for NonTerminal specified at cc21/mdx.jj:1118:18
                    pushOntoCallStack("term", "cc21/mdx.jj", 1118, 18);
                    try {
                        y= factor();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1119:5
                    x= new CallExpression("*", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else if (nextTokenType()== SOLIDUS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1125:5
                    consumeToken(SOLIDUS);
                    // Code for NonTerminal specified at cc21/mdx.jj:1125:17
                    pushOntoCallStack("term", "cc21/mdx.jj", 1125, 17);
                    try {
                        y= factor();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1126:5
                    x= new CallExpression("/", CallExpression.Type.Term_Infix, List.of(x, y));
                }
                else  {
                    break;
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1133:3
            return x;
        }
        catch(ParseException e) {
            parseException916= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize917);
            if (term30!=null) {
                if (parseException916== null) {
                    closeNodeScope(term30, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> factor_FIRST_SET= factor_FIRST_SET_init();
    static private EnumSet<TokenType> factor_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // cc21/mdx.jj:1138:1
    final public Expression factor() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "factor";
        // Code for ExpansionChoice specified at cc21/mdx.jj:1143:3
        ASTfactor factor31= null;
        if (buildTree) {
            factor31= new ASTfactor();
            openNodeScope(factor31);
        }
        Expression p;
        ParseException parseException955= null;
        int callStackSize956= parsingStack.size();
        try {
            if (first_set$mdx_jj$1143$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:1143:3
                pushOntoCallStack("factor", "cc21/mdx.jj", 1143, 3);
                try {
                    p= primary();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1144:3
                return p;
            }
            else if (nextTokenType()== PLUS) {
                // Code for RegexpRef specified at cc21/mdx.jj:1147:3
                consumeToken(PLUS);
                // Code for NonTerminal specified at cc21/mdx.jj:1147:12
                pushOntoCallStack("factor", "cc21/mdx.jj", 1147, 12);
                try {
                    p= primary();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1148:3
                return p;
            }
            else if (nextTokenType()== MINUS) {
                // Code for RegexpRef specified at cc21/mdx.jj:1151:3
                consumeToken(MINUS);
                // Code for NonTerminal specified at cc21/mdx.jj:1151:13
                pushOntoCallStack("factor", "cc21/mdx.jj", 1151, 13);
                try {
                    p= primary();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1152:3
                return new CallExpression("-", CallExpression.Type.Term_Prefix, List.of(p));
            }
            else if (nextTokenType()== EXISTING) {
                // Code for RegexpRef specified at cc21/mdx.jj:1158:3
                consumeToken(EXISTING);
                // Code for NonTerminal specified at cc21/mdx.jj:1158:16
                pushOntoCallStack("factor", "cc21/mdx.jj", 1158, 16);
                try {
                    p= primary();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1159:3
                return new CallExpression("Existing", CallExpression.Type.Term_Prefix, List.of(p));
            }
            else  {
                pushOntoCallStack("factor", "cc21/mdx.jj", 1143, 3);
                throw new ParseException(this, factor_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException955= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize956);
            if (factor31!=null) {
                if (parseException955== null) {
                    closeNodeScope(factor31, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1167:1
    final public Expression primary() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "primary";
        ASTprimary primary32= null;
        if (buildTree) {
            primary32= new ASTprimary();
            openNodeScope(primary32);
        }
        Expression expression;
        ParseException parseException1003= null;
        int callStackSize1004= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1172:3
            pushOntoCallStack("primary", "cc21/mdx.jj", 1172, 3);
            try {
                expression= atom();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1173:3
            while (true) {
                if (!(nextTokenType()== DOT)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:1174:5
                consumeToken(DOT);
                // Code for NonTerminal specified at cc21/mdx.jj:1174:13
                pushOntoCallStack("primary", "cc21/mdx.jj", 1174, 13);
                try {
                    expression= segmentOrFuncall(expression);
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1176:3
            return expression;
        }
        catch(ParseException e) {
            parseException1003= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1004);
            if (primary32!=null) {
                if (parseException1003== null) {
                    closeNodeScope(primary32, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1181:1
    final public Expression segmentOrFuncall(Expression left) {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "segmentOrFuncall";
        ASTsegmentOrFuncall segmentOrFuncall33= null;
        if (buildTree) {
            segmentOrFuncall33= new ASTsegmentOrFuncall();
            openNodeScope(segmentOrFuncall33);
        }
        Segment segment;
        List<Expression> argList= null;
        ParseException parseException1024= null;
        int callStackSize1025= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1187:3
            pushOntoCallStack("segmentOrFuncall", "cc21/mdx.jj", 1187, 3);
            try {
                segment= parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:1188:3
            if (nextTokenType()== LPAREN) {
                // Code for RegexpRef specified at cc21/mdx.jj:1189:5
                consumeToken(LPAREN);
                if (scan$mdx_jj$1191$7()) {
                    // Code for CodeBlock specified at cc21/mdx.jj:1192:7
                    argList= Collections.emptyList();
                }
                else  {
                    // Code for NonTerminal specified at cc21/mdx.jj:1196:7
                    pushOntoCallStack("segmentOrFuncall", "cc21/mdx.jj", 1196, 7);
                    try {
                        argList= expOrEmptyList();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1198:5
                consumeToken(RPAREN);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1200:3
            return createCall(left, segment, argList);
        }
        catch(ParseException e) {
            parseException1024= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1025);
            if (segmentOrFuncall33!=null) {
                if (parseException1024== null) {
                    closeNodeScope(segmentOrFuncall33, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNumericLiteral_FIRST_SET= tokenTypeSet(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);
    // cc21/mdx.jj:1205:1
    final public NumericLiteral parseNumericLiteral() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseNumericLiteral";
        // Code for ExpansionChoice specified at cc21/mdx.jj:1209:3
        ASTparseNumericLiteral parseNumericLiteral34= null;
        if (buildTree) {
            parseNumericLiteral34= new ASTparseNumericLiteral();
            openNodeScope(parseNumericLiteral34);
        }
        ParseException parseException1061= null;
        int callStackSize1062= parsingStack.size();
        try {
            if (nextTokenType()== DECIMAL_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.jj:1209:3
                consumeToken(DECIMAL_NUMERIC_LITERAL);
                // Code for CodeBlock specified at cc21/mdx.jj:1210:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            }
            else if (nextTokenType()== UNSIGNED_INTEGER_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.jj:1213:3
                consumeToken(UNSIGNED_INTEGER_LITERAL);
                // Code for CodeBlock specified at cc21/mdx.jj:1214:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            }
            else if (nextTokenType()== APPROX_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at cc21/mdx.jj:1217:3
                consumeToken(APPROX_NUMERIC_LITERAL);
                // Code for CodeBlock specified at cc21/mdx.jj:1218:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            }
            else  {
                pushOntoCallStack("parseNumericLiteral", "cc21/mdx.jj", 1209, 3);
                throw new ParseException(this, parseNumericLiteral_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1061= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1062);
            if (parseNumericLiteral34!=null) {
                if (parseException1061== null) {
                    closeNodeScope(parseNumericLiteral34, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> atom_FIRST_SET= atom_FIRST_SET_init();
    static private EnumSet<TokenType> atom_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // cc21/mdx.jj:1223:1
    final public Expression atom() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "atom";
        // Code for ExpansionChoice specified at cc21/mdx.jj:1230:3
        ASTatom atom35= null;
        if (buildTree) {
            atom35= new ASTatom();
            openNodeScope(atom35);
        }
        Expression expression;
        NameSegment segment;
        List<Expression> expressions;
        ParseException parseException1091= null;
        int callStackSize1092= parsingStack.size();
        try {
            if (nextTokenType()== SINGLE_QUOTED_STRING) {
                // Code for RegexpRef specified at cc21/mdx.jj:1230:3
                consumeToken(SINGLE_QUOTED_STRING);
                // Code for CodeBlock specified at cc21/mdx.jj:1231:3
                return new StringLiteral(stripQuotes(getToken(0).getImage(), "'", "'", "''"));
            }
            else if (nextTokenType()== DOUBLE_QUOTED_STRING) {
                // Code for RegexpRef specified at cc21/mdx.jj:1234:3
                consumeToken(DOUBLE_QUOTED_STRING);
                // Code for CodeBlock specified at cc21/mdx.jj:1235:3
                return new StringLiteral(stripQuotes(getToken(0).getImage(), '"'+"", '"'+"", '"'+""+'"'));
            }
            else if (nextTokenType()== UNSIGNED_INTEGER_LITERAL||nextTokenType== APPROX_NUMERIC_LITERAL||nextTokenType== DECIMAL_NUMERIC_LITERAL) {
                // Code for NonTerminal specified at cc21/mdx.jj:1238:3
                pushOntoCallStack("atom", "cc21/mdx.jj", 1238, 3);
                try {
                    expression= parseNumericLiteral();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1239:3
                return expression;
            }
            else if (nextTokenType()== NULL) {
                // Code for RegexpRef specified at cc21/mdx.jj:1242:3
                consumeToken(NULL);
                // Code for CodeBlock specified at cc21/mdx.jj:1243:3
                return NullLiteral.SINGLETON;
            }
            else if (nextTokenType()== CAST) {
                // Code for RegexpRef specified at cc21/mdx.jj:1246:3
                consumeToken(CAST);
                // Code for RegexpRef specified at cc21/mdx.jj:1246:12
                consumeToken(LPAREN);
                // Code for NonTerminal specified at cc21/mdx.jj:1246:23
                pushOntoCallStack("atom", "cc21/mdx.jj", 1246, 23);
                try {
                    expression= unaliasedExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1247:3
                consumeToken(AS);
                // Code for NonTerminal specified at cc21/mdx.jj:1247:10
                pushOntoCallStack("atom", "cc21/mdx.jj", 1247, 10);
                try {
                    segment= parseNameSegment();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1247:39
                consumeToken(RPAREN);
                // Code for CodeBlock specified at cc21/mdx.jj:1248:3
                return new CallExpression("CAST", CallExpression.Type.Cast, List.of(expression, new SymbolLiteral(segment.name())));
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpRef specified at cc21/mdx.jj:1256:3
                consumeToken(LPAREN);
                // Code for NonTerminal specified at cc21/mdx.jj:1256:14
                pushOntoCallStack("atom", "cc21/mdx.jj", 1256, 14);
                try {
                    expressions= expList();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1256:38
                consumeToken(RPAREN);
                // Code for CodeBlock specified at cc21/mdx.jj:1257:3
                // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
                // are just expressions.
                return new CallExpression("()", CallExpression.Type.Parentheses, expressions);
            }
            else if (nextTokenType()== LBRACE) {
                // Code for RegexpRef specified at cc21/mdx.jj:1265:3
                consumeToken(LBRACE);
                if (scan$mdx_jj$1267$5()) {
                    // Code for CodeBlock specified at cc21/mdx.jj:1268:5
                    expressions= Collections.emptyList();
                }
                else if (first_set$mdx_jj$1272$5.contains(nextTokenType())) {
                    // Code for NonTerminal specified at cc21/mdx.jj:1272:5
                    pushOntoCallStack("atom", "cc21/mdx.jj", 1272, 5);
                    try {
                        expressions= expList();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else  {
                    pushOntoCallStack("atom", "cc21/mdx.jj", 1267, 5);
                    throw new ParseException(this, first_set$mdx_jj$1267$5, parsingStack);
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1274:3
                consumeToken(RBRACE);
                // Code for CodeBlock specified at cc21/mdx.jj:1275:3
                return new CallExpression("{}", CallExpression.Type.Braces, expressions);
            }
            else if (nextTokenType()== CASE) {
                // Code for NonTerminal specified at cc21/mdx.jj:1279:3
                pushOntoCallStack("atom", "cc21/mdx.jj", 1279, 3);
                try {
                    expression= caseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1280:3
                return expression;
            }
            else if (first_set$mdx_jj$1286$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:1286:3
                pushOntoCallStack("atom", "cc21/mdx.jj", 1286, 3);
                try {
                    // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
                    // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
                    segment= parseNameSegment();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at cc21/mdx.jj:1287:3
                while (true) {
                    if (!(nextTokenType()== BANG)) break;
                    // Code for RegexpRef specified at cc21/mdx.jj:1288:5
                    consumeToken(BANG);
                    // Code for NonTerminal specified at cc21/mdx.jj:1288:14
                    pushOntoCallStack("atom", "cc21/mdx.jj", 1288, 14);
                    try {
                        segment= parseNameSegment();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at cc21/mdx.jj:1289:5
                    // We support the syntax for qualifying function names with package
                    // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
                    // but currently we ignore the qualifiers. The previous example is
                    // equivalent to 'foo(a, b)'.
                }
                if (nextTokenType()== LPAREN) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1297:5
                    consumeToken(LPAREN);
                    if (scan$mdx_jj$1299$7()) {
                        // Code for CodeBlock specified at cc21/mdx.jj:1300:7
                        expressions= Collections.emptyList();
                    }
                    else  {
                        // Code for NonTerminal specified at cc21/mdx.jj:1304:7
                        pushOntoCallStack("atom", "cc21/mdx.jj", 1304, 7);
                        try {
                            expressions= expOrEmptyList();
                        }
                        finally {
                            popCallStack();
                        }
                    }
                    // Code for RegexpRef specified at cc21/mdx.jj:1306:5
                    consumeToken(RPAREN);
                }
                else  {
                    // Code for CodeBlock specified at cc21/mdx.jj:1308:16
                    expressions= null;
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1312:3
                return createCall(null, segment, expressions);
            }
            else  {
                pushOntoCallStack("atom", "cc21/mdx.jj", 1230, 3);
                throw new ParseException(this, atom_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1091= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1092);
            if (atom35!=null) {
                if (parseException1091== null) {
                    closeNodeScope(atom35, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1317:1
    final public Expression caseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "caseExpression";
        ASTcaseExpression caseExpression36= null;
        if (buildTree) {
            caseExpression36= new ASTcaseExpression();
            openNodeScope(caseExpression36);
        }
        Expression expression, expression2;
        List<Expression> expressions= new ArrayList<Expression> ();
        boolean match= false;
        ParseException parseException1265= null;
        int callStackSize1266= parsingStack.size();
        try {
            // Code for RegexpRef specified at cc21/mdx.jj:1324:3
            consumeToken(CASE);
            // Code for ZeroOrOne specified at cc21/mdx.jj:1325:3
            if (first_set$mdx_jj$1326$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:1326:5
                pushOntoCallStack("caseExpression", "cc21/mdx.jj", 1326, 5);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1327:5
                match= true;
                expressions.add(expression);
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1332:3
            while (true) {
                if (!(nextTokenType()== WHEN)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:1333:5
                consumeToken(WHEN);
                // Code for NonTerminal specified at cc21/mdx.jj:1333:14
                pushOntoCallStack("caseExpression", "cc21/mdx.jj", 1333, 14);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1333:45
                consumeToken(THEN);
                // Code for NonTerminal specified at cc21/mdx.jj:1333:54
                pushOntoCallStack("caseExpression", "cc21/mdx.jj", 1333, 54);
                try {
                    expression2= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1334:5
                expressions.add(expression);
                expressions.add(expression2);
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:1339:3
            if (nextTokenType()== ELSE) {
                // Code for RegexpRef specified at cc21/mdx.jj:1340:5
                consumeToken(ELSE);
                // Code for NonTerminal specified at cc21/mdx.jj:1340:14
                pushOntoCallStack("caseExpression", "cc21/mdx.jj", 1340, 14);
                try {
                    expression= parseExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1341:5
                expressions.add(expression);
            }
            // Code for RegexpRef specified at cc21/mdx.jj:1345:3
            consumeToken(END);
            // Code for CodeBlock specified at cc21/mdx.jj:1346:3
            if (match) {
                return new CallExpression("_CaseMatch", CallExpression.Type.Term_Case, expressions);
            }
            else  {
                return new CallExpression("_CaseTest", CallExpression.Type.Term_Case, expressions);
            }
        }
        catch(ParseException e) {
            parseException1265= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1266);
            if (caseExpression36!=null) {
                if (parseException1265== null) {
                    closeNodeScope(caseExpression36, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1360:1
    final public CellProperty parseCellProperty() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseCellProperty";
        ASTparseCellProperty parseCellProperty37= null;
        if (buildTree) {
            parseCellProperty37= new ASTparseCellProperty();
            openNodeScope(parseCellProperty37);
        }
        ParseException parseException1325= null;
        int callStackSize1326= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1363:3
            pushOntoCallStack("parseCellProperty", "cc21/mdx.jj", 1363, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1364:3
            return new CellProperty(List.of());
        }
        catch(ParseException e) {
            parseException1325= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1326);
            if (parseCellProperty37!=null) {
                if (parseException1325== null) {
                    closeNodeScope(parseCellProperty37, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1369:1
    final public CreateSetBodyClause parseCreateSetBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseCreateSetBodyClause";
        ASTparseCreateSetBodyClause parseCreateSetBodyClause38= null;
        if (buildTree) {
            parseCreateSetBodyClause38= new ASTparseCreateSetBodyClause();
            openNodeScope(parseCreateSetBodyClause38);
        }
        ParseException parseException1334= null;
        int callStackSize1335= parsingStack.size();
        try {
            // Code for NonTerminal specified at cc21/mdx.jj:1372:3
            pushOntoCallStack("parseCreateSetBodyClause", "cc21/mdx.jj", 1372, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpRef specified at cc21/mdx.jj:1372:21
            consumeToken(AS);
            // Code for NonTerminal specified at cc21/mdx.jj:1372:28
            pushOntoCallStack("parseCreateSetBodyClause", "cc21/mdx.jj", 1372, 28);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1373:3
            return new CreateSetBodyClause();
        }
        catch(ParseException e) {
            parseException1334= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1335);
            if (parseCreateSetBodyClause38!=null) {
                if (parseException1334== null) {
                    closeNodeScope(parseCreateSetBodyClause38, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1378:1
    final public SelectDimensionPropertyListClause parseSelectDimensionPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectDimensionPropertyListClause";
        ASTparseSelectDimensionPropertyListClause parseSelectDimensionPropertyListClause39= null;
        if (buildTree) {
            parseSelectDimensionPropertyListClause39= new ASTparseSelectDimensionPropertyListClause();
            openNodeScope(parseSelectDimensionPropertyListClause39);
        }
        ParseException parseException1349= null;
        int callStackSize1350= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.jj:1381:3
            if (nextTokenType()== DIMENSION) {
                // Code for RegexpRef specified at cc21/mdx.jj:1381:4
                consumeToken(DIMENSION);
            }
            // Code for RegexpRef specified at cc21/mdx.jj:1381:20
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at cc21/mdx.jj:1382:3
            pushOntoCallStack("parseSelectDimensionPropertyListClause", "cc21/mdx.jj", 1382, 3);
            try {
                parseIdentifier();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at cc21/mdx.jj:1383:3
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpRef specified at cc21/mdx.jj:1384:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at cc21/mdx.jj:1384:15
                pushOntoCallStack("parseSelectDimensionPropertyListClause", "cc21/mdx.jj", 1384, 15);
                try {
                    parseIdentifier();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1386:3
            return new SelectDimensionPropertyListClause();
        }
        catch(ParseException e) {
            parseException1349= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1350);
            if (parseSelectDimensionPropertyListClause39!=null) {
                if (parseException1349== null) {
                    closeNodeScope(parseSelectDimensionPropertyListClause39, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1392:1
    final public// <SelectQueryAxisClause> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
    SelectQueryAxisClause parseSelectQueryAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectQueryAxisClause";
        ASTparseSelectQueryAxisClause parseSelectQueryAxisClause40= null;
        if (buildTree) {
            parseSelectQueryAxisClause40= new ASTparseSelectQueryAxisClause();
            openNodeScope(parseSelectQueryAxisClause40);
        }
        boolean nonEmpty= false;
        SelectDimensionPropertyListClause selectDimensionPropertyListClause= null;
        Expression expression;
        int n;
        Axis axis;
        ParseException parseException1382= null;
        int callStackSize1383= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at cc21/mdx.jj:1401:3
            if (nextTokenType()== NON) {
                // Code for RegexpRef specified at cc21/mdx.jj:1401:4
                consumeToken(NON);
                // Code for RegexpRef specified at cc21/mdx.jj:1401:12
                consumeToken(EMPTY);
                // Code for CodeBlock specified at cc21/mdx.jj:1402:3
                nonEmpty= true;
            }
            // Code for NonTerminal specified at cc21/mdx.jj:1406:3
            pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1406, 3);
            try {
                expression= parseExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at cc21/mdx.jj:1407:3
            if (nextTokenType()== DIMENSION||nextTokenType== PROPERTIES) {
                // Code for NonTerminal specified at cc21/mdx.jj:1408:5
                pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1408, 5);
                try {
                    selectDimensionPropertyListClause= parseSelectDimensionPropertyListClause();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at cc21/mdx.jj:1410:3
            consumeToken(ON);
            if (nextTokenType()== AXIS||nextTokenType== UNSIGNED_INTEGER_LITERAL) {
                if (nextTokenType()== UNSIGNED_INTEGER_LITERAL) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1413:7
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at cc21/mdx.jj:1414:7
                    n= Integer.valueOf(getToken(0).getImage()).intValue();
                }
                else if (nextTokenType()== AXIS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1417:7
                    consumeToken(AXIS);
                    // Code for RegexpRef specified at cc21/mdx.jj:1417:16
                    consumeToken(LPAREN);
                    // Code for RegexpRef specified at cc21/mdx.jj:1417:27
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at cc21/mdx.jj:1418:7
                    n= Integer.valueOf(getToken(0).getImage()).intValue();
                    // Code for RegexpRef specified at cc21/mdx.jj:1421:7
                    consumeToken(RPAREN);
                }
                else  {
                    pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1413, 7);
                    throw new ParseException(this, first_set$mdx_jj$1413$7, parsingStack);
                }
                // Code for CodeBlock specified at cc21/mdx.jj:1423:5
                if (n<0) {
                    throw new IllegalArgumentException("Only axis numbers >= 0 allowed.");
                }
                else  {
                    axis= Axis.create(n);
                }
            }
            else if (first_set$mdx_jj$1434$5.contains(nextTokenType())) {
                if (nextTokenType()== COLUMNS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1435:7
                    consumeToken(COLUMNS);
                    // Code for CodeBlock specified at cc21/mdx.jj:1436:7
                    axis= Axis.COLUMNS;
                }
                else if (nextTokenType()== ROWS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1439:7
                    consumeToken(ROWS);
                    // Code for CodeBlock specified at cc21/mdx.jj:1440:7
                    axis= Axis.ROWS;
                }
                else if (nextTokenType()== PAGES) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1443:7
                    consumeToken(PAGES);
                    // Code for CodeBlock specified at cc21/mdx.jj:1444:7
                    axis= Axis.PAGES;
                }
                else if (nextTokenType()== SECTIONS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1447:7
                    consumeToken(SECTIONS);
                    // Code for CodeBlock specified at cc21/mdx.jj:1448:7
                    axis= Axis.SECTIONS;
                }
                else if (nextTokenType()== CHAPTERS) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1451:7
                    consumeToken(CHAPTERS);
                    // Code for CodeBlock specified at cc21/mdx.jj:1452:7
                    axis= Axis.CHAPTERS;
                }
                else  {
                    pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1435, 7);
                    throw new ParseException(this, first_set$mdx_jj$1435$7, parsingStack);
                }
            }
            else  {
                pushOntoCallStack("parseSelectQueryAxisClause", "cc21/mdx.jj", 1412, 5);
                throw new ParseException(this, first_set$mdx_jj$1412$5, parsingStack);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1457:3
            return new SelectQueryAxisClause(nonEmpty, expression, axis, selectDimensionPropertyListClause);
        }
        catch(ParseException e) {
            parseException1382= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1383);
            if (parseSelectQueryAxisClause40!=null) {
                if (parseException1382== null) {
                    closeNodeScope(parseSelectQueryAxisClause40, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // cc21/mdx.jj:1462:1
    final public SelectSubcubeClause parseSelectSubcubeClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "parseSelectSubcubeClause";
        ASTparseSelectSubcubeClause parseSelectSubcubeClause41= null;
        if (buildTree) {
            parseSelectSubcubeClause41= new ASTparseSelectSubcubeClause();
            openNodeScope(parseSelectSubcubeClause41);
        }
        ParseException parseException1511= null;
        int callStackSize1512= parsingStack.size();
        try {
            if (first_set$mdx_jj$1467$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at cc21/mdx.jj:1467:5
                pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1467, 5);
                try {
                    parseIdentifier();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpRef specified at cc21/mdx.jj:1468:5
                consumeToken(LPAREN);
                // Code for RegexpRef specified at cc21/mdx.jj:1468:16
                consumeToken(SELECT);
                // Code for ZeroOrOne specified at cc21/mdx.jj:1469:5
                if (first_set$mdx_jj$1470$7.contains(nextTokenType())) {
                    // Code for NonTerminal specified at cc21/mdx.jj:1470:7
                    pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1470, 7);
                    try {
                        parseSelectQueryAxisClause();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for ZeroOrMore specified at cc21/mdx.jj:1471:7
                    while (true) {
                        if (!(nextTokenType()== COMMA)) break;
                        // Code for RegexpRef specified at cc21/mdx.jj:1472:9
                        consumeToken(COMMA);
                        // Code for NonTerminal specified at cc21/mdx.jj:1472:19
                        pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1472, 19);
                        try {
                            parseSelectQueryAxisClause();
                        }
                        finally {
                            popCallStack();
                        }
                    }
                }
            }
            else if (nextTokenType()== FROM||nextTokenType== ASTERISK) {
                // Code for ZeroOrOne specified at cc21/mdx.jj:1475:5
                if (nextTokenType()== ASTERISK) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1475:6
                    consumeToken(ASTERISK);
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1476:5
                consumeToken(FROM);
                // Code for NonTerminal specified at cc21/mdx.jj:1476:14
                pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1476, 14);
                try {
                    parseSelectSubcubeClause();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at cc21/mdx.jj:1477:5
                if (nextTokenType()== WHERE) {
                    // Code for RegexpRef specified at cc21/mdx.jj:1478:7
                    consumeToken(WHERE);
                    // Code for NonTerminal specified at cc21/mdx.jj:1478:17
                    pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1478, 17);
                    try {
                        parseExpression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpRef specified at cc21/mdx.jj:1480:5
                consumeToken(RPAREN);
            }
            else  {
                pushOntoCallStack("parseSelectSubcubeClause", "cc21/mdx.jj", 1467, 5);
                throw new ParseException(this, first_set$mdx_jj$1467$5$, parsingStack);
            }
            // Code for CodeBlock specified at cc21/mdx.jj:1482:3
            return new SelectSubcubeClause();
        }
        catch(ParseException e) {
            parseException1511= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1512);
            if (parseSelectSubcubeClause41!=null) {
                if (parseException1511== null) {
                    closeNodeScope(parseSelectSubcubeClause41, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$544$5= tokenTypeSet(MEMBER, SET, CALCULATED);
    static private final EnumSet<TokenType> first_set$mdx_jj$572$5= first_set$mdx_jj$572$5_init();
    static private EnumSet<TokenType> first_set$mdx_jj$572$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$696$3= first_set$mdx_jj$696$3_init();
    static private EnumSet<TokenType> first_set$mdx_jj$696$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$776$5$= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$776$5= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$790$3= tokenTypeSet(DIMENSION, PROPERTIES);
    static private final EnumSet<TokenType> first_set$mdx_jj$820$5= tokenTypeSet(AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$951$3= first_set$mdx_jj$951$3_init();
    static private EnumSet<TokenType> first_set$mdx_jj$951$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$973$5= tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_jj$974$7= tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_jj$1143$3= first_set$mdx_jj$1143$3_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1143$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1238$3= tokenTypeSet(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_jj$1267$5= first_set$mdx_jj$1267$5_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1267$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, RBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1272$5= first_set$mdx_jj$1272$5_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1272$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1286$3= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$1326$5= first_set$mdx_jj$1326$5_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1326$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1412$5= tokenTypeSet(AXIS, CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_jj$1413$7= tokenTypeSet(AXIS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_jj$1434$5= tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);
    static private final EnumSet<TokenType> first_set$mdx_jj$1435$7= tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);
    static private final EnumSet<TokenType> first_set$mdx_jj$1467$5$= first_set$mdx_jj$1467$5$_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1467$5$_init() {
        return tokenTypeSet(DIMENSION, FROM, PROPERTIES, LPAREN, ASTERISK, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    }

    static private final EnumSet<TokenType> first_set$mdx_jj$1467$5= tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_jj$1470$7= first_set$mdx_jj$1470$7_init();
    static private EnumSet<TokenType> first_set$mdx_jj$1470$7_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    private final boolean scanToken(TokenType expectedType) {
        Token peekedToken= nextToken(currentLookaheadToken);
        TokenType type= peekedToken.getType();
        if (type!=expectedType) return false;
        if (remainingLookahead!=UNLIMITED) remainingLookahead--;
        currentLookaheadToken= peekedToken;
        return true;
    }

    private final boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken= nextToken(currentLookaheadToken);
        TokenType type= peekedToken.getType();
        if (!types.contains(type)) return false;
        if (remainingLookahead!=UNLIMITED) remainingLookahead--;
        //     if (type == upToTokenType) remainingLookahead = 0;
        currentLookaheadToken= peekedToken;
        return true;
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:677:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$677$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:677:5
            if (!scanToken(AS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:677:12
            // NonTerminal parseIdentifier at cc21/mdx.jj:677:12
            pushOntoLookaheadStack("parseExpression", "cc21/mdx.jj", 677, 12);
            boolean prevScanToEnd1605= scanToEnd;
            currentLookaheadProduction= "parseIdentifier";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseIdentifier()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1605;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:678:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:696:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$696$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:696:3
            // NonTerminal parseExpression at cc21/mdx.jj:696:3
            pushOntoLookaheadStack("expressionOrEmpty", "cc21/mdx.jj", 696, 3);
            boolean prevScanToEnd1606= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1606;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:697:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:701:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$701$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:701:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:720:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$720$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:720:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:721:5
            // NonTerminal expressionOrEmpty at cc21/mdx.jj:721:5
            pushOntoLookaheadStack("expOrEmptyList", "cc21/mdx.jj", 721, 5);
            boolean prevScanToEnd1607= scanToEnd;
            currentLookaheadProduction= "expressionOrEmpty";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$expressionOrEmpty()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1607;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:722:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:743:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$743$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:743:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:744:5
            // NonTerminal parseExpression at cc21/mdx.jj:744:5
            pushOntoLookaheadStack("expList", "cc21/mdx.jj", 744, 5);
            boolean prevScanToEnd1608= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1608;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:745:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:776:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$776$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:776:5
            // NonTerminal parseNameSegment at cc21/mdx.jj:776:5
            pushOntoLookaheadStack("parseIdentifier", "cc21/mdx.jj", 776, 5);
            boolean prevScanToEnd1610= scanToEnd;
            currentLookaheadProduction= "parseNameSegment";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseNameSegment()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1610;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:778:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$778$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:778:5
            // NonTerminal parseKeyIdentifier at cc21/mdx.jj:778:5
            pushOntoLookaheadStack("parseIdentifier", "cc21/mdx.jj", 778, 5);
            boolean prevScanToEnd1611= scanToEnd;
            currentLookaheadProduction= "parseKeyIdentifier";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseKeyIdentifier()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1611;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:800:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$800$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:800:3
            if (!scanToken(ATSIGN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:800:14
            if (!scanToken(ID)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:801:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:897:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$897$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:897:5
            Token token1613= currentLookaheadToken;
            int remainingLookahead1613= remainingLookahead;
            boolean hitFailure1613= hitFailure;
            if (!check$mdx_jj$897$5$()) {
                currentLookaheadToken= token1613;
                remainingLookahead= remainingLookahead1613;
                hitFailure= hitFailure1613;
                if (!check$mdx_jj$904$5()) {
                    currentLookaheadToken= token1613;
                    remainingLookahead= remainingLookahead1613;
                    hitFailure= hitFailure1613;
                    if (!check$mdx_jj$913$5()) {
                        currentLookaheadToken= token1613;
                        remainingLookahead= remainingLookahead1613;
                        hitFailure= hitFailure1613;
                        return false;
                    }
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:897:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$897$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:897:5
            if (!scanToken(OR)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:897:12
            // NonTerminal term5 at cc21/mdx.jj:897:12
            pushOntoLookaheadStack("unaliasedExpression", "cc21/mdx.jj", 897, 12);
            boolean prevScanToEnd1614= scanToEnd;
            currentLookaheadProduction= "term5";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term5()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1614;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:898:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:904:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$904$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:904:5
            if (!scanToken(XOR)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:904:13
            // NonTerminal term5 at cc21/mdx.jj:904:13
            pushOntoLookaheadStack("unaliasedExpression", "cc21/mdx.jj", 904, 13);
            boolean prevScanToEnd1615= scanToEnd;
            currentLookaheadProduction= "term5";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term5()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1615;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:905:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:913:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$913$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:913:5
            if (!scanToken(COLON)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:913:15
            // NonTerminal term5 at cc21/mdx.jj:913:15
            pushOntoLookaheadStack("unaliasedExpression", "cc21/mdx.jj", 913, 15);
            boolean prevScanToEnd1616= scanToEnd;
            currentLookaheadProduction= "term5";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term5()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1616;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:914:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:933:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$933$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:933:5
            if (!scanToken(AND)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:933:13
            // NonTerminal term4 at cc21/mdx.jj:933:13
            pushOntoLookaheadStack("term5", "cc21/mdx.jj", 933, 13);
            boolean prevScanToEnd1617= scanToEnd;
            currentLookaheadProduction= "term4";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term4()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1617;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:934:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:951:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$951$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:951:3
            // NonTerminal term3 at cc21/mdx.jj:951:3
            pushOntoLookaheadStack("term4", "cc21/mdx.jj", 951, 3);
            boolean prevScanToEnd1618= scanToEnd;
            currentLookaheadProduction= "term3";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$term3()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1618;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:952:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:955:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$955$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:955:3
            if (!scanToken(NOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:955:11
            // NonTerminal term4 at cc21/mdx.jj:955:11
            pushOntoLookaheadStack("term4", "cc21/mdx.jj", 955, 11);
            boolean prevScanToEnd1619= scanToEnd;
            currentLookaheadProduction= "term4";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term4()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1619;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:956:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:973:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$973$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:973:5
            Token token1620= currentLookaheadToken;
            int remainingLookahead1620= remainingLookahead;
            boolean hitFailure1620= hitFailure;
            if (!check$mdx_jj$973$5$()) {
                currentLookaheadToken= token1620;
                remainingLookahead= remainingLookahead1620;
                hitFailure= hitFailure1620;
                if (!check$mdx_jj$1009$5()) {
                    currentLookaheadToken= token1620;
                    remainingLookahead= remainingLookahead1620;
                    hitFailure= hitFailure1620;
                    if (!check$mdx_jj$1019$5()) {
                        currentLookaheadToken= token1620;
                        remainingLookahead= remainingLookahead1620;
                        hitFailure= hitFailure1620;
                        if (!check$mdx_jj$1027$5()) {
                            currentLookaheadToken= token1620;
                            remainingLookahead= remainingLookahead1620;
                            hitFailure= hitFailure1620;
                            if (!check$mdx_jj$1032$5()) {
                                currentLookaheadToken= token1620;
                                remainingLookahead= remainingLookahead1620;
                                hitFailure= hitFailure1620;
                                if (!check$mdx_jj$1039$5()) {
                                    currentLookaheadToken= token1620;
                                    remainingLookahead= remainingLookahead1620;
                                    hitFailure= hitFailure1620;
                                    if (!check$mdx_jj$1052$5()) {
                                        currentLookaheadToken= token1620;
                                        remainingLookahead= remainingLookahead1620;
                                        hitFailure= hitFailure1620;
                                        if (!check$mdx_jj$1059$5()) {
                                            currentLookaheadToken= token1620;
                                            remainingLookahead= remainingLookahead1620;
                                            hitFailure= hitFailure1620;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:973:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$973$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:974:7
            // Applying single-token optimization for expansion of type ExpansionChoice
            // cc21/mdx.jj:974:7
            if (!scanToken(first_set$mdx_jj$974$7)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:999:5
            // NonTerminal term2 at cc21/mdx.jj:999:5
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 999, 5);
            boolean prevScanToEnd1621= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1621;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1000:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1009:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1009$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1010:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1010:12
            if (!scanToken(NULL)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1011:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1019:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1019$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1020:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1020:12
            // NonTerminal term2 at cc21/mdx.jj:1020:12
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1020, 12);
            boolean prevScanToEnd1622= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1622;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1021:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1027:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1027$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1027:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1027:12
            if (!scanToken(EMPTY)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1028:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1032:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1032$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1032:5
            if (!scanToken(MATCHES)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1032:17
            // NonTerminal term2 at cc21/mdx.jj:1032:17
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1032, 17);
            boolean prevScanToEnd1623= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1623;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1033:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1039:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1039$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1040:5
            if (!scanToken(NOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1040:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1040:25
            // NonTerminal term2 at cc21/mdx.jj:1040:25
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1040, 25);
            boolean prevScanToEnd1624= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1624;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1041:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1052:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1052$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1052:5
            if (!scanToken(IN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1052:12
            // NonTerminal term2 at cc21/mdx.jj:1052:12
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1052, 12);
            boolean prevScanToEnd1625= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1625;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1053:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1059:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1059$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1059:5
            if (!scanToken(NOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1059:13
            if (!scanToken(IN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1059:20
            // NonTerminal term2 at cc21/mdx.jj:1059:20
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1059, 20);
            boolean prevScanToEnd1626= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1626;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1060:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1084:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1084$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1084:5
            Token token1627= currentLookaheadToken;
            int remainingLookahead1627= remainingLookahead;
            boolean hitFailure1627= hitFailure;
            if (!check$mdx_jj$1084$5$()) {
                currentLookaheadToken= token1627;
                remainingLookahead= remainingLookahead1627;
                hitFailure= hitFailure1627;
                if (!check$mdx_jj$1091$5()) {
                    currentLookaheadToken= token1627;
                    remainingLookahead= remainingLookahead1627;
                    hitFailure= hitFailure1627;
                    if (!check$mdx_jj$1098$5()) {
                        currentLookaheadToken= token1627;
                        remainingLookahead= remainingLookahead1627;
                        hitFailure= hitFailure1627;
                        return false;
                    }
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1084:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1084$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1084:5
            if (!scanToken(PLUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1084:14
            // NonTerminal term at cc21/mdx.jj:1084:14
            pushOntoLookaheadStack("term2", "cc21/mdx.jj", 1084, 14);
            boolean prevScanToEnd1628= scanToEnd;
            currentLookaheadProduction= "term";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1628;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1085:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1091:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1091$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1091:5
            if (!scanToken(MINUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1091:15
            // NonTerminal term at cc21/mdx.jj:1091:15
            pushOntoLookaheadStack("term2", "cc21/mdx.jj", 1091, 15);
            boolean prevScanToEnd1629= scanToEnd;
            currentLookaheadProduction= "term";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1629;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1092:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1098:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1098$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1098:5
            if (!scanToken(CONCAT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1098:16
            // NonTerminal term at cc21/mdx.jj:1098:16
            pushOntoLookaheadStack("term2", "cc21/mdx.jj", 1098, 16);
            boolean prevScanToEnd1630= scanToEnd;
            currentLookaheadProduction= "term";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1630;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1099:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1118:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1118$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1118:5
            Token token1631= currentLookaheadToken;
            int remainingLookahead1631= remainingLookahead;
            boolean hitFailure1631= hitFailure;
            if (!check$mdx_jj$1118$5$()) {
                currentLookaheadToken= token1631;
                remainingLookahead= remainingLookahead1631;
                hitFailure= hitFailure1631;
                if (!check$mdx_jj$1125$5()) {
                    currentLookaheadToken= token1631;
                    remainingLookahead= remainingLookahead1631;
                    hitFailure= hitFailure1631;
                    return false;
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1118:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1118$5$() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1118:5
            if (!scanToken(ASTERISK)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1118:18
            // NonTerminal factor at cc21/mdx.jj:1118:18
            pushOntoLookaheadStack("term", "cc21/mdx.jj", 1118, 18);
            boolean prevScanToEnd1632= scanToEnd;
            currentLookaheadProduction= "factor";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$factor()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1632;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1119:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1125:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1125$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1125:5
            if (!scanToken(SOLIDUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1125:17
            // NonTerminal factor at cc21/mdx.jj:1125:17
            pushOntoLookaheadStack("term", "cc21/mdx.jj", 1125, 17);
            boolean prevScanToEnd1633= scanToEnd;
            currentLookaheadProduction= "factor";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$factor()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1633;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1126:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1143:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1143$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1143:3
            // NonTerminal primary at cc21/mdx.jj:1143:3
            pushOntoLookaheadStack("factor", "cc21/mdx.jj", 1143, 3);
            boolean prevScanToEnd1634= scanToEnd;
            currentLookaheadProduction= "primary";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$primary()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1634;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1144:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1147:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1147$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1147:3
            if (!scanToken(PLUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1147:12
            // NonTerminal primary at cc21/mdx.jj:1147:12
            pushOntoLookaheadStack("factor", "cc21/mdx.jj", 1147, 12);
            boolean prevScanToEnd1635= scanToEnd;
            currentLookaheadProduction= "primary";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$primary()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1635;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1148:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1151:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1151$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1151:3
            if (!scanToken(MINUS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1151:13
            // NonTerminal primary at cc21/mdx.jj:1151:13
            pushOntoLookaheadStack("factor", "cc21/mdx.jj", 1151, 13);
            boolean prevScanToEnd1636= scanToEnd;
            currentLookaheadProduction= "primary";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$primary()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1636;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1152:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1158:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1158$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1158:3
            if (!scanToken(EXISTING)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1158:16
            // NonTerminal primary at cc21/mdx.jj:1158:16
            pushOntoLookaheadStack("factor", "cc21/mdx.jj", 1158, 16);
            boolean prevScanToEnd1637= scanToEnd;
            currentLookaheadProduction= "primary";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$primary()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1637;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1159:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1174:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1174$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1174:5
            if (!scanToken(DOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1174:13
            // NonTerminal segmentOrFuncall at cc21/mdx.jj:1174:13
            pushOntoLookaheadStack("primary", "cc21/mdx.jj", 1174, 13);
            boolean prevScanToEnd1638= scanToEnd;
            currentLookaheadProduction= "segmentOrFuncall";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$segmentOrFuncall()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1638;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1189:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1189$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1189:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1191:7
            Token token1639= currentLookaheadToken;
            int remainingLookahead1639= remainingLookahead;
            boolean hitFailure1639= hitFailure;
            if (!check$mdx_jj$1191$7()) {
                currentLookaheadToken= token1639;
                remainingLookahead= remainingLookahead1639;
                hitFailure= hitFailure1639;
                if (!check$mdx_jj$1196$7()) {
                    currentLookaheadToken= token1639;
                    remainingLookahead= remainingLookahead1639;
                    hitFailure= hitFailure1639;
                    return false;
                }
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1198:5
            if (!scanToken(RPAREN)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1191:7
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1191$7() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1191$17()) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1192:7
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1196:7
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1196$7() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1196:7
            // NonTerminal expOrEmptyList at cc21/mdx.jj:1196:7
            pushOntoLookaheadStack("segmentOrFuncall", "cc21/mdx.jj", 1196, 7);
            boolean prevScanToEnd1640= scanToEnd;
            currentLookaheadProduction= "expOrEmptyList";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$expOrEmptyList()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1640;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1246:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1246$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1246:3
            if (!scanToken(CAST)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1246:12
            if (!scanToken(LPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1246:23
            // NonTerminal unaliasedExpression at cc21/mdx.jj:1246:23
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1246, 23);
            boolean prevScanToEnd1641= scanToEnd;
            currentLookaheadProduction= "unaliasedExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$unaliasedExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1641;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1247:3
            if (!scanToken(AS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1247:10
            // NonTerminal parseNameSegment at cc21/mdx.jj:1247:10
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1247, 10);
            boolean prevScanToEnd1642= scanToEnd;
            currentLookaheadProduction= "parseNameSegment";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseNameSegment()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1642;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1247:39
            if (!scanToken(RPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1248:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1256:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1256$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1256:3
            if (!scanToken(LPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1256:14
            // NonTerminal expList at cc21/mdx.jj:1256:14
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1256, 14);
            boolean prevScanToEnd1643= scanToEnd;
            currentLookaheadProduction= "expList";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$expList()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1643;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1256:38
            if (!scanToken(RPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1257:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1265:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1265$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1265:3
            if (!scanToken(LBRACE)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1267:5
            Token token1644= currentLookaheadToken;
            int remainingLookahead1644= remainingLookahead;
            boolean hitFailure1644= hitFailure;
            if (!check$mdx_jj$1267$5()) {
                currentLookaheadToken= token1644;
                remainingLookahead= remainingLookahead1644;
                hitFailure= hitFailure1644;
                if (!check$mdx_jj$1272$5()) {
                    currentLookaheadToken= token1644;
                    remainingLookahead= remainingLookahead1644;
                    hitFailure= hitFailure1644;
                    return false;
                }
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1274:3
            if (!scanToken(RBRACE)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1275:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1267:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1267$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1267$15()) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1268:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1272:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1272$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1272:5
            // NonTerminal expList at cc21/mdx.jj:1272:5
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1272, 5);
            boolean prevScanToEnd1645= scanToEnd;
            currentLookaheadProduction= "expList";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$expList()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1645;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1279:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1279$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1279:3
            // NonTerminal caseExpression at cc21/mdx.jj:1279:3
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1279, 3);
            boolean prevScanToEnd1646= scanToEnd;
            currentLookaheadProduction= "caseExpression";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$caseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1646;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1280:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1286:3
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1286$3() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1286:3
            // NonTerminal parseNameSegment at cc21/mdx.jj:1286:3
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1286, 3);
            boolean prevScanToEnd1647= scanToEnd;
            currentLookaheadProduction= "parseNameSegment";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseNameSegment()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1647;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1287:3
            while (remainingLookahead> 0&&!hitFailure) {
                Token token1648= currentLookaheadToken;
                if (!check$mdx_jj$1288$5()) {
                    currentLookaheadToken= token1648;
                    break;
                }
            }
            hitFailure= false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1297:5
            Token token1649= currentLookaheadToken;
            int remainingLookahead1649= remainingLookahead;
            boolean hitFailure1649= hitFailure;
            if (!check$mdx_jj$1297$5()) {
                currentLookaheadToken= token1649;
                remainingLookahead= remainingLookahead1649;
                hitFailure= hitFailure1649;
                if (!check$mdx_jj$1308$16()) {
                    currentLookaheadToken= token1649;
                    remainingLookahead= remainingLookahead1649;
                    hitFailure= hitFailure1649;
                    return false;
                }
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1312:3
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1288:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1288$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1288:5
            if (!scanToken(BANG)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1288:14
            // NonTerminal parseNameSegment at cc21/mdx.jj:1288:14
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1288, 14);
            boolean prevScanToEnd1650= scanToEnd;
            currentLookaheadProduction= "parseNameSegment";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseNameSegment()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1650;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1289:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1297:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1297$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1297:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1299:7
            Token token1651= currentLookaheadToken;
            int remainingLookahead1651= remainingLookahead;
            boolean hitFailure1651= hitFailure;
            if (!check$mdx_jj$1299$7()) {
                currentLookaheadToken= token1651;
                remainingLookahead= remainingLookahead1651;
                hitFailure= hitFailure1651;
                if (!check$mdx_jj$1304$7()) {
                    currentLookaheadToken= token1651;
                    remainingLookahead= remainingLookahead1651;
                    hitFailure= hitFailure1651;
                    return false;
                }
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1306:5
            if (!scanToken(RPAREN)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1299:7
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1299$7() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1299$17()) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1300:7
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1304:7
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1304$7() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1304:7
            // NonTerminal expOrEmptyList at cc21/mdx.jj:1304:7
            pushOntoLookaheadStack("atom", "cc21/mdx.jj", 1304, 7);
            boolean prevScanToEnd1652= scanToEnd;
            currentLookaheadProduction= "expOrEmptyList";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$expOrEmptyList()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1652;
                --nonTerminalNesting;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1308:16
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1308$16() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1308:16
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1326:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1326$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1326:5
            // NonTerminal parseExpression at cc21/mdx.jj:1326:5
            pushOntoLookaheadStack("caseExpression", "cc21/mdx.jj", 1326, 5);
            boolean prevScanToEnd1653= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= false;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1653;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1327:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1333:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1333$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1333:5
            if (!scanToken(WHEN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1333:14
            // NonTerminal parseExpression at cc21/mdx.jj:1333:14
            pushOntoLookaheadStack("caseExpression", "cc21/mdx.jj", 1333, 14);
            boolean prevScanToEnd1654= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1654;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1333:45
            if (!scanToken(THEN)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1333:54
            // NonTerminal parseExpression at cc21/mdx.jj:1333:54
            pushOntoLookaheadStack("caseExpression", "cc21/mdx.jj", 1333, 54);
            boolean prevScanToEnd1655= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1655;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1334:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // scanahead routine for expansion at: 
    // cc21/mdx.jj:1340:5
    // BuildScanRoutine macro
    private final boolean check$mdx_jj$1340$5() {
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1340:5
            if (!scanToken(ELSE)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1340:14
            // NonTerminal parseExpression at cc21/mdx.jj:1340:14
            pushOntoLookaheadStack("caseExpression", "cc21/mdx.jj", 1340, 14);
            boolean prevScanToEnd1656= scanToEnd;
            currentLookaheadProduction= "parseExpression";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$parseExpression()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1656;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1341:5
            return true;
        }
        finally {
            lookaheadRoutineNesting--;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:877:5
    private final boolean scan$mdx_jj$877$5() {
        int nonTerminalNesting1671= nonTerminalNesting;
        int lookaheadRoutineNesting1673= lookaheadRoutineNesting;
        Token currentLookaheadToken1672= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= UNLIMITED;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$877$15()) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1673;
            currentLookaheadToken= currentLookaheadToken1672;
            nonTerminalNesting= nonTerminalNesting1671;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1009:5
    private final boolean scan$mdx_jj$1009$5() {
        int nonTerminalNesting1674= nonTerminalNesting;
        int lookaheadRoutineNesting1676= lookaheadRoutineNesting;
        Token currentLookaheadToken1675= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= 2;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1010:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1010:12
            if (!scanToken(NULL)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1011:5
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1676;
            currentLookaheadToken= currentLookaheadToken1675;
            nonTerminalNesting= nonTerminalNesting1674;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1019:5
    private final boolean scan$mdx_jj$1019$5() {
        int nonTerminalNesting1677= nonTerminalNesting;
        int lookaheadRoutineNesting1679= lookaheadRoutineNesting;
        Token currentLookaheadToken1678= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= 2;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1020:5
            if (!scanToken(IS)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1020:12
            // NonTerminal term2 at cc21/mdx.jj:1020:12
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1020, 12);
            boolean prevScanToEnd1680= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1680;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1021:5
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1679;
            currentLookaheadToken= currentLookaheadToken1678;
            nonTerminalNesting= nonTerminalNesting1677;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1039:5
    private final boolean scan$mdx_jj$1039$5() {
        int nonTerminalNesting1681= nonTerminalNesting;
        int lookaheadRoutineNesting1683= lookaheadRoutineNesting;
        Token currentLookaheadToken1682= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= 2;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1040:5
            if (!scanToken(NOT)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1040:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1040:25
            // NonTerminal term2 at cc21/mdx.jj:1040:25
            pushOntoLookaheadStack("term3", "cc21/mdx.jj", 1040, 25);
            boolean prevScanToEnd1684= scanToEnd;
            currentLookaheadProduction= "term2";
            scanToEnd= true;
            ++nonTerminalNesting;
            try {
                if (!check$term2()) return false;
            }
            finally {
                popLookaheadStack();
                scanToEnd= prevScanToEnd1684;
                --nonTerminalNesting;
            }
            if (hitFailure||remainingLookahead<=0) return!hitFailure;
            // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1041:5
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1683;
            currentLookaheadToken= currentLookaheadToken1682;
            nonTerminalNesting= nonTerminalNesting1681;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1191:7
    private final boolean scan$mdx_jj$1191$7() {
        int nonTerminalNesting1685= nonTerminalNesting;
        int lookaheadRoutineNesting1687= lookaheadRoutineNesting;
        Token currentLookaheadToken1686= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= UNLIMITED;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1191$17()) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1687;
            currentLookaheadToken= currentLookaheadToken1686;
            nonTerminalNesting= nonTerminalNesting1685;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1267:5
    private final boolean scan$mdx_jj$1267$5() {
        int nonTerminalNesting1688= nonTerminalNesting;
        int lookaheadRoutineNesting1690= lookaheadRoutineNesting;
        Token currentLookaheadToken1689= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= UNLIMITED;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1267$15()) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1690;
            currentLookaheadToken= currentLookaheadToken1689;
            nonTerminalNesting= nonTerminalNesting1688;
        }
    }

    // BuildPredicateRoutine: expansion at cc21/mdx.jj:1299:7
    private final boolean scan$mdx_jj$1299$7() {
        int nonTerminalNesting1691= nonTerminalNesting;
        int lookaheadRoutineNesting1693= lookaheadRoutineNesting;
        Token currentLookaheadToken1692= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            remainingLookahead= UNLIMITED;
            if (currentLookaheadToken== null) currentLookaheadToken= lastConsumedToken;
            hitFailure= false;
            scanToEnd= false;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) return true;
            if (!check$mdx_jj$1299$17()) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= lookaheadRoutineNesting1693;
            currentLookaheadToken= currentLookaheadToken1692;
            nonTerminalNesting= nonTerminalNesting1691;
        }
    }

    // lookahead routine for lookahead at: 
    // cc21/mdx.jj:877:5
    private final boolean check$mdx_jj$877$15() {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // Applying single-token optimization for expansion of type ExpansionSequence
            // cc21/mdx.jj:877:15
            if (!scanToken(DOT)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // cc21/mdx.jj:1191:7
    private final boolean check$mdx_jj$1191$17() {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // Applying single-token optimization for expansion of type ExpansionSequence
            // cc21/mdx.jj:1191:17
            if (!scanToken(RPAREN)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // cc21/mdx.jj:1267:5
    private final boolean check$mdx_jj$1267$15() {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // Applying single-token optimization for expansion of type ExpansionSequence
            // cc21/mdx.jj:1267:15
            if (!scanToken(RBRACE)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // cc21/mdx.jj:1299:7
    private final boolean check$mdx_jj$1299$17() {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // Applying single-token optimization for expansion of type ExpansionSequence
            // cc21/mdx.jj:1299:17
            if (!scanToken(RPAREN)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseExpression() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:675:3
        // NonTerminal unaliasedExpression at cc21/mdx.jj:675:3
        pushOntoLookaheadStack("parseExpression", "cc21/mdx.jj", 675, 3);
        boolean prevScanToEnd1721= scanToEnd;
        currentLookaheadProduction= "unaliasedExpression";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$unaliasedExpression()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1721;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:676:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1722= currentLookaheadToken;
            if (!check$mdx_jj$677$5()) {
                currentLookaheadToken= token1722;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:686:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expressionOrEmpty() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:696:3
        Token token1723= currentLookaheadToken;
        int remainingLookahead1723= remainingLookahead;
        boolean hitFailure1723= hitFailure;
        if (!check$mdx_jj$696$3()) {
            currentLookaheadToken= token1723;
            remainingLookahead= remainingLookahead1723;
            hitFailure= hitFailure1723;
            if (!check$mdx_jj$701$3()) {
                currentLookaheadToken= token1723;
                remainingLookahead= remainingLookahead1723;
                hitFailure= hitFailure1723;
                return false;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expOrEmptyList() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:715:3
        // NonTerminal expressionOrEmpty at cc21/mdx.jj:715:3
        pushOntoLookaheadStack("expOrEmptyList", "cc21/mdx.jj", 715, 3);
        boolean prevScanToEnd1724= scanToEnd;
        currentLookaheadProduction= "expressionOrEmpty";
        scanToEnd= true;
        ++nonTerminalNesting;
        try {
            if (!check$expressionOrEmpty()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1724;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:716:3
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:719:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1725= currentLookaheadToken;
            if (!check$mdx_jj$720$5()) {
                currentLookaheadToken= token1725;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:726:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expList() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:738:3
        // NonTerminal parseExpression at cc21/mdx.jj:738:3
        pushOntoLookaheadStack("expList", "cc21/mdx.jj", 738, 3);
        boolean prevScanToEnd1726= scanToEnd;
        currentLookaheadProduction= "parseExpression";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$parseExpression()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1726;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:739:3
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:742:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1727= currentLookaheadToken;
            if (!check$mdx_jj$743$5()) {
                currentLookaheadToken= token1727;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:749:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseIdentifier() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:776:5
        Token token1729= currentLookaheadToken;
        int remainingLookahead1729= remainingLookahead;
        boolean hitFailure1729= hitFailure;
        if (!check$mdx_jj$776$5$()) {
            currentLookaheadToken= token1729;
            remainingLookahead= remainingLookahead1729;
            hitFailure= hitFailure1729;
            if (!check$mdx_jj$778$5()) {
                currentLookaheadToken= token1729;
                remainingLookahead= remainingLookahead1729;
                hitFailure= hitFailure1729;
                return false;
            }
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:780:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseNameSegment() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:790:3
        Token token1730= currentLookaheadToken;
        int remainingLookahead1730= remainingLookahead;
        boolean hitFailure1730= hitFailure;
        if (!scanToken(first_set$mdx_jj$790$3)) {
            currentLookaheadToken= token1730;
            remainingLookahead= remainingLookahead1730;
            hitFailure= hitFailure1730;
            if (!scanToken(ID)) {
                currentLookaheadToken= token1730;
                remainingLookahead= remainingLookahead1730;
                hitFailure= hitFailure1730;
                if (!check$mdx_jj$800$3()) {
                    currentLookaheadToken= token1730;
                    remainingLookahead= remainingLookahead1730;
                    hitFailure= hitFailure1730;
                    if (!scanToken(QUOTED_ID)) {
                        currentLookaheadToken= token1730;
                        remainingLookahead= remainingLookahead1730;
                        hitFailure= hitFailure1730;
                        return false;
                    }
                }
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseKeyIdentifier() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for OneOrMore specified at cc21/mdx.jj:819:3
        if (!scanToken(first_set$mdx_jj$820$5)) {
            return false;
        }
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1731= currentLookaheadToken;
            if (!scanToken(first_set$mdx_jj$820$5)) {
                currentLookaheadToken= token1731;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:825:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$unaliasedExpression() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:895:3
        // NonTerminal term5 at cc21/mdx.jj:895:3
        pushOntoLookaheadStack("unaliasedExpression", "cc21/mdx.jj", 895, 3);
        boolean prevScanToEnd1734= scanToEnd;
        currentLookaheadProduction= "term5";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$term5()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1734;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:896:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1735= currentLookaheadToken;
            if (!check$mdx_jj$897$5()) {
                currentLookaheadToken= token1735;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:921:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term5() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:931:3
        // NonTerminal term4 at cc21/mdx.jj:931:3
        pushOntoLookaheadStack("term5", "cc21/mdx.jj", 931, 3);
        boolean prevScanToEnd1736= scanToEnd;
        currentLookaheadProduction= "term4";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$term4()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1736;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:932:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1737= currentLookaheadToken;
            if (!check$mdx_jj$933$5()) {
                currentLookaheadToken= token1737;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:941:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term4() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:951:3
        Token token1738= currentLookaheadToken;
        int remainingLookahead1738= remainingLookahead;
        boolean hitFailure1738= hitFailure;
        if (!check$mdx_jj$951$3()) {
            currentLookaheadToken= token1738;
            remainingLookahead= remainingLookahead1738;
            hitFailure= hitFailure1738;
            if (!check$mdx_jj$955$3()) {
                currentLookaheadToken= token1738;
                remainingLookahead= remainingLookahead1738;
                hitFailure= hitFailure1738;
                return false;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term3() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:970:3
        // NonTerminal term2 at cc21/mdx.jj:970:3
        pushOntoLookaheadStack("term3", "cc21/mdx.jj", 970, 3);
        boolean prevScanToEnd1739= scanToEnd;
        currentLookaheadProduction= "term2";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$term2()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1739;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:971:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1740= currentLookaheadToken;
            if (!check$mdx_jj$973$5()) {
                currentLookaheadToken= token1740;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1072:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term2() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1082:3
        // NonTerminal term at cc21/mdx.jj:1082:3
        pushOntoLookaheadStack("term2", "cc21/mdx.jj", 1082, 3);
        boolean prevScanToEnd1741= scanToEnd;
        currentLookaheadProduction= "term";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$term()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1741;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1083:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1742= currentLookaheadToken;
            if (!check$mdx_jj$1084$5()) {
                currentLookaheadToken= token1742;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1106:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1116:3
        // NonTerminal factor at cc21/mdx.jj:1116:3
        pushOntoLookaheadStack("term", "cc21/mdx.jj", 1116, 3);
        boolean prevScanToEnd1743= scanToEnd;
        currentLookaheadProduction= "factor";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$factor()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1743;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1117:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1744= currentLookaheadToken;
            if (!check$mdx_jj$1118$5()) {
                currentLookaheadToken= token1744;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1133:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$factor() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1143:3
        Token token1745= currentLookaheadToken;
        int remainingLookahead1745= remainingLookahead;
        boolean hitFailure1745= hitFailure;
        if (!check$mdx_jj$1143$3()) {
            currentLookaheadToken= token1745;
            remainingLookahead= remainingLookahead1745;
            hitFailure= hitFailure1745;
            if (!check$mdx_jj$1147$3()) {
                currentLookaheadToken= token1745;
                remainingLookahead= remainingLookahead1745;
                hitFailure= hitFailure1745;
                if (!check$mdx_jj$1151$3()) {
                    currentLookaheadToken= token1745;
                    remainingLookahead= remainingLookahead1745;
                    hitFailure= hitFailure1745;
                    if (!check$mdx_jj$1158$3()) {
                        currentLookaheadToken= token1745;
                        remainingLookahead= remainingLookahead1745;
                        hitFailure= hitFailure1745;
                        return false;
                    }
                }
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$primary() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1172:3
        // NonTerminal atom at cc21/mdx.jj:1172:3
        pushOntoLookaheadStack("primary", "cc21/mdx.jj", 1172, 3);
        boolean prevScanToEnd1746= scanToEnd;
        currentLookaheadProduction= "atom";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$atom()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1746;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1173:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1747= currentLookaheadToken;
            if (!check$mdx_jj$1174$5()) {
                currentLookaheadToken= token1747;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1176:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$segmentOrFuncall() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for NonTerminal specified at cc21/mdx.jj:1187:3
        // NonTerminal parseIdentifier at cc21/mdx.jj:1187:3
        pushOntoLookaheadStack("segmentOrFuncall", "cc21/mdx.jj", 1187, 3);
        boolean prevScanToEnd1748= scanToEnd;
        currentLookaheadProduction= "parseIdentifier";
        scanToEnd= false;
        ++nonTerminalNesting;
        try {
            if (!check$parseIdentifier()) return false;
        }
        finally {
            popLookaheadStack();
            scanToEnd= prevScanToEnd1748;
            --nonTerminalNesting;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrOne specified at cc21/mdx.jj:1188:3
        Token token1749= currentLookaheadToken;
        if (!check$mdx_jj$1189$5()) {
            currentLookaheadToken= token1749;
            hitFailure= false;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1200:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$atom() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ExpansionChoice specified at cc21/mdx.jj:1230:3
        Token token1750= currentLookaheadToken;
        int remainingLookahead1750= remainingLookahead;
        boolean hitFailure1750= hitFailure;
        if (!scanToken(SINGLE_QUOTED_STRING)) {
            currentLookaheadToken= token1750;
            remainingLookahead= remainingLookahead1750;
            hitFailure= hitFailure1750;
            if (!scanToken(DOUBLE_QUOTED_STRING)) {
                currentLookaheadToken= token1750;
                remainingLookahead= remainingLookahead1750;
                hitFailure= hitFailure1750;
                if (!scanToken(first_set$mdx_jj$1238$3)) {
                    currentLookaheadToken= token1750;
                    remainingLookahead= remainingLookahead1750;
                    hitFailure= hitFailure1750;
                    if (!scanToken(NULL)) {
                        currentLookaheadToken= token1750;
                        remainingLookahead= remainingLookahead1750;
                        hitFailure= hitFailure1750;
                        if (!check$mdx_jj$1246$3()) {
                            currentLookaheadToken= token1750;
                            remainingLookahead= remainingLookahead1750;
                            hitFailure= hitFailure1750;
                            if (!check$mdx_jj$1256$3()) {
                                currentLookaheadToken= token1750;
                                remainingLookahead= remainingLookahead1750;
                                hitFailure= hitFailure1750;
                                if (!check$mdx_jj$1265$3()) {
                                    currentLookaheadToken= token1750;
                                    remainingLookahead= remainingLookahead1750;
                                    hitFailure= hitFailure1750;
                                    if (!check$mdx_jj$1279$3()) {
                                        currentLookaheadToken= token1750;
                                        remainingLookahead= remainingLookahead1750;
                                        hitFailure= hitFailure1750;
                                        if (!check$mdx_jj$1286$3()) {
                                            currentLookaheadToken= token1750;
                                            remainingLookahead= remainingLookahead1750;
                                            hitFailure= hitFailure1750;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$caseExpression() {
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1324:3
        if (!scanToken(CASE)) return false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrOne specified at cc21/mdx.jj:1325:3
        Token token1751= currentLookaheadToken;
        if (!check$mdx_jj$1326$5()) {
            currentLookaheadToken= token1751;
            hitFailure= false;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrMore specified at cc21/mdx.jj:1332:3
        while (remainingLookahead> 0&&!hitFailure) {
            Token token1752= currentLookaheadToken;
            if (!check$mdx_jj$1333$5()) {
                currentLookaheadToken= token1752;
                break;
            }
        }
        hitFailure= false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for ZeroOrOne specified at cc21/mdx.jj:1339:3
        Token token1753= currentLookaheadToken;
        if (!check$mdx_jj$1340$5()) {
            currentLookaheadToken= token1753;
            hitFailure= false;
        }
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for RegexpRef specified at cc21/mdx.jj:1345:3
        if (!scanToken(END)) return false;
        if (hitFailure||remainingLookahead<=0) return!hitFailure;
        // Lookahead Code for CodeBlock specified at cc21/mdx.jj:1346:3
        return true;
    }

    ArrayList<NonTerminalCall> parsingStack= new ArrayList<> ();
    private ArrayList<NonTerminalCall> lookaheadStack= new ArrayList<> ();
    /**
 * Inner class that represents entering a grammar production
 */
    class NonTerminalCall {
        final String sourceFile;
        final String productionName;
        final int line, column;
        NonTerminalCall(String sourceFile, String productionName, int line, int column) {
            this.sourceFile= sourceFile;
            this.productionName= productionName;
            this.line= line;
            this.column= column;
        }

        final mdxLexer getTokenSource() {
            return MDXParser.this.token_source;
        }

        StackTraceElement createStackTraceElement() {
            return new StackTraceElement("MDXParser", productionName, sourceFile, line);
        }

        void dump(PrintStream ps) {
            ps.println(productionName+":"+line+":"+column);
        }

    }
    private final void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popCallStack() {
        NonTerminalCall ntc= parsingStack.remove(parsingStack.size()-1);
        this.currentlyParsedProduction= ntc.productionName;
    }

    private final void restoreCallStack(int prevSize) {
        while (parsingStack.size()> prevSize) {
            popCallStack();
        }
    }

    private final void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popLookaheadStack() {
        NonTerminalCall ntc= lookaheadStack.remove(lookaheadStack.size()-1);
        this.currentLookaheadProduction= ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: "+currentlyParsedProduction);
        ps.println("Current Lookahead Production is: "+currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token oldToken= lastConsumedToken;
        Token nextToken= nextToken(lastConsumedToken);
        if (nextToken.getType()!=expectedType) {
            nextToken= handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken= nextToken;
        this.nextTokenType= null;
        if (buildTree&&tokensAreNodes) {
            pushNode(lastConsumedToken);
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(this, nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private class ParseState {
        Token lastConsumed;
        ArrayList<NonTerminalCall> parsingStack;
        LexicalState lexicalState;
        NodeScope nodeScope;
        ParseState() {
            this.lastConsumed= MDXParser.this.lastConsumedToken;
            @SuppressWarnings("unchecked")
            ArrayList<NonTerminalCall> parsingStack= (ArrayList<NonTerminalCall> ) MDXParser.this.parsingStack.clone();
            this.parsingStack= parsingStack;
            this.lexicalState= token_source.lexicalState;
            this.nodeScope= (NodeScope) currentNodeScope.clone();
        }

    }
    private boolean buildTree= true;
    private boolean tokensAreNodes= true;
    private boolean unparsedTokensAreNodes= false;
    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes= unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes= tokensAreNodes;
    }

    NodeScope currentNodeScope= new NodeScope();
    /** 
         * @return the root node of the AST. It only makes sense to call
         * this after a successful parse. 
         */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
     * push a node onto the top of the node stack
     * @param n the node to push
     */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /** 
     * @return the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /** 
     * @return the node currently on the top of the tree-building stack. 
     */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     * @param n the node to poke
     */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /** 
     * @return the number of Nodes on the tree-building stack in the current node
         * scope. 
         */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n!=null) {
            Token next= nextToken(lastConsumedToken);
            n.setTokenSource(lastConsumedToken.getTokenSource());
            n.setBeginOffset(next.getBeginOffset());
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
         * children.  That number of nodes are popped from the stack and
         * made the children of the definite node.  Then the definite node
         * is pushed on to the stack.
         */
    private void closeNodeScope(Node n, int num) {
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes= new ArrayList<Node> ();
        for (int i= 0; i<num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            // FIXME deal with the UNPARSED_TOKENS_ARE_NODES case
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
         * A conditional node is constructed if the condition is true.  All
         * the nodes that have been pushed since the node was opened are
         * made children of the conditional node, which is then pushed
         * on to the stack.  If the condition is false the node is not
         * constructed and they are left on the stack. 
         */
    private void closeNodeScope(Node n, boolean condition) {
        if (n!=null&&condition) {
            n.setEndOffset(lastConsumedToken.getEndOffset());
            int a= nodeArity();
            currentNodeScope.close();
            ArrayList<Node> nodes= new ArrayList<Node> ();
            while (a--> 0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (unparsedTokensAreNodes&&child instanceof Token) {
                    Token tok= (Token) child;
                    while (tok.previousCachedToken()!=null&&tok.previousCachedToken().isUnparsed()) {
                        tok= tok.previousCachedToken();
                    }
                    while (tok.isUnparsed()) {
                        n.addChild(tok);
                        tok= tok.nextCachedToken();
                    }
                }
                n.addChild(child);
            }
            n.close();
            pushNode(n);
        }
        else  {
            currentNodeScope.close();
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree= buildTree;
    }

    /**
     * Just a kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    MDXParser jjtree= this;
    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node>  {
        NodeScope parentScope;
        NodeScope() {
            this.parentScope= MDXParser.this.currentNodeScope;
            MDXParser.this.currentNodeScope= this;
        }

        boolean isRootScope() {
            return parentScope== null;
        }

        Node rootNode() {
            NodeScope ns= this;
            while (ns.parentScope!=null) {
                ns= ns.parentScope;
            }
            return ns.isEmpty()?null:
            ns.get(0);
        }

        Node peek() {
            return isEmpty()?parentScope.peek():
            get(size()-1);
        }

        Node pop() {
            return isEmpty()?parentScope.pop():
            remove(size()-1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            }
            else  {
                set(size()-1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            MDXParser.this.currentNodeScope= parentScope;
        }

        int nestingLevel() {
            int result= 0;
            NodeScope parent= this;
            while (parent.parentScope!=null) {
                result++;
                parent= parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone= (NodeScope) super.clone();
            if (parentScope!=null) {
                clone.parentScope= (NodeScope) parentScope.clone();
            }
            return clone;
        }

    }
}
